{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogsort/by/interface/in/go//cs/sort-by-interface-in-go/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Sort is an operation very often to use.\nAlthough a <code class=\"language-text\">quick-sort</code> isn't too long. We still don't want to create it again and again.\nIt also don't have the value to copy it.</p>\n<p>Good news is standard package <code class=\"language-text\">sort</code> provide a lots of sort function.\nUnlike most language do, it's no association with type or data structure.\nFunction <code class=\"language-text\">sort.Sort</code> do not have any expected to it's target.\nIt use <code class=\"language-text\">sort.Interface</code> to detect how to work.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> sort\n\n<span class=\"token keyword\">type</span> Interface <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n    <span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">bool</span> <span class=\"token comment\">// i, j is index of element</span>\n    <span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's start it.</p>\n<script src=\"https://gist.github.com/dannypsnl/1f4a59834aae245d3a9bc1613a26650b.js\"></script>\n<p>Let me explain it.</p>\n<ul>\n<li><code class=\"language-text\">Len</code> mean size of the target</li>\n<li><code class=\"language-text\">Less</code> provide a common way to compare two elements in target</li>\n<li><code class=\"language-text\">Swap</code> provide a common way to swap two elements</li>\n</ul>\n<p>It just a concept. So let's dig into golang implementation.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> sort\n<span class=\"token comment\">// 上省５００行...</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Sort</span><span class=\"token punctuation\">(</span>data Interface<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \tn <span class=\"token operator\">:=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">Len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 下略５００行...</span>\n<span class=\"token comment\">// ps. No real 500</span></code></pre></div>\n<p><code class=\"language-text\">Sort</code> is easier than my imagine. Awesome!</p>\n<p>From this, we know have to go into <code class=\"language-text\">quicksort</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> sort\n<span class=\"token comment\">// 上省５００行...</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>data Interface<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> maxDepth <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">for</span> b<span class=\"token operator\">-</span>a <span class=\"token operator\">></span> <span class=\"token number\">12</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Use ShellSort for slices &lt;= 12 elements</span>\n  \t\t<span class=\"token keyword\">if</span> maxDepth <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  \t\t\t<span class=\"token keyword\">return</span>\n  \t\t<span class=\"token punctuation\">}</span>\n  \t\tmaxDepth<span class=\"token operator\">--</span>\n  \t\tmlo<span class=\"token punctuation\">,</span> mhi <span class=\"token operator\">:=</span> <span class=\"token function\">doPivot</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  \t\t<span class=\"token keyword\">if</span> mlo<span class=\"token operator\">-</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token operator\">-</span>mhi <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> mlo<span class=\"token punctuation\">,</span> maxDepth<span class=\"token punctuation\">)</span>\n  \t\t\ta <span class=\"token operator\">=</span> mhi\n  \t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> mhi<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> maxDepth<span class=\"token punctuation\">)</span>\n  \t\t\tb <span class=\"token operator\">=</span> mlo\n  \t\t<span class=\"token punctuation\">}</span>\n  \t<span class=\"token punctuation\">}</span>\n  \t<span class=\"token keyword\">if</span> b<span class=\"token operator\">-</span>a <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n  \t\t<span class=\"token comment\">// Do ShellSort pass with gap 6</span>\n  \t\t<span class=\"token comment\">// It could be written in this simplified form cause b-a &lt;= 12</span>\n  \t\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n  \t\t\t<span class=\"token keyword\">if</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">Less</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \t\t\t\tdata<span class=\"token punctuation\">.</span><span class=\"token function\">Swap</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n  \t\t\t<span class=\"token punctuation\">}</span>\n  \t\t<span class=\"token punctuation\">}</span>\n  \t\t<span class=\"token function\">insertionSort</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n  \t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 下略５００行...</span></code></pre></div>\n<p><code class=\"language-text\">maxDepth</code> detect the size should use heap sort or not.</p>\n<p>The more you should go to read algorithm. But you can get the unusual theory from Go's design of <code class=\"language-text\">sort</code> package.</p>\n<p>Thank for read.</p>\n<h3>References:</h3>\n<h4><a href=\"http://www.gopl.io/\">The Go programming language</a></h4>\n<ul>\n<li>Author: Alan A. A. Donovan &#x26; Brian W. Kernighan</li>\n<li>ISBN: 978-986-476-133-3</li>\n</ul>","frontmatter":{"title":"Sort by interface in Go","categories":["cs"],"tags":["golang"]}}},"pageContext":{"slug":"/blogsort/by/interface/in/go//cs/sort-by-interface-in-go/"}}}