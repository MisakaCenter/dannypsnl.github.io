{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogsingleton/best/practice/in/golang//cs/singleton-best-practice-in-golang/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<h2>How to implement singleton in Go?</h2>\n<p>It's really a problem at there. And worth to think about it.</p>\n<h3>Start</h3>\n<p>Let's consider how to create a singleton?\nWe need a reference can't be change by anyone at all the time except initialize.</p>\n<p>It's possible in Go? Yes, package level reference.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> s <span class=\"token operator\">*</span>singleton</code></pre></div>\n<p>What's next? It have to be initialize before using. Basic implementation you can easier thought out is</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>singleton <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        s <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>singleton<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// for clean, nothing at here</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Seems perfect, but buggy actually. Why?</p>\n<p>Because the check can facing the race condition when using a lot goroutine access our singleton.</p>\n<p>Now we know the problem, how to solve it?</p>\n<p>We have two choices. One is <code class=\"language-text\">init</code> God function, another is <code class=\"language-text\">sync.Once</code> let only do once all the time.\nLet's start from first solution.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    s <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>singleton<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>singleton <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> s\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Why this will work? Because <code class=\"language-text\">init</code> must be execute after anything trying to using anything in a package.\nSo here <code class=\"language-text\">s</code> will be initialize before this package be using. And the race condition won't exist by Go's guarantee.</p>\n<p>Second way is <code class=\"language-text\">sync.Once</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> once sync<span class=\"token punctuation\">.</span>Once\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">GetInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>singleton <span class=\"token punctuation\">{</span>\n    once<span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>singleton<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> s\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because <code class=\"language-text\">sync.Once</code> will do one time at all process. So it will be a safety way to initialize the singleton</p>","frontmatter":{"title":"The best practice of Singleton in Golang","categories":["cs"],"tags":["golang","DesignPattern"]}}},"pageContext":{"slug":"/blogsingleton/best/practice/in/golang//cs/singleton-best-practice-in-golang/"}}}