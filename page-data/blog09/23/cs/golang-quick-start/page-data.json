{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog09/23/cs/golang-quick-start/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>I am going to show you enough knowledge to getting start with Go. Are you ready?</p>\n<h2>Variables</h2>\n<p>In Go, we have <code class=\"language-text\">const</code>, <code class=\"language-text\">var</code> &#x26; short declaration &#x26; definition.</p>\n<p>In top scope of Go program(out of function)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> C <span class=\"token operator\">=</span> <span class=\"token string\">\"constant\"</span>\n<span class=\"token keyword\">var</span>   V <span class=\"token operator\">=</span> <span class=\"token string\">\"var\"</span></code></pre></div>\n<p>We can use a lazy way to do this when we have a lots variables(p.s. <code class=\"language-text\">var</code> work as <code class=\"language-text\">const</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tC  <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tC1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\tC2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In <code class=\"language-text\">func</code>(Go's function keyword), we can have <code class=\"language-text\">const</code>, <code class=\"language-text\">var</code> &#x26; short.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// short</span>\n\t<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\t<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Important thing about short format is it can only have <code class=\"language-text\">variableName := value</code>, not thing more</p>\n<p>We also can have type after variable name, e.g. <code class=\"language-text\">var a int = 1</code>.\nBut we usually don't do this.</p>\n<p>An important concept is we can't have any variable is unused in Go.\nThey will cause compile error.</p>\n<h2>Function</h2>\n<p>We use <code class=\"language-text\">func</code> to start a function definition.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Format of function define is: <code class=\"language-text\">func funcName(parameterList) returnType { body }</code></p>\n<p>That's hard to use description to show you how it work, so let's look an example.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>lv<span class=\"token punctuation\">,</span> rv <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> lv <span class=\"token operator\">+</span> rv\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Use</span>\na <span class=\"token operator\">:=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// a == 3</span></code></pre></div>\n<p>As you can see, we can omit type if parameter has the same type, we use last one as rest type.</p>\n<p>An important thing is we can return several type at one function.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Lookup</span><span class=\"token punctuation\">(</span>name <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>age <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tage<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> aMap<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>ok <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do not have this user: %s\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> age<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And here shows an interesting code: <code class=\"language-text\">age int</code>, yes, we can give return value a name.\nSo that we can assgin value to it &#x26; show what it is.</p>\n<h2>Structure</h2>\n<p>Use a real world example might be better. So here we create a type for user</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> User <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tName <span class=\"token builtin\">string</span>\n\tAge  <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So, maybe you already start to think OOP, but not, Go is not an OOP language, why? Let me show you.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">*</span>User<span class=\"token punctuation\">)</span> <span class=\"token function\">SetName</span><span class=\"token punctuation\">(</span>newName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tu<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> newName\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>u User<span class=\"token punctuation\">)</span> <span class=\"token function\">GetName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>Name\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is how we create <code class=\"language-text\">user.Method()</code> in Go. Focus on <code class=\"language-text\">receiver</code>(we call <code class=\"language-text\">u *User</code> this part receiver).\nIn <code class=\"language-text\">GetName</code>, if you try to modify <code class=\"language-text\">u.Name</code>, yes, it works, but won't affect the <code class=\"language-text\">Name</code> of the object you use to call <code class=\"language-text\">GetName</code>.</p>\n<p>Then why <code class=\"language-text\">SetName</code> can do that successful? Because it use <strong>pointer receiver</strong>! So now I can tell you, that is just a syntax sugar like:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">user_get_name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// In use</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">user</span> <span class=\"token operator\">*</span>u <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">user</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Danny\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">.</span>age  <span class=\"token operator\">=</span> <span class=\"token number\">21</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> <span class=\"token function\">user_get_name</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Collection</h2>\n<p>We all know Go do not have generic, but some times generic is useful, so that's why there has some built-in collection can work with\ndifferent type in Go.</p>\n<ul>\n<li>map</li>\n<li>array/slice</li>\n</ul>\n<p>The map would like:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">m <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"Danny\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"Ben\"</span><span class=\"token punctuation\">:</span>   <span class=\"token number\">40</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Format is <code class=\"language-text\">map[type]type</code>, you can pick any type at there.</p>\n<p>Array &#x26; Slice is very similar but different, and that is not my point so I won't talk about that.\nThe format is <code class=\"language-text\">[]type</code>, as map, you can change type part.</p>\n<h2>Interface</h2>\n<p>Interface is a very important part in Go. Because this model helps us work without inherit system like <code class=\"language-text\">Java</code> or <code class=\"language-text\">C++</code>.</p>\n<p>Interface looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Stringer <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We just left a function type at there. Wait, how to use it?\nNo worries, any types own a function <code class=\"language-text\">String() string</code> is type <code class=\"language-text\">Stringer</code>.</p>\n<p>That's how it works. So, we even can do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> UserDatas <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span> <span class=\"token comment\">// map of name to age</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>udatas UserDatas<span class=\"token punctuation\">)</span> <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Goroutine &#x26; Channel</h2>\n<p>In Go, we use goroutine &#x26; channel control our concurrency system.</p>\n<p>What is goroutine? goroutine is a routine running some task &#x26; be managed by Go runtime.\nHow to create one?</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hi\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We use keyword <code class=\"language-text\">go</code> with a function call to start one. Who destory it? Go runtime.\nSo that's why we don't need to worry about it's resource.</p>\n<p>But how we get the data after it complete the task?\nThat's why we have <strong>channel</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// main</span>\nresult <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i<span class=\"token operator\">:=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\tresult <span class=\"token operator\">&lt;-</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token comment\">// write into channel</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// range over channel</span>\n<span class=\"token keyword\">for</span> elem <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> result <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The flow like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">main\n | \\\n |  | for 0..9, result &lt;- i*2\n | / f1 done\n |\n | read from channel\n |\nmain done</code></pre></div>\n<p>The range over channel &#x26; write into channel is conceptly run at the same time.\nThis is how concurrency looks like in Go.</p>\n<h2>main</h2>\n<p>In Go, an executable required two things.</p>\n<ul>\n<li>In package <code class=\"language-text\">main</code></li>\n<li><code class=\"language-text\">func main()</code></li>\n</ul>\n<p>The simplest file is:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>package</h2>\n<p>Finally, we talk about package.\nIn Go, package just some files in the same directory with the same package name.\nThen we use environment variable <code class=\"language-text\">GOPATH</code> to search it.</p>\n<p>So how import looks like?</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/dannypsnl/rocket\"</span></code></pre></div>\n<p>At here, we import the package under <code class=\"language-text\">$GOPATH/src/github.com/dannypsnl/rocket</code>.\nOf course, we don't have one at there, so now we can execute a command:\n<code class=\"language-text\">go get ./...</code>.\nThe command will trying to solve dependency we need. So it will download <code class=\"language-text\">github.com/dannypsnl/rocket</code> into your $GOPATH</p>\n<p>This is the quick start of Go. Thanks for reading, byebye.</p>","frontmatter":{"title":"Go quick start","categories":["cs"],"tags":["golang"]}}},"pageContext":{"slug":"/blog09/23/cs/golang-quick-start/"}}}