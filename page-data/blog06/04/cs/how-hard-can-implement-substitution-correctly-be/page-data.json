{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog06/04/cs/how-hard-can-implement-substitution-correctly-be/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>lambda calculus 有所謂的 substitution，具體來說就是 <code class=\"language-text\">((lambda (x) x) y)</code> 會變成 <code class=\"language-text\">y</code>，但正確實作這個行為到底有多麻煩呢?為什麼我寫這篇廢文: 因為我寫錯了...</p>\n<p>一切都由簡單的 macro 開始搞，<code class=\"language-text\">utlc</code> 的目標是簡化 term:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">utlc</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,x</span><span class=\"token punctuation\">)</span> ,m<span class=\"token punctuation\">)</span>\n     `<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,x</span><span class=\"token punctuation\">)</span> ,m<span class=\"token punctuation\">)</span>]\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">,f</span> ,a<span class=\"token punctuation\">)</span>\n     `<span class=\"token punctuation\">(</span><span class=\"token function\">,f</span> ,a<span class=\"token punctuation\">)</span>]\n    [`,e `,e]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我們什麼都沒做，只是單純把拿到的東西都傳回去，接著來思考一下簡化要做什麼，對 <code class=\"language-text\">λ</code> 和 application 而言，分別是最小化 body 和執行 substitution(如果可以):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">utlc</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,x</span><span class=\"token punctuation\">)</span> ,m<span class=\"token punctuation\">)</span>\n     `<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,x</span><span class=\"token punctuation\">)</span> ,<span class=\"token punctuation\">(</span><span class=\"token function\">utlc</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">,f</span> ,a<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span><span class=\"token function\">utlc</span> f<span class=\"token punctuation\">)</span>\n       [`<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,x</span><span class=\"token punctuation\">)</span> ,m<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">utlc</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> m x a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n       [f1\n        `<span class=\"token punctuation\">(</span><span class=\"token function\">,f1</span> ,a<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>]\n    [`,e `,e]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>接著就必須寫 substitution(<code class=\"language-text\">subst</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> t x s<span class=\"token punctuation\">)</span>\n  t<span class=\"token punctuation\">)</span></code></pre></div>\n<p>總之先什麼也不做，思考一下對 variable 來說 substitution 是什麼:</p>\n<p>substitute variable v: if v is x, return s, else return v，根據這些已經能寫出來了:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> t x s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`,e\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> `,e `,x<span class=\"token punctuation\">)</span>\n         s\n         e<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>那對 application 呢?就繼續下去而已:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> t x s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">,e1</span> ,e2<span class=\"token punctuation\">)</span>\n     `<span class=\"token punctuation\">(</span><span class=\"token function\">,</span><span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> e1 x s<span class=\"token punctuation\">)</span> ,<span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> e2 x s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n<span class=\"token comment\">; ...</span></code></pre></div>\n<p>lambda 就是問題的根源，先想想簡單的辦法: 對 lambda 而言，substitution 就是替換其 body:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> t x s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,i</span><span class=\"token punctuation\">)</span> ,b<span class=\"token punctuation\">)</span>\n     `<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,i</span><span class=\"token punctuation\">)</span>\n        ,<span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> b x s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n<span class=\"token comment\">; ...</span></code></pre></div>\n<p>想法基本正確，但不足以應付一個 edge case: <code class=\"language-text\">((λ (x) (λ (x) x)) y)</code>，目前的實作回傳: <code class=\"language-text\">(λ (x) y)</code>，但內層變數應該覆蓋外層，結果應該要是 <code class=\"language-text\">(λ (x) x)</code>。顯然需要檢查 lambda 的參數是不是跟要被替換的變數一樣:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> t x s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,i</span><span class=\"token punctuation\">)</span> ,b<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n       [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> `,i `,x<span class=\"token punctuation\">)</span> `,t]\n       [<span class=\"token boolean\">#t</span>\n        `<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,i</span><span class=\"token punctuation\">)</span>\n        ,<span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> b x s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>]\n<span class=\"token comment\">; ...</span></code></pre></div>\n<p>現在再試一次應該就可以會變成 <code class=\"language-text\">(λ (x) x)</code> 了。然而事情還沒完，執行一下這個 <code class=\"language-text\">((λ (y) (λ (x) (y x))) x)</code>，結果是: <code class=\"language-text\">(λ (x) (x x))</code>，但此 <code class=\"language-text\">x</code> 非彼 <code class=\"language-text\">x</code> 啊 www。所以對 lambda 而言還有一個檢查就是如果替換後的名稱跟參數一樣，就需要把 body 裡面的參數全都改名:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> t x s<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    [`<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,i</span><span class=\"token punctuation\">)</span> ,b<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n       [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> `,i `,x<span class=\"token punctuation\">)</span> `,t]\n       [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> `,i `,s<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> fi <span class=\"token punctuation\">(</span><span class=\"token function\">gensym</span> `,i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> fb <span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> b i fi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        `<span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">,fi</span><span class=\"token punctuation\">)</span> ,<span class=\"token punctuation\">(</span><span class=\"token function\">subst</span> fb x s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n<span class=\"token comment\">; ...</span></code></pre></div>\n<p>再執行看看就會變成 <code class=\"language-text\">(λ (x24403) (x x24403))</code> 之類的，因為 <code class=\"language-text\">gensym</code> 每次產出都不一定一樣，這樣就大功告成了。現在來思考為什麼只是換個名字會這麼困難，這是因為換名必須不造成語意改變，但 lambda 又沒有辦法限制內外層變數名稱，所以才需要這麼多檢查。想像一下任何一個常見的程式語言引入變數的方式都比 lambda calculus 更加的多，而每個都需要一個一個這樣檢查。我是覺得有點難啦xd，這就是為什麼需要 <a href=\"/blog/cs/de-bruijn-index/\">De Brujin index</a> 這樣的東西。其實只是想發點什麼但論文又還沒看完xd，那發一下實作的東西好了?</p>","frontmatter":{"title":"正確實作 substitution 有多難","categories":["cs"],"tags":["plt","utlc"]}}},"pageContext":{"slug":"/blog06/04/cs/how-hard-can-implement-substitution-correctly-be/"}}}