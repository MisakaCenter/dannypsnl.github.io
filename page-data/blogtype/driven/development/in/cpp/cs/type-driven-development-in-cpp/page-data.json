{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogtype/driven/development/in/cpp//cs/type-driven-development-in-cpp/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Let's start from some code. And seems will be only code in this article.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// Compile: clang++ main.cc</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Matrix</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We don't care how to implement at here</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  std<span class=\"token operator\">::</span>string <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Matrix\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token operator\">></span> Matrix<span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Matrix<span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> Matrix<span class=\"token operator\">&lt;</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Just help compile can run it.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Matrix<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Matrix<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// This line never pass, interesting part.</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Matrix<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Matrix<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, some code be there, why I want to talk about these code?\nFew weeks ago, I study <code class=\"language-text\">Idris</code> and it's core concept: Type-Driven-Development.\nBut what is TDD(T is Not test at here)?</p>\n<p>Matrix can show this concept clearly. Because we need some meta to make sure we are adding correctness Matrix together.\nWe don't want something like <code class=\"language-text\">[0 0] + [1 0 3]</code> can work, because Matrix can't be that.\nSo what will we do at first? Every programmer will check it(I thought, hope I am correct). And most of them will check it at: runtime. But runtime checking is danger. If I could, I always trying compile-time checking, because the chance that can be find out by editor is very big, almost 100%. But how to do that?</p>\n<p>In C++, template help we checking at compile-time.\nAnd almost no other language can template integer as template parameter. In Java, we have generic only. And a lot language only have generic too.\nBut maybe some people can't understand <code class=\"language-text\">Idris</code>, so let's use <code class=\"language-text\">C++</code>.</p>\n<p>The point is: when we need Matrix add. Only those Matrix with correct X, Y can add together.\nWith template check, second Add always can't pass compile.\nHope you already got the point of TDD.\nThat is define type for certain usage, you can get the help from Type System.\nIt can limit error into a narrow part.\nThanks for read.</p>","frontmatter":{"title":"Type driven development in C++","categories":["cs"],"tags":["cpp"]}}},"pageContext":{"slug":"/blogtype/driven/development/in/cpp//cs/type-driven-development-in-cpp/"}}}