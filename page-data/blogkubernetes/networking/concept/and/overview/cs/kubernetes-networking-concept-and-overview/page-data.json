{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogkubernetes/networking/concept/and/overview//cs/kubernetes-networking-concept-and-overview/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Kubernetes was built to run distributed systems on a cluster of nodes. Understanding the concept of kubernetes networking could help you correctly understanding how to run, monitor and trouble shooting your applications on kubernetes, even more you can know how to choosing the suitable distributed system for yourself by knowing how to comparing them well.</p>\n<p>To understand it's networking configuration, we have to start from container and how the operating system provides these resource isolations. We start from <code class=\"language-text\">network namespace</code> this concept of Linux, and create a mock environment for learning how it works as container does. Now, let's begin!</p>\n<h3>1 Network namespace</h3>\n<p>Before we start, my environment is <code class=\"language-text\">Ubuntu 18.04 LTS</code>, and here is the kernel information:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">uname</span> -a\nLinux test-linux <span class=\"token number\">4.15</span>.0-1032-gcp <span class=\"token comment\">#34-Ubuntu SMP Wed May 8 13:02:46 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre></div>\n<h4>1.1 Create new network namespace</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># create network namespace net0</span>\n$ <span class=\"token function\">ip</span> netns <span class=\"token function\">add</span> net0\n<span class=\"token comment\"># create network namespace net1</span>\n$ <span class=\"token function\">ip</span> netns <span class=\"token function\">add</span> net1\n<span class=\"token comment\"># then check</span>\n$ <span class=\"token function\">ip</span> netns list\nnet1\nnet0 <span class=\"token punctuation\">(</span>id: <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we have several network namespaces could emit process on it, but the process can't connect to other networks is meaningless. To solve this problem, we have to create a tunnel for them, in Linux, we can use <code class=\"language-text\">veth pair</code> to connect two namespaces directly.</p>\n<h4>1.2 Create veth pair</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># new veth pair</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">type</span> veth\n<span class=\"token comment\"># assign veth0 to net0</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> veth0 netns net0\n<span class=\"token comment\"># assign veth1 to net1</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> veth1 netns net1\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> veth0 up\n<span class=\"token comment\"># assign ip 10.0.1.2 to veth0, you can use `ip addr` to check it</span>\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ip</span> addr <span class=\"token function\">add</span> <span class=\"token number\">10.0</span>.1.2/24 dev veth0\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> veth1 up\n<span class=\"token comment\"># assign ip 10.0.1.3 to veth1</span>\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 <span class=\"token function\">ip</span> addr <span class=\"token function\">add</span> <span class=\"token number\">10.0</span>.1.3/24 dev veth1</code></pre></div>\n<blockquote>\n<p>NOTE: An important thing is <code class=\"language-text\">veth pair</code> can't exist alone if you remove one, another would be removed.</p>\n</blockquote>\n<p>Now, <code class=\"language-text\">ping</code> the network namespace <code class=\"language-text\">net1</code> from <code class=\"language-text\">net0</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ping</span> <span class=\"token number\">10.0</span>.1.3 -c <span class=\"token number\">3</span></code></pre></div>\n<p><code class=\"language-text\">tcpdump</code> from target network namespace, of course, you should run <code class=\"language-text\">tcpdump</code> before you <code class=\"language-text\">ping</code> it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 tcpdump -v -n -i veth1\ntcpdump: listening on veth1, link-type EN10MB <span class=\"token punctuation\">(</span>Ethernet<span class=\"token punctuation\">)</span>, capture size <span class=\"token number\">262144</span> bytes\n<span class=\"token number\">13</span>:54:11.800223 IP6 <span class=\"token punctuation\">(</span>hlim <span class=\"token number\">255</span>, next-header ICMPv6 <span class=\"token punctuation\">(</span><span class=\"token number\">58</span><span class=\"token punctuation\">)</span> payload length: <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> fe80::905d:ccff:fe4a:cd81 <span class=\"token operator\">></span> ff02::2: <span class=\"token punctuation\">[</span>icmp6 <span class=\"token function\">sum</span> ok<span class=\"token punctuation\">]</span> ICMP6, router solicitation, length <span class=\"token number\">16</span>\n          <span class=\"token builtin class-name\">source</span> link-address option <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>: <span class=\"token number\">92</span>:5d:cc:4a:cd:81\n<span class=\"token number\">13</span>:54:12.400440 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">45855</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>DF<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.2 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.3: ICMP <span class=\"token builtin class-name\">echo</span> request, <span class=\"token function\">id</span> <span class=\"token number\">1433</span>, <span class=\"token function\">seq</span> <span class=\"token number\">1</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">13</span>:54:12.400464 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">41348</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>none<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.3 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.2: ICMP <span class=\"token builtin class-name\">echo</span> reply, <span class=\"token function\">id</span> <span class=\"token number\">1433</span>, <span class=\"token function\">seq</span> <span class=\"token number\">1</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">13</span>:54:13.464163 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">45912</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>DF<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.2 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.3: ICMP <span class=\"token builtin class-name\">echo</span> request, <span class=\"token function\">id</span> <span class=\"token number\">1433</span>, <span class=\"token function\">seq</span> <span class=\"token number\">2</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">13</span>:54:13.464189 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">41712</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>none<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.3 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.2: ICMP <span class=\"token builtin class-name\">echo</span> reply, <span class=\"token function\">id</span> <span class=\"token number\">1433</span>, <span class=\"token function\">seq</span> <span class=\"token number\">2</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">13</span>:54:14.488184 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">46671</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>DF<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.2 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.3: ICMP <span class=\"token builtin class-name\">echo</span> request, <span class=\"token function\">id</span> <span class=\"token number\">1433</span>, <span class=\"token function\">seq</span> <span class=\"token number\">3</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">13</span>:54:14.488221 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">41738</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>none<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.3 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.2: ICMP <span class=\"token builtin class-name\">echo</span> reply, <span class=\"token function\">id</span> <span class=\"token number\">1433</span>, <span class=\"token function\">seq</span> <span class=\"token number\">3</span>, length <span class=\"token number\">64</span></code></pre></div>\n<p><strong>HTTP</strong> can work also.</p>\n<p><strong>HTTP</strong> server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 python3 -m http.server\nServing HTTP on <span class=\"token number\">0.0</span>.0.0 port <span class=\"token number\">8000</span> <span class=\"token punctuation\">..</span>.\n<span class=\"token comment\"># After you execute the following command here would show</span>\n<span class=\"token number\">10.0</span>.1.2 - - <span class=\"token punctuation\">[</span><span class=\"token number\">15</span>/May/2019 <span class=\"token number\">13</span>:55:41<span class=\"token punctuation\">]</span> <span class=\"token string\">\"GET / HTTP/1.1\"</span> <span class=\"token number\">200</span> -</code></pre></div>\n<p><strong>HTTP</strong> client:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">curl</span> <span class=\"token number\">10.0</span>.1.3:8000\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>DOCTYPE HTML PUBLIC <span class=\"token string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"token string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>meta http-equiv<span class=\"token operator\">=</span><span class=\"token string\">\"Content-Type\"</span> <span class=\"token assign-left variable\">content</span><span class=\"token operator\">=</span><span class=\"token string\">\"text/html; charset=utf-8\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Directory listing <span class=\"token keyword\">for</span> /<span class=\"token operator\">&lt;</span>/title<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>Directory listing <span class=\"token keyword\">for</span> /<span class=\"token operator\">&lt;</span>/h<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>\n<span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".bash_history\"</span><span class=\"token operator\">></span>.bash_history<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".bash_logout\"</span><span class=\"token operator\">></span>.bash_logout<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".bashrc\"</span><span class=\"token operator\">></span>.bashrc<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".config/\"</span><span class=\"token operator\">></span>.config/<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".docker/\"</span><span class=\"token operator\">></span>.docker/<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".profile\"</span><span class=\"token operator\">></span>.profile<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\".theia/\"</span><span class=\"token operator\">></span>.theia/<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"README-cloudshell.txt\"</span><span class=\"token operator\">></span>README-cloudshell.txt@<span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/ul<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>hr<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>/html<span class=\"token operator\">></span></code></pre></div>\n<p>Although <code class=\"language-text\">veth pair</code> could help you connect two network namespaces, however, it can't work with more. While we are working on an environment with more than two network namespaces, we would need a more powerful technology: Bridge.</p>\n<h4>1.3 Create a virtual bridge</h4>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># create bridge</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token function\">add</span> br0 <span class=\"token builtin class-name\">type</span> bridge\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev br0 up\n<span class=\"token comment\"># create veth pair for net0, veth0 &amp; veth1</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">type</span> veth\n<span class=\"token comment\"># create veth pair for net1, veth2 &amp; veth3</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">type</span> veth\n<span class=\"token comment\"># set up veth pair of net0</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth0 netns net0\n<span class=\"token comment\"># You would find veth0 disappeared now by `ip link`</span>\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth0 name eth0\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ip</span> addr <span class=\"token function\">add</span> <span class=\"token number\">10.0</span>.1.2/24 dev eth0\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev eth0 up\n<span class=\"token comment\"># bind veth pair of net0 to br0</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth1 master br0\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth1 up\n<span class=\"token comment\"># set up veth pair of net1</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth2 netns net1\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth2 name eth0\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 <span class=\"token function\">ip</span> addr <span class=\"token function\">add</span> <span class=\"token number\">10.0</span>.1.3/24 dev eth0\n$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net1 <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev eth0 up\n<span class=\"token comment\"># bind veth pair of net1 to br0</span>\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth3 master br0\n$ <span class=\"token function\">ip</span> <span class=\"token function\">link</span> <span class=\"token builtin class-name\">set</span> dev veth3 up</code></pre></div>\n<p>Now, ping <code class=\"language-text\">10.0.1.3</code> from <code class=\"language-text\">net0</code> to check our bridge network.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ip</span> netns <span class=\"token builtin class-name\">exec</span> net0 <span class=\"token function\">ping</span> <span class=\"token number\">10.0</span>.1.3 -c <span class=\"token number\">3</span>\nPING <span class=\"token number\">10.0</span>.1.3 <span class=\"token punctuation\">(</span><span class=\"token number\">10.0</span>.1.3<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.\n<span class=\"token number\">64</span> bytes from <span class=\"token number\">10.0</span>.1.3: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.030</span> ms\n<span class=\"token number\">64</span> bytes from <span class=\"token number\">10.0</span>.1.3: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">2</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.059</span> ms\n<span class=\"token number\">64</span> bytes from <span class=\"token number\">10.0</span>.1.3: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">3</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">64</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.051</span> ms\n\n--- <span class=\"token number\">10.0</span>.1.3 <span class=\"token function\">ping</span> statistics ---\n<span class=\"token number\">3</span> packets transmitted, <span class=\"token number\">3</span> received, <span class=\"token number\">0</span>% packet loss, <span class=\"token function\">time</span> 2038ms\nrtt min/avg/max/mdev <span class=\"token operator\">=</span> <span class=\"token number\">0.030</span>/0.046/0.059/0.014 ms</code></pre></div>\n<p><code class=\"language-text\">tcpdump</code> our bridge: <code class=\"language-text\">br0</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ tcpdump -v -n -i br0\ntcpdump: listening on br0, link-type EN10MB <span class=\"token punctuation\">(</span>Ethernet<span class=\"token punctuation\">)</span>, capture size <span class=\"token number\">262144</span> bytes\n<span class=\"token number\">12</span>:43:39.619458 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">63269</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>DF<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.2 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.3: ICMP <span class=\"token builtin class-name\">echo</span> request, <span class=\"token function\">id</span> <span class=\"token number\">3046</span>, <span class=\"token function\">seq</span> <span class=\"token number\">1</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">12</span>:43:39.619553 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">54235</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>none<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.3 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.2: ICMP <span class=\"token builtin class-name\">echo</span> reply, <span class=\"token function\">id</span> <span class=\"token number\">3046</span>, <span class=\"token function\">seq</span> <span class=\"token number\">1</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">12</span>:43:40.635730 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">63459</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>DF<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.2 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.3: ICMP <span class=\"token builtin class-name\">echo</span> request, <span class=\"token function\">id</span> <span class=\"token number\">3046</span>, <span class=\"token function\">seq</span> <span class=\"token number\">2</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">12</span>:43:40.635764 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">54318</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>none<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.3 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.2: ICMP <span class=\"token builtin class-name\">echo</span> reply, <span class=\"token function\">id</span> <span class=\"token number\">3046</span>, <span class=\"token function\">seq</span> <span class=\"token number\">2</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">12</span>:43:41.659714 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">63548</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>DF<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.2 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.3: ICMP <span class=\"token builtin class-name\">echo</span> request, <span class=\"token function\">id</span> <span class=\"token number\">3046</span>, <span class=\"token function\">seq</span> <span class=\"token number\">3</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">12</span>:43:41.659742 IP <span class=\"token punctuation\">(</span>tos 0x0, ttl <span class=\"token number\">64</span>, <span class=\"token function\">id</span> <span class=\"token number\">54462</span>, offset <span class=\"token number\">0</span>, flags <span class=\"token punctuation\">[</span>none<span class=\"token punctuation\">]</span>, proto ICMP <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>, length <span class=\"token number\">84</span><span class=\"token punctuation\">)</span>\n    <span class=\"token number\">10.0</span>.1.3 <span class=\"token operator\">></span> <span class=\"token number\">10.0</span>.1.2: ICMP <span class=\"token builtin class-name\">echo</span> reply, <span class=\"token function\">id</span> <span class=\"token number\">3046</span>, <span class=\"token function\">seq</span> <span class=\"token number\">3</span>, length <span class=\"token number\">64</span>\n<span class=\"token number\">12</span>:43:44.859619 ARP, Ethernet <span class=\"token punctuation\">(</span>len <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>, IPv4 <span class=\"token punctuation\">(</span>len <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, Request who-has <span class=\"token number\">10.0</span>.1.2 tell <span class=\"token number\">10.0</span>.1.3, length <span class=\"token number\">28</span>\n<span class=\"token number\">12</span>:43:44.859638 ARP, Ethernet <span class=\"token punctuation\">(</span>len <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>, IPv4 <span class=\"token punctuation\">(</span>len <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, Request who-has <span class=\"token number\">10.0</span>.1.3 tell <span class=\"token number\">10.0</span>.1.2, length <span class=\"token number\">28</span>\n<span class=\"token number\">12</span>:43:44.859686 ARP, Ethernet <span class=\"token punctuation\">(</span>len <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>, IPv4 <span class=\"token punctuation\">(</span>len <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, Reply <span class=\"token number\">10.0</span>.1.2 is-at 0a:e0:a1:07:b7:c9, length <span class=\"token number\">28</span>\n<span class=\"token number\">12</span>:43:44.859689 ARP, Ethernet <span class=\"token punctuation\">(</span>len <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>, IPv4 <span class=\"token punctuation\">(</span>len <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, Reply <span class=\"token number\">10.0</span>.1.3 is-at d2:b6:de:2f:4e:f6, length <span class=\"token number\">28</span></code></pre></div>\n<p>As you thought, <code class=\"language-text\">br0</code> would get the traffic from <code class=\"language-text\">net0</code> to <code class=\"language-text\">net1</code>, now we have topology looks like:</p>\n<h5>Figure 1.1</h5>\n<p><img src=\"/static/bridge_mode_and_namespace-0fb13c1a95dddcb3a53c2ab3a9f4ca4a.svg\"></p>\n<p>At the final of the output of <code class=\"language-text\">tcpdump</code> we can see some ARP request/reply, we would talk about it in the next section.</p>\n<p>To get more info:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Linux_namespaces\">wiki: linux namespace</a></li>\n</ul>\n<h3>2 ARP</h3>\n<p>ARP(Address Resolution Protocol) is a communication protocol used for discovering the link layer address, such as a MAC address associated with a given internet layer address.</p>\n<blockquote>\n<p>NOTE: In IPv6(Internet Protocol Version 6), the functionality of ARP provided by NDP(Neighbor Discovery Protocol).</p>\n</blockquote>\n<p>We aren't going to show the whole packet layout of ARP, but mention the part we care in the case.</p>\n<p>The working process is:</p>\n<ol>\n<li>send ARP request packet with source MAC and source IP and target IP to broadcast address</li>\n<li>the machine thought it has this target IP would send ARP reply packet contains it's MAC address</li>\n<li>the machine sends ARP request would cache the mapping of IP and MAC into ARP cache, so next time it doesn't have to send ARP request again.</li>\n</ol>\n<blockquote>\n<p>NOTE: others endpoint would ignore non-interested ARP request</p>\n</blockquote>\n<h5>Figure 2.1</h5>\n<p><img src=\"/static/arp_request_and_reply-075cc7b4321fc02f7afc99d7dbbd76c2.svg\"></p>\n<p>At the previous section, we can see both sides send ARP request to get another IP's information.</p>\n<p>To get more info:</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc826\">RFC 826</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Address_Resolution_Protocol\">wiki: ARP</a></li>\n</ul>\n<h3>3 Pod to Pod</h3>\n<p><strong>Pod</strong> is the unit of kubernetes, so the most basic networking is how to connect from PodA to PodB.\nWe would get two situation:</p>\n<ol>\n<li>two <strong>Pod</strong> at the same <strong>Node</strong></li>\n<li>two <strong>Pod</strong> at the different <strong>Node</strong></li>\n</ol>\n<blockquote>\n<p><strong>Node</strong> can is a VM or machine which owned by kubernetes cluster.</p>\n</blockquote>\n<p>In the following discussion we are all based on <a href=\"https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#kubenet\">Kubenet</a>\nthis implementation. <strong>Kubelet</strong> would need to set <code class=\"language-text\">--network-plugin=kubenet</code>.</p>\n<h4>3.1 Pods at the same Node</h4>\n<p>In this case, it just as the first section, Pods would connect to the same bridge, in case called: <code class=\"language-text\">cbr0</code>.</p>\n<blockquote>\n<p>Kubenet creates a Linux bridge named <code class=\"language-text\">cbr0</code> and creates a veth pair for each pod with the host end of each pair connected to <code class=\"language-text\">cbr0</code>.</p>\n</blockquote>\n<p>Since we already talk about this way, we don't spend more time at here, the interesting part is,\nhow to allow Pods on</p>\n<h5>Figure 3.1 two pods at the same node</h5>\n<p><img src=\"/static/pod_to_pod_at_the_same_node-4a4fc63a9d14ce7f94079e396abc226c.svg\"></p>\n<h4>3.2 Pods at the different Node</h4>\n<p>When container networking have to work with other host of container, the problem would show.\nAt the tranditional environment we do not care the cluster consist of serveral host of container.\nIn old networking model we thought any container have to connect to outside world must using a host port to do that.\nBut in cluster world, port is a limited resource which would cause we can't scale the cluster well!\nThat's why we have <a href=\"https://github.com/docker/libnetwork/blob/master/docs/design.md\">CNM</a> and <a href=\"https://github.com/containernetworking/cni/blob/master/SPEC.md\">CNI</a> these models.\nWe aren't going to discuss their detail, but mention the possible approach of real world networking topology.</p>\n<p>Two <strong>Pod</strong> at the different <strong>Node</strong> won't be able to using the same bridge, which means we can't directly let packet pass through between them.</p>\n<h5>Figure 3.2 concept of nodes</h5>\n<p><img src=\"/static/concept_of_nodes-f508bc4ba5c6ebb0f7c921a30de61d5a.svg\"></p>\n<p>The whole packet flow would like:</p>\n<ol>\n<li>PodA send ARP</li>\n<li>ARP will fail, then Bridge <code class=\"language-text\">cbr0</code> would send the packet out the default route: <code class=\"language-text\">eth0</code> of host</li>\n<li>routing send the packet to <strong>default gateway</strong></li>\n<li><strong>default gateway</strong> send packet to correct host via CIDR, e.g. <code class=\"language-text\">10.0.2.101</code> to <code class=\"language-text\">10.10.0.3</code></li>\n<li>the VM owned PodB CIDR would judge this packet should send to itself <code class=\"language-text\">cbr0</code></li>\n<li><code class=\"language-text\">cbr0</code> send the packet to PodB finally</li>\n</ol>\n<h5>Firgure 3.3 CIDR nodes with default gateway</h5>\n<p><img src=\"/static/pod_to_pod_at_different_node_via_default_gateway-60f5dd234375d4ce27b71baa11dd519e.svg\"></p>\n<h3>4 Pod to Service</h3>\n<p>We show how to route traffic between <strong>Pods</strong> and their IP addresses. The model works good until we have to scale the <strong>Pod</strong>. To make <strong>Kubernetes</strong> be a great system, we need to have the ability to add/delete resource automatically, which is the main feature of <strong>Kubernetes</strong>, now problem comes, because we could remove the <strong>Pod</strong>, we couldn't trust it's IP, since the new <strong>Pod</strong> won't get the same IP mostly.</p>\n<p>To solve the problem, <strong>Kubernetes</strong> provide an abstraction called <strong>Service</strong>. A <strong>Service</strong> would be a group of selector and a group of port mapping with a cluster IP, which means it would select <strong>Pods</strong> as it's backend by selector and to loadbalancing for them and forward packets by port mappings. So whatever how <strong>Pods</strong> been created or deleted, <strong>Service</strong> would find those <strong>Pods</strong> with labels matched selectors, and we only have to know the IP of <strong>Service</strong> than know all IPs of <strong>Pods</strong>.</p>\n<p>Now, let's take a look at how it works.</p>\n<h4>4.1 iptables and netfilter</h4>\n<p><strong>Kubernetes</strong> relies on <code class=\"language-text\">netfilter</code> -- the networking framework bulit-in to <strong>Linux</strong>.</p>\n<p>To get more info about <code class=\"language-text\">netfilter</code> please take a look at:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Netfilter\">wiki: netfilter</a></li>\n<li><a href=\"https://www.netfilter.org/\">netfilter project</a></li>\n</ul>\n<p><code class=\"language-text\">iptables</code> is one of userspace tools based on the <code class=\"language-text\">netfilter</code> providing a table-based system for defining rules for manipulating and transforming packets. In <strong>Kubernetes</strong>, <code class=\"language-text\">kube-proxy</code> controller would config <code class=\"language-text\">iptables</code> rules by watching the changes from API server. The rule monitoring the traffic to the cluster IP of <strong>Service</strong> and picking a IP from IPs of <strong>Pods</strong> then forwarding the traffic to the picked IP by updating the destination IP from the cluster IP to the picked IP. This rule would be updated by cluster IP changed, <strong>Pod</strong> ADDED, <strong>Pod</strong> DELETED. Which means loadbalancing already been done on the machine to take traffic directed to cluster IP to an actual IP of <strong>Pod</strong>.</p>\n<h5>Figure 4.1 Pod to Service topology</h5>\n<p><img src=\"/static/pod_to_service-ddedbdf84b8f048c436867fcb77fe7ce.svg\"></p>\n<p>After the destination IP be updated, the networking model would fall back to the <strong>Pod to Pod</strong> model.</p>\n<p>You can get more details of <code class=\"language-text\">iptables</code> via:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Iptables\">wiki: iptables</a></li>\n<li><a href=\"https://linux.die.net/man/8/iptables\">man: iptables</a></li>\n</ul>\n<h4>4.2 loadbalancing</h4>\n<p>Now I would create some <code class=\"language-text\">iptables</code> rules to mock a <strong>Service</strong> for static IPs. Assuming we have three IPs are: <code class=\"language-text\">10.244.1.2</code>, <code class=\"language-text\">10.244.1.3</code>, <code class=\"language-text\">10.244.1.4</code> and a cluster IP: <code class=\"language-text\">10.0.0.2</code></p>\n<h5>Add one IP after the cluster IP</h5>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ iptables <span class=\"token punctuation\">\\</span>\n  -t nat <span class=\"token comment\"># nat table</span>\n  -A PREROUTING <span class=\"token comment\"># Append to PREROUTING chain</span>\n  -p tcp <span class=\"token comment\"># protocol TCP</span>\n  -d <span class=\"token number\">10.0</span>.0.2 <span class=\"token comment\"># only for the packet to 10.0.0.2</span>\n  --dport <span class=\"token number\">80</span> <span class=\"token comment\"># only for port 80</span>\n  -j DNAT <span class=\"token comment\"># DNAT target</span>\n  --to-destination <span class=\"token number\">10.244</span>.1.2:8080 <span class=\"token comment\"># change destination to 10.244.1.2:8080</span></code></pre></div>\n<p>Unfortunately, we can't just apply this command on to each IPs we want to loadbalance, because the first rule would take all the jobs from others(but our work won't be, damn). That's why <code class=\"language-text\">iptables</code> provides a module called <code class=\"language-text\">statistic</code> can work with two different modes:</p>\n<ul>\n<li><code class=\"language-text\">random</code>: probability</li>\n<li><code class=\"language-text\">nth</code>: round robin algorithm</li>\n</ul>\n<blockquote>\n<p>Note: loadbalancing only works during the connection phase of the TCP protocol. Once the connection has been established, the connection would be routed to the same server.</p>\n</blockquote>\n<p>We only introduce round robin here, since it's quite easy to understand and we want to talk about loadbalancing than how loadbalancing works.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLUSTER_IP</span><span class=\"token operator\">=</span><span class=\"token number\">10.0</span>.0.2\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SERVICE_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">80</span>\n$ iptables <span class=\"token punctuation\">\\</span>\n  -A PREROUTING <span class=\"token punctuation\">\\</span>\n  -p tcp <span class=\"token punctuation\">\\</span>\n  -t nat -d <span class=\"token variable\">$CLUSTER_IP</span> <span class=\"token punctuation\">\\</span>\n  --dport <span class=\"token variable\">$SERVICE_PORT</span> <span class=\"token punctuation\">\\</span>\n  -m statistic --mode nth <span class=\"token punctuation\">\\</span>\n  --every <span class=\"token number\">3</span> --packet <span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span>\n  -j DNAT <span class=\"token punctuation\">\\</span>\n  --to-destination <span class=\"token number\">10.244</span>.1.2:8080\n\n$ iptables <span class=\"token punctuation\">\\</span>\n  -A PREROUTING <span class=\"token punctuation\">\\</span>\n  -p tcp <span class=\"token punctuation\">\\</span>\n  -t nat -d <span class=\"token variable\">$CLUSTER_IP</span> <span class=\"token punctuation\">\\</span>\n  --dport <span class=\"token variable\">$SERVICE_PORT</span> <span class=\"token punctuation\">\\</span>\n  -m statistic --mode nth <span class=\"token punctuation\">\\</span>\n  --every <span class=\"token number\">2</span> --packet <span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span>\n  -j DNAT <span class=\"token punctuation\">\\</span>\n  --to-destination <span class=\"token number\">10.244</span>.1.3:8080\n\n$ iptables <span class=\"token punctuation\">\\</span>\n  -A PREROUTING <span class=\"token punctuation\">\\</span>\n  -p tcp <span class=\"token punctuation\">\\</span>\n  -t nat -d <span class=\"token variable\">$CLUSTER_IP</span> <span class=\"token punctuation\">\\</span>\n  --dport <span class=\"token variable\">$SERVICE_PORT</span> <span class=\"token punctuation\">\\</span>\n  -j DNAT <span class=\"token punctuation\">\\</span>\n  --to-destination <span class=\"token number\">10.244</span>.1.4:8080</code></pre></div>\n<p>Now we would have a problem, we send the packet to cluster IP to the <strong>Pod</strong> directly, but since the source IP is the client <strong>Pod</strong> IP, target <strong>Pod</strong> would send reply back to the client <strong>Pod</strong> would wrong source IP(not cluster IP). Let's simplify these words:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># request send\npodA -&gt; clusterIP\n# After iptables\npodA -&gt; podB\n# reply send\npodB -&gt; podA</code></pre></div>\n<p>We can find that connection would be dropped because the destination IP is not what <code class=\"language-text\">podA</code> expected!</p>\n<p>So we also have to change the source IP for reply packet:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ iptables <span class=\"token punctuation\">\\</span>\n  -t nat <span class=\"token punctuation\">\\</span>\n  -A POSTROUTING <span class=\"token punctuation\">\\</span>\n  -p tcp <span class=\"token punctuation\">\\</span>\n  -s <span class=\"token number\">10.244</span>.1.2 <span class=\"token punctuation\">\\</span>\n  --sport <span class=\"token number\">8080</span> <span class=\"token punctuation\">\\</span>\n  -j SNAT <span class=\"token punctuation\">\\</span>\n  --to-source <span class=\"token number\">10.0</span>.0.2:80</code></pre></div>\n<p>Now you finally get a complete connection.</p>\n<p>To get more info about loadbalacing &#x26; NAT(network address translation):</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Network_address_translation#DNAT\">wiki: DNAT</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Network_address_translation#SNAT\">wiki: SNAT</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Round-robin_scheduling\">wiki: round robin</a></li>\n</ul>\n<h3>5 Internet to Service</h3>\n<h4>5.1 Egress</h4>\n<p>Egress is the traffic from Pod to internet, consider a packet from Pod to any external service.\ne.g. <code class=\"language-text\">10.244.1.10 -&gt; 8.8.8.8</code></p>\n<p>However, the thing is not so easy since that <code class=\"language-text\">8.8.8.8</code> has no idea who is <code class=\"language-text\">10.244.1.10</code>, because they are not in the same network. So anyway we would need a global IP, it calls masquerading. Now assuming we have an IP <code class=\"language-text\">219.140.7.218</code>, our target is changing <code class=\"language-text\">10.244.1.10</code> to <code class=\"language-text\">219.140.7.218</code> before it reach <code class=\"language-text\">8.8.8.8</code>. And then when <code class=\"language-text\">8.8.8.8</code> send reply packets, we would change <code class=\"language-text\">219.140.7.218</code> to <code class=\"language-text\">10.244.1.10</code> to complete the whole connection.</p>\n<p>But we have another problem here, what if we have several Pods such outgoing request? How to know which Pod should get the reply packet? A simple way(not going to introduce all NAT way) is allocate a port to each connection, so every Pod outgoing request would get a port, for example: <code class=\"language-text\">10.244.1.10:8080 -&gt; 8.8.8.8:53</code> would be rewrote as <code class=\"language-text\">219.140.7.218:61234</code>, so <code class=\"language-text\">8.8.8.8</code> would send reply to <code class=\"language-text\">219.140.7.218:61234</code>. If at the same time <code class=\"language-text\">10.244.1.11:8080 -&gt; 8.8.8.8:53</code> rewrite as <code class=\"language-text\">219.140.7.218:61235 -&gt; 8.8.8.8:53</code> got reply packet, the packet would send to <code class=\"language-text\">61235</code>, so we can rewrite the packet correct back to <code class=\"language-text\">10.244.1.10</code> and <code class=\"language-text\">10.244.1.11</code>.</p>\n<h4>5.2 Ingress</h4>\n<h5>5.2.1 Load balancer</h5>\n<p>Load balancer is quite easy to understand since it just provide an IP for your service, and do totally the same thing as internal service IP rewritting then send to correct Pod.</p>\n<h5>5.2.2 Ingress controller</h5>\n<p>Ingress controller is an application layer load balancer.</p>\n<p>Example(see <a href=\"https://github.com/dannypsnl/k8s-test-deploys/tree/master/ingress\">https://github.com/dannypsnl/k8s-test-deploys/tree/master/ingress</a> to get full example):</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> extensions/v1beta1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>world<span class=\"token punctuation\">-</span>ingress\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">kubernetes.io/ingress.class</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/ssl-redirect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span>\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/rewrite-target</span><span class=\"token punctuation\">:</span> /\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /hello\n            <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">-</span>svc\n              <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /world\n            <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">serviceName</span><span class=\"token punctuation\">:</span> world<span class=\"token punctuation\">-</span>svc\n              <span class=\"token key atrule\">servicePort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span></code></pre></div>\n<p>See example yaml can find that we define <code class=\"language-text\">http.path</code>: <code class=\"language-text\">/hello</code> and <code class=\"language-text\">/world</code>, basically ingress controller would handle the root path <code class=\"language-text\">/</code> of http request, and send packet to <strong>hello-svc</strong> when path has prefix <code class=\"language-text\">/hello</code>, and send packet to <strong>world-svc</strong> when path has prefix <code class=\"language-text\">/world</code>(ideally, ingress-nginx do pod selection inside of their code, at least v0.20.0 still acting like that).</p>","frontmatter":{"title":"Kubernetes Networking: concept and overview from underlying perspective","categories":["cs"],"tags":["networking","kubernetes","linux"]}}},"pageContext":{"slug":"/blogkubernetes/networking/concept/and/overview//cs/kubernetes-networking-concept-and-overview/"}}}