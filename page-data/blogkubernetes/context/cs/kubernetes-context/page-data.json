{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogkubernetes/context//cs/kubernetes-context/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<h2>Before you beginning</h2>\n<p>You should already install <code class=\"language-text\">kubectl</code> this command line tool.\nAnd knowing what is Kubernetes.\nKnowing why we need to separate the environment for the different member.</p>\n<h2>Config for demo</h2>\n<p>At first, we need to prepare a configuration that can help us learning operations of context.\nNow, create a file called <code class=\"language-text\">config_demo</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">touch</span> config_demo</code></pre></div>\n<p>Next, copy these contents into <code class=\"language-text\">config_demo</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Config\n\n<span class=\"token key atrule\">contexts</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend</code></pre></div>\n<p>In our assuming, we have two kinds of developers, frontend &#x26; backend.</p>\n<p>Now, type <code class=\"language-text\">kubectl --kubeconfig config_demo config get-contexts</code>\nOutput:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl --kubeconfig config_demo config get-contexts\nCURRENT   NAME       CLUSTER   AUTHINFO   NAMESPACE\n          backend\n          frontend</code></pre></div>\n<p>See, we have two contexts now. Let's get into the next step.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl --kubeconfig config_demo config use-context backend\nSwitched to context <span class=\"token string\">\"backend\"</span><span class=\"token builtin class-name\">.</span></code></pre></div>\n<p>This command, obviously, change our context to <code class=\"language-text\">backend</code> now. But how do we checking this fact at other times? Here we go!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl --kubeconfig config_demo config current-context\nbackend</code></pre></div>\n<p>Ok, now we already know some basic operations of <code class=\"language-text\">kubectl config</code> this command, let's see the current content of your config file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">clusters</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token key atrule\">contexts</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend\n<span class=\"token key atrule\">current-context</span><span class=\"token punctuation\">:</span> backend\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Config\n<span class=\"token key atrule\">preferences</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>We got some new thing into it, but basically, the most important part is <code class=\"language-text\">current-context</code>, so now you know how <code class=\"language-text\">kubectl</code> store this info, then you know how to create this by modifying the config directly.</p>\n<p>Now, let's add some users to this config.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token comment\"># ignore</span>\n<span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend<span class=\"token punctuation\">-</span>developer\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>developer</code></pre></div>\n<p>Then add setting credentail for them</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl --kubeconfig config_demo config set-credentials backend-developer --username<span class=\"token operator\">=</span>danny --password<span class=\"token operator\">=</span>danny\nUser <span class=\"token string\">\"backend-developer\"</span> set.\n$ kubectl --kubeconfig config_demo config set-credentials frontend-developer --username<span class=\"token operator\">=</span>notme --password<span class=\"token operator\">=</span>notme\nUser <span class=\"token string\">\"frontend-developer\"</span> set.</code></pre></div>\n<p>Now let's see what's different in the config</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token comment\"># ignore</span>\n<span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>developer\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> danny\n      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> danny\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend<span class=\"token punctuation\">-</span>developer\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> notme\n      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> notme</code></pre></div>\n<p>p.s. Here, we use the basic auth, I won't suggest using this kind of auth in the real world and remember don't use the same value about username and password! I ever heard teacher use 1234 as a password when creating an example, and the student use 1234 even at work because used to do that, do make it happened to you!</p>\n<p>Let's go to the usage part, we would set up the user of the context</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl --kubeconfig config_demo config set-context frontend --namespace frontend --user frontend-developer\nContext <span class=\"token string\">\"frontend\"</span> modified.\n$ kubectl --kubeconfig config_demo config set-context backend --namespace backend --user backend-developer\nContext <span class=\"token string\">\"backend\"</span> modified.</code></pre></div>\n<p>Then see the change inside of the config</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token comment\"># ignore</span>\n<span class=\"token key atrule\">contexts</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> backend\n      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>developer\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n      <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> frontend\n      <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> frontend<span class=\"token punctuation\">-</span>developer\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> frontend</code></pre></div>\n<p>As you see, we didn't have a cluster so we can't do some operation, so now we would use the kubernetes for docker environment default cluster to do the following task. To do so, we have to add the cluster to the config</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token comment\"># ignore</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">context</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">cluster</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>for<span class=\"token punctuation\">-</span>desktop<span class=\"token punctuation\">-</span>cluster\n    <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> backend\n    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> backend<span class=\"token punctuation\">-</span>developer\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> backend</code></pre></div>\n<p>And also do this for <code class=\"language-text\">frontend</code>, remember we didn't create a cluster, so you have included <code class=\"language-text\">~/.kube/config</code> on your computer to get <code class=\"language-text\">docker-for-desktop-cluster</code></p>\n<p>Once you do this, any operation on the cluster would require auth information, example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">KUBECONFIG</span><span class=\"token operator\">=</span>~/.kube/config:config_demo kubectl get pod\nError from server <span class=\"token punctuation\">(</span>Forbidden<span class=\"token punctuation\">)</span>: pods is forbidden: User <span class=\"token string\">\"system:anonymous\"</span> cannot list pods <span class=\"token keyword\">in</span> the namespace <span class=\"token string\">\"backend\"</span></code></pre></div>\n<p>p.s. Just a small tip: <code class=\"language-text\">po</code> as <code class=\"language-text\">pod</code> as <code class=\"language-text\">pods</code> in the command line.</p>\n<p>How to login the user is another part so I won't spend time on it but I can provide some references so that you can learn from those documentations. <a href=\"https://kubernetes.io/docs/reference/access-authn-authz/authentication/\">https://kubernetes.io/docs/reference/access-authn-authz/authentication/</a></p>\n<h2>Practical</h2>\n<p>But what I said won't actually use in your job, unless you're kube-master or technical leader or somewhat anyway you have to operate these fundamental part in kubernetes. So here I would tell you how to use context correctly, that's set up <code class=\"language-text\">KUBECONFIG</code> this environment variable!</p>\n<p>In your <code class=\"language-text\">.bashrc</code>, <code class=\"language-text\">.zshrc</code> or anywhere, insert this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export KUBECONFIG=$KUBECONFIG:config1:config2:config3</code></pre></div>\n<p>Where are configs from? Usually, are copying from your cloud platform, for example: <strong>Azure</strong>, <strong>GCP</strong>, <strong>AWS</strong>.</p>\n<p>Anyway, this config already contains context information, so after you set up your <code class=\"language-text\">KUBECONFIG</code>, you can see a lot of context by <code class=\"language-text\">kubectl config get-contexts</code>, then what you need is just use them!</p>\n<p>Thanks for reading, see you next time.</p>","frontmatter":{"title":"Kubernetes context","categories":["cs"],"tags":["kubernetes"]}}},"pageContext":{"slug":"/blogkubernetes/context//cs/kubernetes-context/"}}}