{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/05/cs/hindley-milner-system-incremental-build-and-make-new-language/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Hindley-Milner (HM) type system is a classical type system for lambda calculus with parametric polymorphism. Its most notable property is it can infer most types of a given program, <strong>without type annotations</strong>! However, this feature sounds cool but not work well in practice XD, since people need annotation to hint ourselves when reading. I pick this system as a topic is because the HM type system probably is the easiest completeness system with parametric polymorphism. It's a good start for understanding other more complex type systems, and it's important for gradual typing. But before we dig too deep into those ideas, let's start to understand HM, the point of this article.</p>\n<h3>Why?</h3>\n<p>In earlier days Lisp didn't have a type system, as time pass, people start to want to(or need to) express program more precisely since cooperation and robustness. Then people start working for their needs. To express a <code class=\"language-text\">list</code>, introduce <strong>parametric polymorphism</strong>. <strong>parametric polymorphism</strong> sounds scared but doesn't, let's view an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> list-length <span class=\"token punctuation\">(</span><span class=\"token function\">All</span> <span class=\"token punctuation\">(</span><span class=\"token function\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> <span class=\"token punctuation\">(</span><span class=\"token function\">Listof</span> A<span class=\"token punctuation\">)</span> Integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This syntax bind <code class=\"language-text\">list-length</code> to a type <code class=\"language-text\">(All (A) (-&gt; (List A) Integer))</code>, or we would write <code class=\"language-text\">list-length : (All (A) (-&gt; (List A) Integer))</code>(you can see <strong>Racket</strong> use prefix operator, very Lisp style, not surprise XD). The syntax is not the most important thing, but it shows a very common thing in many different languages, to help you get what is <strong>parametric polymorphism</strong>. Now imagine, every time call <code class=\"language-text\">list-length</code>, must provide <code class=\"language-text\">A</code> as an argument: <code class=\"language-text\">(list-length Number lst)</code>. People would get tired and say: I hate the static type system, it seems no surprise. That's the reason for type inference. With type inference, if <code class=\"language-text\">lst : (Listof Number)</code>, <code class=\"language-text\">A</code> is <code class=\"language-text\">Number</code>, get type without type! The idea is so frustrating and makes people crazy to think about: Can we have a system, get all the type without type? The result is the HM type system.</p>\n<h4>Why Polymorphism</h4>\n<p>In <a href=\"/blog/cs/note-stlc/\">simply typed lambda calculus (STLC)</a>, asking <strong>e : T</strong> make sense because we already give <code class=\"language-text\">e</code> a type <code class=\"language-text\">K</code>, check <code class=\"language-text\">T</code> is <code class=\"language-text\">K</code> is all we need. All type in STLC is a <code class=\"language-text\">T</code> or <code class=\"language-text\">T -&gt; T</code> and <code class=\"language-text\">T</code> will not from another type. This feature, however, makes inconvenience when writing a program, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> id\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Identity function can work well with any type, but now we have to provide infinite versions for it:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> id-str <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> str str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> id-str <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> id-int <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> int int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> id-int <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> id-bool <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> bool bool<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> id-bool <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> id-int-to-int <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> int int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> int int<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> id-int-to-int <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If I don't want it and still want types, then use polymorphism is the solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> id <span class=\"token punctuation\">(</span><span class=\"token function\">All</span> <span class=\"token punctuation\">(</span><span class=\"token function\">A</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> A A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> id\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I hope I convince you that, take your time to understand its detail of this system is valuable :).</p>\n<h3>Setup a project</h3>\n<p>This section helps you get a project would be modified in the following part:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">raco pkg new hindley-milner\ncd hindley-milner\nraco pkg install --auto</code></pre></div>\n<h3>Syntax Overview</h3>\n<p>I would show a small enough language can cooperate with HM type system and big enough to convince you this is useful, detail would not be the point, put them at here is just want to help you keep going with the following content.</p>\n<ul>\n<li>Definition of language(create <code class=\"language-text\">lang.rkt</code>):</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang typed/racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> expr expr:int expr:bool expr:string expr:list expr:variable expr:lambda expr:application expr:let<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr [] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:int expr [<span class=\"token punctuation\">(</span><span class=\"token function\">v</span> : Integer<span class=\"token punctuation\">)</span>] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:bool expr [<span class=\"token punctuation\">(</span><span class=\"token function\">v</span> : Boolean<span class=\"token punctuation\">)</span>] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:string expr [<span class=\"token punctuation\">(</span><span class=\"token function\">v</span> : String<span class=\"token punctuation\">)</span>] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:list expr [<span class=\"token punctuation\">(</span><span class=\"token function\">elems</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Listof</span> expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:variable expr [<span class=\"token punctuation\">(</span><span class=\"token function\">name</span> : String<span class=\"token punctuation\">)</span>] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:lambda expr\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">param</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Listof</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">body</span> : expr<span class=\"token punctuation\">)</span>]\n  #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:application expr\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">func</span> : expr<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">args</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Listof</span> expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n  #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> expr:let expr\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">bindings</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Listof</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Pair</span> String expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">expr</span> : expr<span class=\"token punctuation\">)</span>]\n  #:transparent<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Definition of types(create <code class=\"language-text\">typ.rkt</code>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang typed/racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> typ typ:builtin<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> typ [] #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> typ:builtin typ\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">name</span> : String<span class=\"token punctuation\">)</span>]\n  #:transparent<span class=\"token punctuation\">)</span></code></pre></div>\n<p>I will not explain them immediately, but let our incrementally steps show the story, let's start the journey.</p>\n<h3>Part I: Incrementally build up inference</h3>\n<p>Then we learn how to incrementally build up the HM type system without memorizing all rules. It also shows how to get ideas behind rules, not just remember a snapshot!</p>\n<h4>Monomorphism stuff</h4>\n<p><strong>Monomorphism</strong>, which means obviously and decidable, and it would be a good start. Here, code can explain it better(create <code class=\"language-text\">semantic.rkt</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang typed/racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> type/infer<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"lang.rkt\"</span>\n         <span class=\"token string\">\"typ.rkt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> type/infer <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> expr typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> exp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> exp\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:int</span> _] <span class=\"token punctuation\">(</span><span class=\"token function\">typ:builtin</span> <span class=\"token string\">\"int\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:bool</span> _] <span class=\"token punctuation\">(</span><span class=\"token function\">typ:builtin</span> <span class=\"token string\">\"bool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:string</span> _] <span class=\"token punctuation\">(</span><span class=\"token function\">typ:builtin</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can see why I say they are obviously even you never use <strong>static type</strong>, because this type is builtin in most language, inference their types is just by definition. <code class=\"language-text\">1</code> is <code class=\"language-text\">int</code>, <code class=\"language-text\">#t</code> is <code class=\"language-text\">bool</code>, <code class=\"language-text\">&quot;hello&quot;</code> is <code class=\"language-text\">string</code>. However, there has a common <strong>builtin</strong> type is not monomorphism, for example: <code class=\"language-text\">list</code>.</p>\n<h4>List</h4>\n<p>The inference list type is not that easy, because it's a type depends on the type, what's that mean? It means we say: <code class=\"language-text\">list A</code> is a type when <code class=\"language-text\">A</code> is a type, so must have a type <code class=\"language-text\">A</code> to have type <code class=\"language-text\">list A</code>, this called type depends on the type. This means, if we want to inference type of list, we also need to inference the type of its element and check rest elements following the same type. An edge case is somehow, some lists do not contain any element, in such case we still need a type, so we give it a placeholder of the type usually called <strong>free type variable(freevar)</strong>. Finally, returns a type <code class=\"language-text\">list</code> with its type of argument. You can try to build it by yourself, but you would find there is something missing and became a wall stop you. The first thing we need to do, is extending our type definition to fit <strong>a type with type parameter</strong> this abstraction(modify <code class=\"language-text\">typ.rkt</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> typ:freevar typ\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">index</span> : Integer<span class=\"token punctuation\">)</span>]\n  #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> typ:constructor typ\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">name</span> : String<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">arg</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Listof</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n  #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> typ:builtin <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> String typ:constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:builtin</span> name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span> name <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now <code class=\"language-text\">typ:builtin</code> is just a special case of <code class=\"language-text\">typ:constructor</code>, and we introduce the placeholder: <code class=\"language-text\">typ:freevar</code>. The second thing need to prepare is <strong>Context</strong>(modify <code class=\"language-text\">semantic.rkt</code>, put them before <code class=\"language-text\">type/infer</code>), which maintaining the state of <code class=\"language-text\">freevar</code> counting:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> Context\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">freevar-counter</span> : Integer<span class=\"token punctuation\">)</span>]\n  #:transparent\n  #:mutable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> Context/new <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context/new</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> Context/new-freevar! <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> Context typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context/new-freevar!</span> ctx<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[cur-count</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context-freevar-counter</span> ctx<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">set-Context-freevar-counter!</span> ctx <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context-freevar-counter</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">typ:freevar</span> cur-count <span class=\"token boolean\">#f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then we can start adding inference of <code class=\"language-text\">expr:list</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> unify <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> typ typ Void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> t1 t2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> t1 t2<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span> a al<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span> b bl<span class=\"token punctuation\">)</span>]\n     #:when <span class=\"token punctuation\">(</span><span class=\"token function\">string=?</span> a b<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token function\">for-each</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">ae</span> : typ<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">be</span> : typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> ae be<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               al bl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">_</span> <span class=\"token punctuation\">(</span><span class=\"token function\">raise</span> <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"cannot unify type ~a and ~a\"</span> t1 t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; ->* is a special type, which means `->* list-of-required-parameters list-of-optional-parameters return-type`</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> type/infer <span class=\"token punctuation\">(</span><span class=\"token function\">->*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span><span class=\"token punctuation\">)</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> exp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> exp\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:string</span> _] <span class=\"token punctuation\">(</span><span class=\"token function\">typ:builtin</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:list</span> elems]\n     <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span> <span class=\"token string\">\"list\"</span>\n                      <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">empty?</span> elems<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token function\">Context/new-freevar!</span> ctx<span class=\"token punctuation\">)</span>\n                        <span class=\"token comment\">; use first element type as type of all elements</span>\n                        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[elem-typ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span> <span class=\"token comment\">; (car (list 1 2 3)) is 1</span>\n                          <span class=\"token comment\">; check all elements follow first element type</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token function\">for-each</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[elem</span> : expr]<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> elem-typ <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> elems<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (cdr (list 1 2 3)) is (list 2 3)</span>\n                          elem-typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Currently, <code class=\"language-text\">unify</code> just check two constructors has the same name, and keep <code class=\"language-text\">unify</code> their parameters if has. In other cases, throw an exception.</p>\n<h4>Variable</h4>\n<p>A variable would have a type, or it binds with a type. Anyway, that means we can infer the type of variable, but we need a place to store this information. Therefore, a new abstraction introduced <strong>Environment</strong>(modify <code class=\"language-text\">semantic.rkt</code>, put code before <code class=\"language-text\">Context</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> Env\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">parent</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Option</span> Env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">type-env</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Mutable-HashTable</span> String typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n  #:transparent\n  #:mutable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> Env/new <span class=\"token punctuation\">(</span><span class=\"token function\">->*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">Option</span> Env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> Env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Env/new</span> [parent <span class=\"token boolean\">#f</span>]<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">Env</span> parent <span class=\"token punctuation\">(</span><span class=\"token function\">make-hash</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; Env/lookup take variable name such as `x` to get a type from env</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> Env/lookup <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> Env String typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Env/lookup</span> env var-name<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">:</span> lookup-parent <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> lookup-parent <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token function\">:</span> parent <span class=\"token punctuation\">(</span><span class=\"token function\">Option</span> Env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> parent <span class=\"token punctuation\">(</span><span class=\"token function\">Env-parent</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                          <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> parent\n                              <span class=\"token comment\">; dispatch to parent if we have one</span>\n                              <span class=\"token punctuation\">(</span><span class=\"token function\">Env/lookup</span> parent var-name<span class=\"token punctuation\">)</span>\n                              <span class=\"token comment\">; really fail if we have no parent environment</span>\n                              <span class=\"token punctuation\">(</span><span class=\"token function\">raise</span> <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"no variable named: `~a`\"</span> var-name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">; try to get value from table</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[typ-env</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Mutable-HashTable</span> String typ<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Env-type-env</span> env<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">hash-ref</span> typ-env var-name\n              <span class=\"token comment\">; if fail, handler would take</span>\n              lookup-parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>then add a new field into <code class=\"language-text\">Context</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> Context\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">freevar-counter</span> : Integer<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">type-env</span> : Env<span class=\"token punctuation\">)</span>]\n  #:transparent\n  #:mutable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> Context/new <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> Context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context/new</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Env/new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now we can get the variable type from <code class=\"language-text\">Context</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> type/infer <span class=\"token punctuation\">(</span><span class=\"token function\">->*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span><span class=\"token punctuation\">)</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:variable</span> name] <span class=\"token punctuation\">(</span><span class=\"token function\">Env/lookup</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context-type-env</span> ctx<span class=\"token punctuation\">)</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Wait, we use variable then must somewhere we define it, where is it? Therefore, the next section is lambda, lambda would introduce new variables into the environment.</p>\n<h4>Lambda</h4>\n<p>Things are getting more complex, get really to understand what we need to do? Lambda in the HM system well not have type annotation for parameters, it causes the same problem just like what <code class=\"language-text\">list</code> gives us. This means we need to bind a <code class=\"language-text\">freevar</code> with parameters as variables into a <strong>new environment</strong>. At here, since the multiple parameters are valid in this language, I introduce type <code class=\"language-text\">pair</code> to abstraction on this rather than extend type definition. Then, we use this new environment to infer the type of body, and produce arrow type(If you don't understand arrow type, I suggest you read <a href=\"/blog/cs/note-stlc/\">STLC</a> for explanation) via the inferred result. Now, it's time for some program:</p>\n<h5>Bind variable</h5>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> Env/bind-var <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> Env String typ Void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Env/bind-var</span> env var-name typ<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[env</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Env-type-env</span> env<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hash-has-key?</span> env var-name<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">raise</span> <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"redefined: `~a`\"</span> var-name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">hash-set!</span> env var-name typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5>Infer</h5>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> type/infer <span class=\"token punctuation\">(</span><span class=\"token function\">->*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span><span class=\"token punctuation\">)</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:lambda</span> params body]\n     <span class=\"token comment\">; params use new freevars as their type</span>\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">letrec</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[λ-env</span> : Env <span class=\"token punctuation\">(</span><span class=\"token function\">Env/new</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context-type-env</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n           [param-types <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span>\n                         <span class=\"token string\">\"pair\"</span>\n                         <span class=\"token punctuation\">(</span><span class=\"token function\">map</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[param-name</span> : String]<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[r</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context/new-freevar!</span> ctx<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">(</span><span class=\"token function\">Env/bind-var</span> λ-env param-name r<span class=\"token punctuation\">)</span>\n                                  r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">set-Context-type-env!</span> ctx λ-env<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> body-typ <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> body ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">typ:arrow</span> param-types body-typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>WARN: notice since I always invoke <code class=\"language-text\">type/infer</code> without context in outside, <code class=\"language-text\">type-env</code> no need to set back to the original one. However, if you extend this language with <code class=\"language-text\">define</code> such sharing <code class=\"language-text\">Context</code>, then set environment back is required, else your local bindings would affect the outer scope.</p>\n</blockquote>\n<p>Lambda seems powerful, and let can be translated to lambda, right? Unfortunately, it's correct in the computation view, but incorrect in the inference view. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">id</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It gets an identity function and applies to <code class=\"language-text\">1</code>, it seems like it should get <code class=\"language-text\">int</code>. However, we would get a <code class=\"language-text\">freevar</code>. Because no one requires <code class=\"language-text\">id</code> start infer its type since we have no idea when would lambda apply to something, if remove <code class=\"language-text\">(λ (a) a)</code> and application form outside of <code class=\"language-text\">(λ (id) (id 1))</code>, we cannot ensure the type of <code class=\"language-text\">(id 1)</code>. That's what let polymorphism going to solve.</p>\n<h4>Let polymorphism</h4>\n<p>Let polymorphism is the key expression in the HM type system, which ensures inference is decidable. The problem in the previous section can be fixed if using <code class=\"language-text\">let</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[id</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">id</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Because <code class=\"language-text\">let</code> would infer the type of <code class=\"language-text\">id</code> immediately. Then the problem would be eliminated. So the only different part between <code class=\"language-text\">let</code> and <code class=\"language-text\">lambda</code>, is <code class=\"language-text\">let</code> bind its variable with inferred type, not <code class=\"language-text\">freevar</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> type/infer <span class=\"token punctuation\">(</span><span class=\"token function\">->*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span><span class=\"token punctuation\">)</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:let</span> bindings exp]\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">letrec</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[let-env</span> : Env <span class=\"token punctuation\">(</span><span class=\"token function\">Env/new</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context-type-env</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n              [bind-to-context <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[bind</span> : <span class=\"token punctuation\">(</span><span class=\"token function\">Pairof</span> String expr<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> bind\n                                   <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> name init]\n                                    <span class=\"token punctuation\">(</span><span class=\"token function\">Env/bind-var</span> let-env name <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> init ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">map</span> bind-to-context bindings<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">set-Context-type-env!</span> ctx let-env<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> exp ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, we came to infer the last expression: <code class=\"language-text\">expr:application</code>.</p>\n<h4>Application</h4>\n<p>Infer <code class=\"language-text\">application</code> needs to do a few checks:</p>\n<ol>\n<li>For application <code class=\"language-text\">(func args ...)</code>, infer the type of <code class=\"language-text\">func</code>.</li>\n<li>Check type of <code class=\"language-text\">func</code> is a arrow type: <code class=\"language-text\">A -&gt; B</code>.</li>\n<li>Assume return type is a <code class=\"language-text\">freevar</code>.</li>\n<li>Unify <code class=\"language-text\">A -&gt; B</code> with <code class=\"language-text\">(typeof (args ...)) -&gt; freevar</code>.</li>\n<li>return <code class=\"language-text\">freevar</code> as infer result.</li>\n</ol>\n<p>With the explanation, we can start coding:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> type/infer <span class=\"token punctuation\">(</span><span class=\"token function\">->*</span> <span class=\"token punctuation\">(</span><span class=\"token function\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">Context</span><span class=\"token punctuation\">)</span> typ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[expr:application</span> fn args]\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[fn-typ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> fn ctx<span class=\"token punctuation\">)</span>]\n           [args-typ <span class=\"token punctuation\">(</span><span class=\"token function\">map</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">arg</span> : expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> arg ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">)</span>]\n           [fresh <span class=\"token punctuation\">(</span><span class=\"token function\">Context/new-freevar!</span> ctx<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> fn-typ <span class=\"token punctuation\">(</span><span class=\"token function\">typ:arrow</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span> <span class=\"token string\">\"pair\"</span> args-typ<span class=\"token punctuation\">)</span> fresh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       fresh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">; don't forget to close parenthesis!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We almost complete, but we have new jobs in <code class=\"language-text\">unify</code> to do since application might unify <code class=\"language-text\">freevar</code> and arrow type now.</p>\n<h5>Unify freevar</h5>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> unify <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> typ typ Void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> t1 t2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> t1 t2<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:arrow</span> p1 r1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:arrow</span> p2 r2<span class=\"token punctuation\">)</span>]\n     <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> p1 p2<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> r1 r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">;;; freevar type is only important thing in `unify` function</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">and</span>\n      [cons _ <span class=\"token punctuation\">(</span><span class=\"token function\">typ:freevar</span> _ _<span class=\"token punctuation\">)</span>]\n      [cons t v]<span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">or</span> <span class=\"token punctuation\">(</span><span class=\"token function\">eqv?</span> v t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">not</span> <span class=\"token punctuation\">(</span><span class=\"token function\">occurs</span> v t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">subst!</span> v t<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token punctuation\">(</span><span class=\"token function\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> <span class=\"token punctuation\">(</span><span class=\"token function\">typ:freevar</span> _ _<span class=\"token punctuation\">)</span> t2] <span class=\"token punctuation\">(</span><span class=\"token function\">unify</span> t2 t1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; ignore</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Unify arrow type is simple, in fact, we can totally replace <code class=\"language-text\">typ:arrow</code> with <code class=\"language-text\">typ:constructor</code> XD. In fact, all type constructors can be <code class=\"language-text\">unify</code> in the same way. <code class=\"language-text\">freevar</code> brings a new thing: <code class=\"language-text\">occurs</code>, what's <code class=\"language-text\">occurs</code>?</p>\n<h5>Occurs check</h5>\n<p>Occurs check make unification fail when unify <code class=\"language-text\">V</code> and <code class=\"language-text\">T</code>, <code class=\"language-text\">T</code> contains <code class=\"language-text\">V</code>. If we didn't do this check, <code class=\"language-text\">unify</code> would lead to unsound inference, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token operator\">=</span> ?0 <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> ?0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What would <code class=\"language-text\">?0</code> be? It would cause an infinite loop at there: <code class=\"language-text\">(list (list (list ...)))</code>. Therefore, we need to check if <code class=\"language-text\">V</code> occurs in <code class=\"language-text\">T</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">:</span> occurs <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> typ typ Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">occurs</span> v t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> v t<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; same freevar means `v` occurs in `t`, then should be rejected</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> v <span class=\"token punctuation\">(</span><span class=\"token function\">typ:freevar</span> _ _<span class=\"token punctuation\">)</span>] <span class=\"token punctuation\">(</span><span class=\"token function\">eqv?</span> v t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; arrow and constructor both just keep check on type parameters</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> v <span class=\"token punctuation\">(</span><span class=\"token function\">typ:arrow</span> t1 t2<span class=\"token punctuation\">)</span>] <span class=\"token punctuation\">(</span><span class=\"token function\">or</span> <span class=\"token punctuation\">(</span><span class=\"token function\">occurs</span> v t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">occurs</span> v t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[cons</span> v <span class=\"token punctuation\">(</span><span class=\"token function\">typ:constructor</span> _ type-params<span class=\"token punctuation\">)</span>]\n     <span class=\"token punctuation\">(</span><span class=\"token function\">foldl</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[t</span> : typ] [pre-bool : Boolean]<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">(</span><span class=\"token function\">or</span> pre-bool <span class=\"token punctuation\">(</span><span class=\"token function\">occurs</span> v t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token boolean\">#f</span>\n            type-params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">; rest is fine</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">_</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, the whole inference part done, if you want to know how to build a new language in Racket then keep going, or you can close the tab now XD.</p>\n<h3>Part Two: Make new language in Racket</h3>\n<p>After we build up a type system, we definitely want to see it work as a language, and make a new language in Racket is crazy easy! Let's start the second part.</p>\n<h4>Pretty Print</h4>\n<p>First, to improve readability, we need pretty-print function(create <code class=\"language-text\">pretty-print.rkt</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang typed/racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"typ.rkt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> pretty-print-typ<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">:</span> pretty-print-typ <span class=\"token punctuation\">(</span><span class=\"token function\">-></span> typ String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> t<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> t\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[typ:freevar</span> idx subst]\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> subst\n         <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> subst<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"?~a\"</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[typ:constructor</span> name typ-args]\n     <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">empty?</span> typ-args<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"~a\"</span> name<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[j</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string-join</span> <span class=\"token punctuation\">(</span><span class=\"token function\">map</span>\n                                <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[typ-arg</span> : typ]<span class=\"token punctuation\">)</span>\n                                  <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> typ-arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                typ-args<span class=\"token punctuation\">)</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">string=?</span> name <span class=\"token string\">\"pair\"</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"(~a)\"</span> j<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"(~a ~a)\"</span> name j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">[typ:arrow</span> from to]\n     <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"~a -> ~a\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> from<span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and we modify the <code class=\"language-text\">unify</code> function in <code class=\"language-text\">semantic.rkt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">_</span> <span class=\"token punctuation\">(</span><span class=\"token function\">raise</span> <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"cannot unify type ~a and ~a\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> t1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> t2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>For example: <code class=\"language-text\">(typ:arrow (typ:constructor &quot;int&quot; &#39;()) (typ:constructor &quot;int&quot; &#39;()))</code> would be <code class=\"language-text\">int -&gt; int</code>, very good.</p>\n<h4>Macro for module language</h4>\n<p>Then we start handling macros in Racket, to handle the whole module, we need to overwrite <code class=\"language-text\">#%module-begin</code>(modify <code class=\"language-text\">main.rkt</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token function\">for-syntax</span> syntax/parse<span class=\"token punctuation\">)</span>\n         racket/syntax\n         syntax/stx<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"lang.rkt\"</span>\n         <span class=\"token string\">\"semantic.rkt\"</span>\n         <span class=\"token string\">\"pretty-print.rkt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> <span class=\"token punctuation\">(</span><span class=\"token function\">except-out</span> <span class=\"token punctuation\">(</span><span class=\"token function\">all-from-out</span> racket<span class=\"token punctuation\">)</span> #%module-begin<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">rename-out</span> [module-begin #%module-begin]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-rule</span> <span class=\"token punctuation\">(</span><span class=\"token function\">module-begin</span> EXPR ...<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">#%module-begin</span>\n   <span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> all-form <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> EXPR<span class=\"token punctuation\">)</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">(</span><span class=\"token function\">for-each</span> <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">form</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">displayln</span> form<span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">printf</span> <span class=\"token string\">\"type:- ~a~n\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             all-form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We haven't defined <code class=\"language-text\">parse</code>, here shows how to get all forms in the module and handling them by <code class=\"language-text\">for-each</code>, then is <code class=\"language-text\">parse</code> part:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define-syntax</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> stx<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> bind\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind-name:id</span> bind-expr<span class=\"token punctuation\">)</span>\n             #:with bind\n             #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'bind-name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> bind-expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`[</span><span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> let<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">binding*:bind</span> ...<span class=\"token punctuation\">)</span> body]\n     #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:let</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> binding*.bind ...<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`[</span><span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> λ<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ps*</span> ...<span class=\"token punctuation\">)</span> body] #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:lambda</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'ps*</span><span class=\"token punctuation\">)</span> ...<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`[</span><span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> quote<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">elem*</span> ...<span class=\"token punctuation\">)</span>] #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:list</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> elem*<span class=\"token punctuation\">)</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`[f</span> arg* ...] #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:application</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> arg*<span class=\"token punctuation\">)</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`v:id</span> #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:variable</span> <span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`s:string</span> #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:string</span> <span class=\"token punctuation\">(</span><span class=\"token function\">#%datum</span> . s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`b:boolean</span> #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:bool</span> <span class=\"token punctuation\">(</span><span class=\"token function\">#%datum</span> . b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">`i:exact-integer</span> #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">expr:int</span> <span class=\"token punctuation\">(</span><span class=\"token function\">#%datum</span> . i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; module-begin</span></code></pre></div>\n<p>Just mapping <strong>S expression</strong> to expression defined in <code class=\"language-text\">lang.rkt</code>.</p>\n<h5>Module reader</h5>\n<p>Define a <code class=\"language-text\">module reader</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">module</span> reader syntax/module-reader\n  hindley-milner<span class=\"token punctuation\">)</span></code></pre></div>\n<p>With these, you can use <code class=\"language-text\">#lang hindley-milner</code> as new Racket program:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang hindley-milner\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[a</span> <span class=\"token number\">1</span>]\n      [b <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">b</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Run it can see program prints expressions' structure and type.</p>\n<h5>REPL</h5>\n<p>The final thing to do, that's REPL supporting, we need to overwrite <code class=\"language-text\">#%top-interaction</code> to make it:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> <span class=\"token punctuation\">(</span><span class=\"token function\">except-out</span> <span class=\"token punctuation\">(</span><span class=\"token function\">all-from-out</span> racket<span class=\"token punctuation\">)</span> #%module-begin #%top-interaction<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token function\">rename-out</span> [module-begin #%module-begin]\n                     [top-interaction #%top-interaction]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-rule</span> <span class=\"token punctuation\">(</span><span class=\"token function\">top-interaction</span> . exp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print-typ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type/infer</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parse</span> exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>It gives a type after pretty print for input in REPL. Finally, we complete this journey.</p>\n<h3>Conclusion</h3>\n<p>I hope detailed implementation and examples show why we need the HM system, and how to make one, and where we would need it. I would be glad to hear you get help from this article. Have a nice day, and it's time for cookies!</p>\n<p>p.s. This is probably the second-longest article I made XD.</p>","frontmatter":{"title":"Hindley-Milner type system: Incrementally build way & Make new language in Racket","categories":["cs"],"tags":["plt","hindley milner","racket"]}}},"pageContext":{"slug":"/blog/2020/05/cs/hindley-milner-system-incremental-build-and-make-new-language/"}}}