{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/05/cs/programming-life-retro/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>很久以前就曾經想過要不要寫下這種經驗文，這念頭出現到現在轉眼就過了兩年了 XD。期間真的發生了太多事，現在又到了人生的十字路口所以決定記錄一些東西，希望這篇文章或許能夠啟發一些像我一樣迷惘的人。</p>\n<h3>大學教育</h3>\n<p>我接觸程式的時間不是特別早，到了大學才第一次\"使用\"電腦。那時真的蠻好笑的，我選了這裡的原因是因為我覺得這系名好長好有趣就填在指考志願第一個位置(而我當時也沒有試圖弄懂志願序的用途 XD)，亂填的下場就是我爸差點沒氣死，最後我決定還是不重考了。因為前進後或許不是一條好的道路，但到時候再後悔就好了，但不前進就必然是耗費一年也未必真的有什麼結果。到了學校，當時的基礎程式課就立刻深深吸引了當時進了不知道能幹嘛的科系，對未來毫無想法的我。從此我每天就是從中午 12 點寫程式寫到半夜 3 點，每個禮拜只出現在程式課、書店、圖書館跟房間，搞到很多科都超低空飛過(雖然我也不在意)。印象特別深刻的是當初印出 99 乘法表的作業我硬是搞不懂 loop 的用途，死纏著學長問了 2 小時才寫出來，現在想想，真是佩服學長沒有從此不鳥我呢 XD。大一時期就在不太懂什麼檔案 IO、資料庫的情況下寫出了人生第一個能夠算是應用程式的程式：課堂的最終測驗，寫出一個運作在 CLI 下的 ATM(當時也不知道什麼是 CLI XD)。在大二的資料結構與演算法課程中，小組討論促進了很多有趣的發想跟對演算法的理解(可惜整個科系就只有該門課程的教授這樣上課)，很多同學其實都能講出非常有見解的解法，雖然他們後來沒有走上開發者這條道路。該課程結束後我跟學長(對，就是被我纏了 2 小時的人)更常單獨討論他們當時的專題：為醫療領域優化的搜尋引擎。這個專題重點擺在如何針對特定領域優化搜尋結果，減少搜尋到農場文當然是非常重要的目標之一。由於當時對爬蟲的討論，我開始接觸 <code class=\"language-text\">Erlang</code> 與 <code class=\"language-text\">Go</code> 這兩個語言，接著幾個月都在不斷的優化寫好的爬蟲，讓它能夠在最短時間內處理最多的頁面。最後還不小心翻開<a href=\"https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools\">龍書</a>踏入了 Compiler 的奇妙世界。快樂的時光總是短暫，由於一些經濟因素，我決定休學走上工作的道路。</p>\n<h3>工作</h3>\n<p>第一份工作我靠著一個類 python 語言的直譯器說服了老闆為什麼雇用一個高中學歷的人也沒問題 www。現在回想這間公司真的很不錯，只要工作做完就完全不干涉你要做什麼，所以我在這裡寫了不少 Compiler 的程式，還把 redux porting 到 Go 裡面(雖然我到現在也沒弄懂這有什麼意義 XD)。當時朋友都在台北，也因為在家住膩了(結果現在又想回家住了)，決定上台北找工作。接著就在台北待到了現在。在剛上台北找工作時有一次很有趣的面試，當時我英文不行(連 Algorithm 都沒聽懂是什麼)、技能樹只往 Compiler 上點，那個面試官還願意一個一個跟我解釋我的問題在哪裏，最後還鼓勵我有學會的東西都記得很熟練，人真的超好 :)，現在還是很感謝他。工作幾年下來，其實慢慢覺得工作內的成長不存在了，這也讓我有了想轉換人生跑道的想法，後面會再提。</p>\n<h3>認識 PLT</h3>\n<p>在台北工作的兩年多裡慢慢開發著自己的程式語言，隨著得到更多的開發經驗和學習了更多的語言，我逐漸意識到我似乎有什麼根本性的東西根本沒有學到。就像當初我總覺得 Design Pattern 有點怪異、Go 開發者宣稱的簡單似乎不大對一樣的直覺，我發現了 PLT 這個以前從來沒有碰過的領域。從此開始入天坑：lambda calculus -> second order logic -> hindley-milner -> dependent type -> calculus of construction -> MLTT，現在正在讀 cubical type, inductive construction(CIC), HOTT 等。我認為學習 PLT 真的有很大的好處，會逐漸超出單個語言的見解，分解出是什麼讓程式變得好寫而什麼不是。也是對 PLT 的學習讓我終於弄懂為什麼 Go 的設計其實並沒有帶來簡單性、為什麼 Design Pattern 其實沒有必要背誦(甚至沒必要特意學習)。只是隨著了解的深入，我也更不想設計新的程式語言了 www(但又不想廢棄寫很久的專案)。但我不建議對上面的一切沒有興趣還硬讀，cs 有很多事情能做，絕對不只是 PLT，下一節是要以什麼心態面對技術。</p>\n<h3>避免崇拜</h3>\n<p>我覺得一路走來，最重要的教訓就是不要盲目的崇拜，不只是技術上，在生活中也應該檢視自己是不是做了什麼假設，而不是盲目的用被假設影響後的觀點看待事物。以我個人而言，崇拜過 Go, UNIX 等專案的作者和所謂的 hacker 就是該怎樣，進而導致了很多不良的選擇，例如：硬要用 vim 而不是 IDE、硬要用 CLI 而不是 GUI、喜歡從頭打造整個專案但明明有現成方案。不是說用 vim 不對，很多時候我還是用 vim，因為環境上只有 terminal 或是只是要小改幾行，我不否認它的編輯能力非常高效，但如果要說跟 debugger 的整合性、移至定義的精準度、重構的方便度、閱讀其他人的程式碼等等，用 IDE 真的會好很多。關鍵是不要只因為某個看法就放棄對其他可能性的探索。對，就算我推薦 IDE，你還是該學看看 vim 或 emacs，說不準什麼時候就用到了。這也連結到下一節闡釋怎麼選擇要學習什麼，只要避免崇拜，就比較能以客觀的角度選擇合適的工具。</p>\n<h3>歸類知識</h3>\n<p>對知識進行分類是有好處的，記住生命週期長的資訊，而對有生命週期短的資訊不要耗費太多時間。例如說「理解演算法」就比「記住 vim 的 101 個指令」生命週期長的多，這裏，並不只是指事物本身的生命週期，要說起來 vim 活得超久，可能比某些演算法更久，但 vim 是容易過時的，你可能會遇到某些情況 vim 就是沒有 plugin 能用，這時候該做的不是自己刻個工具而是找替代方案，因為我們通常沒有時間，比起 vim 我更關心我想處理的問題，所以 agda 我用 atom 編輯，沒什麼，因為有方便的套件能用。而演算法就算不是最快的，其發想思路還是有相當的價值。同理對程式語言其實沒有必要花時間掌握語法到能夠「寫出最好的寫法」，因為我們關心的是程式碼解決的什麼問題，不是用什麼程式語言。關鍵是不要為了「非核心」的知識耗費大量心力，若這個「非核心」的知識不是你的興趣也不是你的工作職責。沒錯，如果就是喜歡玩 vim，開發 vim 的 plugin 就是樂趣根源那就去做吧，人類社會之所以能夠運作就是因為每個人是不一樣的。就像 PLT 知識對目標是寫個作業系統的人而言只是「非核心」知識一樣，每個人需要學習的知識都不一樣，所以也沒必要羨慕什麼「大神」，說不準人家還羨慕你能睡好覺，who knows。</p>\n<h3>下一個階段</h3>\n<p>雖然我被我講得好像我已經沒有迷惘了似地 XD，但完全不是這樣，我也在考慮去考在職碩士然後出國讀博士走學術這樣的路。人生沒有所謂的成功，有個笑話就說「窮人想有錢，有錢後被權貴欺負，就想著要有權，成官之後整天鬥爭，想想還是平淡的生活好，又成了窮人」，笑話是笑話，但人生沒有最佳解卻是事實，所以就算選了之後後悔也沒關係，需要的只是弄清楚自己接著想做什麼，然後去做。</p>\n<blockquote>\n<p>世界上只有一種真正的英雄主義，那就是在認識生命的真相後，依然熱愛生活。</p>\n</blockquote>\n<p>雖然我說的好像自己什麼都知道了，可惜就算是此時此刻我也搞不清楚我想幹嘛 w，但我還是會繼續學習我有興趣的知識、嘗試看看學術生涯是什麼樣子、體驗不同國家生活的風景。不知不覺就 23 歲，寫了 5 年程式，工作了 3 年，這世上唯一不缺的...大概就是時間不夠的感嘆，希望接下來 3 年也是有趣的人生。</p>\n<h3>人生不是只有程式碼</h3>\n<p>最後，人生不是只有程式碼，記得停下來看看那些幫助自己的人，我曾經沒有看清這麼簡單的事實。回憶過往，人生總是在受他人的幫忙，高中時帶給我人生樂趣的數學老師、嘴上抱怨但還是支持我的各種任性決定的父母、大學我整天吃吐司時請我吃飯的同學跟二話不說就借我幾千元的朋友、當初幫我跟老師求情不要當我的同學 www、工作時遇過的同事、在我低潮時聽我講抱怨的廢話的人們，只能再三感謝。這些才是讓我不用擔心，專心開發的支柱，如果有人讀完真的覺得自己沒有這樣的支柱，那也可以寄信給我(dannypsnl@gmail.com)，雖然我不見得能給什麼建議，保證沒辦法解決問題，但我可以好好聆聽，因為也有曾經願意聽我訴說的陌生人，雖然最後好像跟 programming 根本沒什麼關係 www，但還是希望這篇文章能夠幫助到一些人。話說回來，這部落格真的有讀者？</p>","frontmatter":{"title":"Programming 生涯回顧","categories":["cs"],"tags":["career","life"]}}},"pageContext":{"slug":"/blog/2020/05/cs/programming-life-retro/"}}}