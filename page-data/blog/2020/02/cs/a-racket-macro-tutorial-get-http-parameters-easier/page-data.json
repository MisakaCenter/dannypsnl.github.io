{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/02/cs/a-racket-macro-tutorial-get-http-parameters-easier/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>A few days ago, I post this <a href=\"https://dev.to/dannypsnl/comment/ldl8\">answer</a> to respond to a question about Racket's web framework. When researching on which frameworks could be used. I found no frameworks make get values from HTTP request easier. So I start to design a macro, which based on <a href=\"github.com/Junker/routy\">routy</a> and an assuming function <code class=\"language-text\">http-form/get</code>, as following shows:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">\"/user/:name\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span> route<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">age</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span> name age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let me explain this stuff. <code class=\"language-text\">get</code> is a macro name, it's going to take a string as route and a \"lambda\" as a request handler. <code class=\"language-text\">((name route) (age form))</code> means there has a parameter <code class=\"language-text\">name</code> is taken from <code class=\"language-text\">route</code> and a parameter <code class=\"language-text\">age</code> is taken from <code class=\"language-text\">form</code>. And <code class=\"language-text\">(format &quot;Hello, ~a. Your age is ~a.&quot; name age)</code> is the body of the handler function.</p>\n<p>Everything looks good! But we have no idea how to make it, not yet ;). So I'm going to show you how to build up this macro step by step, as a tutorial.</p>\n<p>First, we have to ensure the target. I don't want to work with original Racket HTTP lib because I never try it, so I pick <a href=\"github.com/Junker/routy\">routy</a> as a routing solution. A <a href=\"github.com/Junker/routy\">routy</a> equivalent solution would look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> <span class=\"token string\">\"/user/:name\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">request/param</span> params <span class=\"token string\">'name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">http-form/get</span> req <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>WARNING: There has no function named <code class=\"language-text\">http-form/get</code>, but let's assume we have such program to focus on the topic of the article: <strong>macro</strong></p>\n</blockquote>\n<p>Now we can notice that there was no <code class=\"language-text\">name</code>, <code class=\"language-text\">age</code> in <code class=\"language-text\">lambda</code> now. But have to get it by using <code class=\"language-text\">request/param</code> and <code class=\"language-text\">http-form/get</code>. But there also has the same pattern, the route! To build up macro, we need the following code at the top of the file <code class=\"language-text\">macro.rkt</code> first:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token function\">for-syntax</span> racket/base racket/syntax syntax/parse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then we get our first macro definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define-syntax</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get</span> stx<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> route:str<span class=\"token punctuation\">)</span>\n      #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> route\n          <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n            <span class=\"token string\">'body</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">\"/user/:name\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; output: '(routy/get \"/user/:name\" (lambda (req params) 'body))</span></code></pre></div>\n<p>Let's take a look at each line, first, we have <code class=\"language-text\">define-syntax</code>, which is like <code class=\"language-text\">define</code> but define a macro. It contains two parts, <strong>name</strong> and <code class=\"language-text\">syntax-parse</code>. The name part was <code class=\"language-text\">(get stx)</code>, so the macro called <code class=\"language-text\">get</code>, with a syntax object <code class=\"language-text\">stx</code>. The <code class=\"language-text\">syntax-parse</code> part was:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> route:str<span class=\"token punctuation\">)</span>\n    #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> route\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n          <span class=\"token string\">'body</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">syntax-parse</code> part works on the syntax object, so it's arguments are a syntax object and patterns! Yes, patterns! It's ok to have multiple patterns like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define-syntax</span> <span class=\"token punctuation\">(</span><span class=\"token function\">multiple-patterns?</span> stx<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">multiple-patterns?</span> s:str<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span> ok-str<span class=\"token punctuation\">)</span>]\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">multiple-patterns?</span> s:id<span class=\"token punctuation\">)</span> #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span> ok-id<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">multiple-patterns?</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; output: 'ok-str</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">multiple-patterns?</span> a<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; output: 'ok-id</span></code></pre></div>\n<p>Now we want to add handler into <code class=\"language-text\">get</code>, to reduce the complexity, we introduce another feature: <code class=\"language-text\">define-syntax-class</code>. The code would become:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define-syntax</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get</span> stx<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> handler-lambda\n    #:literals <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*:id</span> ...<span class=\"token punctuation\">)</span> clause ...<span class=\"token punctuation\">)</span>\n      #:with\n      application\n      #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*</span> ...<span class=\"token punctuation\">)</span>\n           clause ...<span class=\"token punctuation\">)</span>\n         arg* ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> route:str handler:handler-lambda<span class=\"token punctuation\">)</span>\n      #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> route\n          <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n            handler.application<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>First we compare <code class=\"language-text\">syntax-parse</code> block, we add <code class=\"language-text\">handler:handler-lambda</code> and <code class=\"language-text\">handler.application</code> here:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n  [<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> route:str handler:handler-lambda<span class=\"token punctuation\">)</span>\n    #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> route\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n          handler.application<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is how we use a <code class=\"language-text\">define-syntax-class</code> in a higher-level syntax. <code class=\"language-text\">handler:handler-lambda</code> just like <code class=\"language-text\">route:str</code>, the only differences are their pattern. <code class=\"language-text\">route:str</code> always expected a string, <code class=\"language-text\">handler:handler-lambda</code> always expected a <code class=\"language-text\">handler-lambda</code>. And notice that <code class=\"language-text\">handler:handler-lambda</code> would be the same as <code class=\"language-text\">a:handler-lambda</code>, just have to use <code class=\"language-text\">a</code> to refer to that object. But better give it a related name.</p>\n<p>Then dig into <code class=\"language-text\">define-syntax-class</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> handler-lambda\n  #:literals <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*:id</span> ...<span class=\"token punctuation\">)</span> clause* ...<span class=\"token punctuation\">)</span>\n    #:with\n    application\n    #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*</span> ...<span class=\"token punctuation\">)</span>\n        clause* ...<span class=\"token punctuation\">)</span>\n        arg* ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">define-syntax-class</code> allows us add some <code class=\"language-text\">stxclass-option</code>, for example: <code class=\"language-text\">#:literals (lambda)</code> marked <code class=\"language-text\">lambda</code> is not a pattern variable, but a literal pattern. The body of <code class=\"language-text\">define-syntax-class</code> is a pattern, which takes a pattern and some <code class=\"language-text\">pattern-directive</code>. The most important <code class=\"language-text\">pattern-directive</code> was <code class=\"language-text\">#:with</code>, which stores how to transform this pattern, it takes a <code class=\"language-text\">syntax-pattern</code> and an <code class=\"language-text\">expr</code>, as you already saw, this is usage: <code class=\"language-text\">handler.application</code>.</p>\n<p>The interesting part was <code class=\"language-text\">...</code> in the pattern, it means zero to many patterns. A little tip makes such variables with a suffix <code class=\"language-text\">*</code> like <code class=\"language-text\">arg*</code> and <code class=\"language-text\">clause*</code> at here.</p>\n<p>Now take a look at usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">\"/user/:name\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">name</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span> name age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; output: '(routy/get \"/user/:name\" (lambda (req params) ((lambda (name age) (format \"Hello, ~a. Your age is ~a.\" name age)) name age)))</span></code></pre></div>\n<p>There are some issues leave now, since we have to distinguish <code class=\"language-text\">route</code> and <code class=\"language-text\">form</code>, current pattern of <code class=\"language-text\">handler-lambda</code> is not enough. The <code class=\"language-text\">handler-lambda.application</code> also incomplete, we need</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">request/param</span> params <span class=\"token string\">'name</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">http-form/get</span> req <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>but get</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">name</span> age<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span>\n            name\n            age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> name age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>right now.</p>\n<p>To decompose the abstraction, we need another <code class=\"language-text\">define-syntax-class</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> argument\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg:id</span> <span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      #:with get-it #<span class=\"token string\">'[arg</span> <span class=\"token punctuation\">(</span><span class=\"token function\">request/param</span> params <span class=\"token string\">'arg</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg:id</span> <span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      #:with get-it #<span class=\"token string\">'[arg</span> <span class=\"token punctuation\">(</span><span class=\"token function\">http-form/get</span> req <span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> handler-lambda\n  #:literals <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*:argument</span> ...<span class=\"token punctuation\">)</span> clause* ...<span class=\"token punctuation\">)</span>\n    #:with\n    application\n    #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*.get-it</span> ...<span class=\"token punctuation\">)</span>\n         clause* ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There are two changes, replace <code class=\"language-text\">lambda</code> with <code class=\"language-text\">let</code> in <code class=\"language-text\">handler-lambda.application</code>(it's more readable), and use <code class=\"language-text\">argument</code> syntax type instead of <code class=\"language-text\">id</code>.</p>\n<p><code class=\"language-text\">argument</code> has two patterns, <code class=\"language-text\">arg:id (~literal route)</code> and <code class=\"language-text\">arg:id (~literal form)</code> to match <code class=\"language-text\">(x route)</code> and <code class=\"language-text\">(x form)</code>. Notice that <code class=\"language-text\">#:literals (x)</code> and <code class=\"language-text\">(~literal x)</code> has the same ability, just pick a fit one. <code class=\"language-text\">symbol-&gt;string</code> converts an atom to a string, here is an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'x</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; output: \"x\"</span></code></pre></div>\n<p>Let's take a look at usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">\"/user/:name\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span> route<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">age</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span> name age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; output: '(routy/get \"/user/:name\" (lambda (req params) (let ((name (request/param params 'name)) (age (http-form/get req (symbol->string 'age)))) (format \"Hello, ~a. Your age is ~a.\" name age))))</span></code></pre></div>\n<p>Manually pretty output:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> <span class=\"token string\">\"/user/:name\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span> <span class=\"token punctuation\">(</span><span class=\"token function\">request/param</span> params <span class=\"token string\">'name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">age</span> <span class=\"token punctuation\">(</span><span class=\"token function\">http-form/get</span> req <span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span> name age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Summary</h3>\n<p>With make up this tutorial, I learn a lot of macro tips in Racket that I don't know before. I hope you also enjoy this, also hope you can use everything you learn from here to create your helpful macro. Have a nice day.</p>\n<h3>End up, all code</h3>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token punctuation\">(</span><span class=\"token function\">for-syntax</span> racket/base racket/syntax syntax/parse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define-syntax</span> <span class=\"token punctuation\">(</span><span class=\"token function\">get</span> stx<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> argument\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg:id</span> <span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      #:with get-it #<span class=\"token string\">'[arg</span> <span class=\"token punctuation\">(</span><span class=\"token function\">request/param</span> params <span class=\"token string\">'arg</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg:id</span> <span class=\"token punctuation\">(</span><span class=\"token function\">~literal</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      #:with get-it #<span class=\"token string\">'[arg</span> <span class=\"token punctuation\">(</span><span class=\"token function\">http-form/get</span> req <span class=\"token punctuation\">(</span><span class=\"token function\">symbol->string</span> <span class=\"token string\">'arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token function\">define-syntax-class</span> handler-lambda\n    #:literals <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">pattern</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*:argument</span> ...<span class=\"token punctuation\">)</span> clause* ...<span class=\"token punctuation\">)</span>\n      #:with\n      application\n      #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">arg*.get-it</span> ...<span class=\"token punctuation\">)</span>\n           clause* ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">(</span><span class=\"token function\">syntax-parse</span> stx\n    [<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> route:str handler:handler-lambda<span class=\"token punctuation\">)</span>\n      #<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">quote</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">routy/get</span> route\n          <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">req</span> params<span class=\"token punctuation\">)</span>\n            handler.application<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">get</span> <span class=\"token string\">\"/user/:name\"</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">name</span> route<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">age</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"Hello, ~a. Your age is ~a.\"</span> name age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"A Racket macro tutorial -- get HTTP parameters easier","categories":["cs"],"tags":["racket","metaprogramming","macro"]}}},"pageContext":{"slug":"/blog/2020/02/cs/a-racket-macro-tutorial-get-http-parameters-easier/"}}}