{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/04/11/cs/from-functor-to-applicative/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Last time we introduce <a href=\"/blog/2019/12/13/cs/from-infinite-type-to-functor/\">Functor</a>, a <a href=\"/blog/2019/12/13/cs/from-infinite-type-to-functor/\">Functor</a>\nis a container which provide a function can help another function operating the <a href=\"/blog/2019/12/13/cs/from-infinite-type-to-functor/\">Functor</a>.\nThis function has a name <code class=\"language-text\">fmap</code> in <strong>Haskell</strong>. Therefore, a function take a type <code class=\"language-text\">a</code> as parameter(<code class=\"language-text\">a -&gt; b</code>) can be lifted by <code class=\"language-text\">fmap</code>\nto handle <code class=\"language-text\">M a</code>, if <code class=\"language-text\">M</code> provided a <code class=\"language-text\">fmap</code>. For example, <code class=\"language-text\">Maybe</code> is a <code class=\"language-text\">Functor</code>, <code class=\"language-text\">(+1)</code> has the type <code class=\"language-text\">Int -&gt; Int</code>, <code class=\"language-text\">fmap (+1) (Just 10)</code>\nget a result: <code class=\"language-text\">Just 11</code>.</p>\n<h3>Limitation of Functor</h3>\n<p>Oh, <a href=\"/blog/2019/12/13/cs/from-infinite-type-to-functor/\">Functor</a> seems so powerful, but programming is simple, life is hard!\nIn the real world, a common situation is there has many <code class=\"language-text\">M</code> have to handle. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre style=\"counter-reset: linenumber 0\" class=\"language-hs line-numbers\"><code class=\"language-hs\"><span class=\"token hvariable\">replicateMaybe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">replicateMaybe</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">replicate</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">replicateMaybe</span> <span class=\"token hvariable\">_</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span>\n<span class=\"token hvariable\">replicateMaybe</span> <span class=\"token constant\">Nothing</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Can see that we fall back to pattern matching, line 3 and 4 exclude no input.\nWe can make it easier by extract out this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">liftMaybe2</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">c</span>\n<span class=\"token hvariable\">liftMaybe2</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span>\n<span class=\"token hvariable\">liftMaybe2</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span></code></pre></div>\n<p>Now <code class=\"language-text\">liftMaybe2 repliacte a b</code> can work just as expected. Sounds great? How about lift <code class=\"language-text\">a -&gt; b -&gt; c -&gt; d</code> to <code class=\"language-text\">M a -&gt; M b -&gt; M c -&gt; M d</code>.\nHow about make a lift to another <code class=\"language-text\">M</code>, e.g. <code class=\"language-text\">List</code>? <code class=\"language-text\">liftList</code>? It seems like boilerplate code, right?</p>\n<p>Now we have two problems:</p>\n<ol>\n<li><code class=\"language-text\">liftMaybe_n</code> problem, how to handle <code class=\"language-text\">liftMaybe</code> for all <code class=\"language-text\">n</code>.</li>\n<li><code class=\"language-text\">liftM</code> problem, how to handle <code class=\"language-text\">lift</code> for different <code class=\"language-text\">M</code>.</li>\n</ol>\n<p>Indeed, let's dig into <code class=\"language-text\">fmap</code> again. Every function with type <code class=\"language-text\">a -&gt; b</code> become <code class=\"language-text\">M a -&gt; M b</code>, therefore, <code class=\"language-text\">a -&gt; b -&gt; c</code> would be\n<code class=\"language-text\">M a -&gt; M (b -&gt; c)</code>. The key point is how to make <code class=\"language-text\">M (b -&gt; c)</code> applied <code class=\"language-text\">b</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">applyMaybe</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span>\n<span class=\"token hvariable\">applyMaybe</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">applyMaybe</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span></code></pre></div>\n<p>Now take a look at how magic happened:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token builtin\">sum</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Int</span>\n<span class=\"token builtin\">sum</span> <span class=\"token hvariable\">a</span> <span class=\"token hvariable\">b</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">b</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">c</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">fmap</span> <span class=\"token builtin\">sum</span> <span class=\"token operator\">$</span> <span class=\"token constant\">Just</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">`applyMaybe`</span> <span class=\"token constant\">Just</span> <span class=\"token number\">2</span> <span class=\"token operator\">`applyMaybe`</span> <span class=\"token constant\">Just</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">-- Just 6</span></code></pre></div>\n<p>We solve <code class=\"language-text\">liftMaybe_n</code> problem! The only problem is it only works for <code class=\"language-text\">Maybe</code>, to solve the problem, it's the time of <strong>class</strong>.</p>\n<h3>Applicative can help!</h3>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre style=\"counter-reset: linenumber 0\" class=\"language-hs line-numbers\"><code class=\"language-hs\"><span class=\"token keyword\">class</span> <span class=\"token constant\">Functor</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=></span> <span class=\"token constant\">Applicative</span> <span class=\"token hvariable\">f</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">pure</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;*></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">b</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">&lt;*&gt;</code> is the general version of <code class=\"language-text\">applyMaybe</code>.\n<code class=\"language-text\">pure</code> could raise a variable into the calculation in <code class=\"language-text\">Applicative</code>, we also call this <strong>minimum context</strong>.</p>\n<h4>Special helper <code class=\"language-text\">&lt;$&gt;</code></h4>\n<p><code class=\"language-text\">&lt;$&gt;</code> has definition as below:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre style=\"counter-reset: linenumber 0\" class=\"language-hs line-numbers\"><code class=\"language-hs\"><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;$></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Functor</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">b</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;$></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">fmap</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>It just an alias of <code class=\"language-text\">fmap</code> to help infix syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;$></span> <span class=\"token constant\">Just</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;*></span> <span class=\"token constant\">Just</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">-- Just 3</span>\n<span class=\"token builtin\">replicate</span> <span class=\"token operator\">&lt;$></span> <span class=\"token constant\">Just</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;*></span> <span class=\"token constant\">Just</span> <span class=\"token char\">'x'</span>\n<span class=\"token comment\">-- Just \"xxx\"</span>\n<span class=\"token builtin\">replicate</span> <span class=\"token operator\">&lt;$></span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;*></span> <span class=\"token punctuation\">[</span><span class=\"token char\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'z'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">-- [\"x\", \"y\", \"z\", \"xx\", \"yy\", \"zz\", \"xxx\", \"yyy\", \"zzz\"]</span></code></pre></div>\n<h3>Conclusion</h3>\n<p>I hope this article really help you understand why we need <strong>Applicative</strong>. Next time would <strong>Monad</strong> or <strong>monoid</strong>,\nthanks for your read and have a good day!</p>","frontmatter":{"title":"From Functor to Applicative","categories":["cs"],"tags":["plt","applicative","language","haskell"]}}},"pageContext":{"slug":"/blog/2020/04/11/cs/from-functor-to-applicative/"}}}