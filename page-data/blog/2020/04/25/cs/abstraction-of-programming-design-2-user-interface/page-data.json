{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>在<a href=\"/blog/2019/11/09/cs/abstraction-of-programming-design/\">上一篇</a>教學裡我們只花費了心思在如何建立核心概念的程式上，然而寫好地程式碼沒有讓人操作的介面也就只是一團垃圾而已，這次我們就來看看怎麼樣逐步開發操作用的介面吧！ <strong>Racket</strong> 本身就提供了相當方便的內建 GUI，而這次我們就是要使用這些 API，首先我們來打造單一帳戶的操作介面</p>\n<h3>宣告式語言 racket/gui</h3>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 0\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\">#lang racket/gui\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"atm.rkt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> racket/class<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; Account window</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> account-window\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> frame%\n       [label <span class=\"token string\">\"Account\"</span>]\n       [width <span class=\"token number\">400</span>]\n       [height <span class=\"token number\">300</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> money-input\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> text-field%\n       [parent account-window]\n       [label <span class=\"token string\">\"amount:\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> withdraw-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"withdraw\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> deposit-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"deposit\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> check-balances-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"check balances\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> query-record-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"all records\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">send</span> account-window show <span class=\"token boolean\">#t</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>接著執行 <code class=\"language-text\">racket app.rkt</code> 就可以看到我們的 Account 操作介面了，現在所有的按鈕都還沒有綁定要做什麼，所以我們先來看看到底上面這些程式都是拿來做什麼的吧！</p>\n<p><code class=\"language-text\">#lang racket/gui</code> 這點或許會讓人有點迷惑，但這整篇文章都可以不必考慮它到底是怎麼做到的，只需要知道這會讓我們執行的語言變成一個叫做 <code class=\"language-text\">racket/gui</code> 的擴展語言，這是為了下面的 <code class=\"language-text\">frame%</code>, <code class=\"language-text\">text-field%</code> 等等 GUI 相關的程式宣告的。<strong>Racket</strong> 的 GUI 框架設計相當直覺，每個 <code class=\"language-text\">new</code> 宣告都對應了 <strong>是什麼元件</strong> 以及 <strong>有哪些屬性</strong>，例如 <code class=\"language-text\">account-window</code> 就是一個 frame、高 300、寬 400，以此類推。其中比較特殊的屬性只有 <code class=\"language-text\">parent</code>，這是用在該宣告要附屬在哪個宣告底下時使用的，除此之外幾乎都只需要實際執行就能看出程式碼的用途！</p>\n<h3>資料與操作</h3>\n<p>但一個只能顯示畫面的程式不能算是操作介面(廢話 XD)，所以我們接下來要導入資料跟動作才能讓這個介面有操作意義</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 6\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> test-users-transcations\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-hash</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">hash-set!</span> test-users-transcations\n           <span class=\"token string\">\"danny\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> current-user <span class=\"token string\">'no-one</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>以及在 <code class=\"language-text\">(send account-window show #t)</code> 之前把 <code class=\"language-text\">current-user</code> 改成存在的帳號，這裡只有 <code class=\"language-text\">danny</code> 這個帳號而已：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 39\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">set!</span> current-user <span class=\"token string\">\"danny\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">send</span> account-window show <span class=\"token boolean\">#t</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>這就算是完成了我們需要的資料部分，但有些東西需要說明一下： <code class=\"language-text\">make-hash</code> 會建立一個可以對應資料到資料的 <strong>map</strong>，例如這裏我們用 <code class=\"language-text\">hash-set!</code> 插入了 <code class=\"language-text\">&quot;danny&quot;</code> 到一個帳戶的 <strong>map</strong>，那麼之後就可以用 <code class=\"language-text\">&quot;danny&quot;</code> 這個 <strong>key</strong> 不斷的存取同一個帳戶。</p>\n<p>接著我們打造需要的操作</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 12\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">show-balances</span> a e<span class=\"token punctuation\">)</span>\n  [message-box <span class=\"token string\">\"Balance\"</span>\n               <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"balance: ~a\"</span>\n                       <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hash-ref</span> test-users-transcations current-user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               account-window\n               <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">no-icon</span> ok<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> money-input\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> text-field%\n       [parent account-window]\n       [label <span class=\"token string\">\"amount:\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">affect-balance</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[tran</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hash-ref</span> test-users-transcations current-user<span class=\"token punctuation\">)</span>]\n             [amount <span class=\"token punctuation\">(</span><span class=\"token function\">send</span> money-input get-value<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">action</span> tran <span class=\"token punctuation\">(</span><span class=\"token function\">string->number</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token function\">show-balances</span> a e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>p.s. 注意到 <code class=\"language-text\">money-input</code> 我們已經宣告過了，只是 <strong>Racket</strong> 要 <code class=\"language-text\">define</code> 之後才能使用變數，<code class=\"language-text\">affect-balance</code> 用到 <code class=\"language-text\">money-input</code> 而我要顯示它們的位置關係才會再顯示一次</p>\n<p>這裏 <code class=\"language-text\">show-balances</code> 做的事情非常簡單，根據 <code class=\"language-text\">current-user</code> 從 <code class=\"language-text\">test-users-transcations</code> 裡找出對應的帳戶接著呼叫 <code class=\"language-text\">atm.rkt</code> 裡的 <code class=\"language-text\">check-balances</code>。並用 <code class=\"language-text\">message-box</code> 顯示在畫面上。而 <code class=\"language-text\">affect-balance</code> 就比較複雜了點，首先要注意到它接收了一個叫做 <code class=\"language-text\">action</code> 的參數然後才是一個 <code class=\"language-text\">λ</code>(就是 <code class=\"language-text\">lambda</code> 的希臘文，在 <strong>Racket</strong> 裡可以互相替換) 函數，而這個 <code class=\"language-text\">λ</code> 函數會根據 <code class=\"language-text\">action</code> 跟 <code class=\"language-text\">money-input</code> 的輸入值(用 <code class=\"language-text\">(send money-input get-value)</code> 取得，注意要把字串轉成數字 <code class=\"language-text\">string-&gt;number</code>)對帳戶產生影響接著用 <code class=\"language-text\">show-balances</code> 顯示餘額。</p>\n<p>最後我們把函數註冊上各個按鈕：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 28\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> withdraw-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"withdraw\"</span>]\n       [callback <span class=\"token punctuation\">(</span><span class=\"token function\">affect-balance</span> withdraw<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> deposit-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"deposit\"</span>]\n       [callback <span class=\"token punctuation\">(</span><span class=\"token function\">affect-balance</span> deposit<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> check-balances-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"check balances\"</span>]\n       [callback show-balances]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> query-record-btn\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent account-window]\n       [label <span class=\"token string\">\"all records\"</span>]\n       [callback <span class=\"token punctuation\">(</span><span class=\"token function\">λ</span> <span class=\"token punctuation\">(</span><span class=\"token function\">a</span> e<span class=\"token punctuation\">)</span>\n                   <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[tran</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hash-ref</span> test-users-transcations current-user<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n                     [message-box <span class=\"token string\">\"All Records\"</span>\n                                  <span class=\"token punctuation\">(</span><span class=\"token function\">format</span> <span class=\"token string\">\"records: ~a\"</span> <span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span> tran<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                  account-window\n                                  <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">no-icon</span> ok<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>要綁定函數要用 <code class=\"language-text\">callback</code> 這個屬性，而它預期這個函數接收兩個參數，這也是為甚麼要有 <code class=\"language-text\">a</code> <code class=\"language-text\">e</code> 這兩個好像沒在用的參數(其實是 <code class=\"language-text\">button</code> 跟 <code class=\"language-text\">event</code>，但這裡沒用到所以隨便寫)。對於 <code class=\"language-text\">withdraw-btn</code> 跟 <code class=\"language-text\">deposit-btn</code> 來說，<code class=\"language-text\">callback</code> 就是 <code class=\"language-text\">affect-balance</code> 配上要用的 <code class=\"language-text\">action</code>(這就是為什麼要回傳一個函數，這也叫做 closure，指的是內部的函數會帶著原本給它的綁定環境) 得到的函數。對 <code class=\"language-text\">check-balances-btn</code> 來說可以直接用 <code class=\"language-text\">show-balances</code>。而 <code class=\"language-text\">query-record-btn</code> 是唯一直接寫成 <code class=\"language-text\">λ</code> 的，因為沒有其他人會用到這個函數，它做的其實就是調用 <code class=\"language-text\">atm.rkt</code> 裡的 <code class=\"language-text\">query-record</code> 得到全部操作紀錄然後印出，但要記得去改 <code class=\"language-text\">atm.rkt</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\">- (define (query-record tr)\n-   (pretty-print (tran-list tr)))\n</span><span class=\"token inserted-sign inserted\">+ (define (query-record tr)\n+   (tran-list tr))</span></code></pre></div>\n<p>原本的設計是印出紀錄，現在則是簡單的回傳。</p>\n<h3>登入帳號</h3>\n<p>最後我們想加上的功能是一個能夠處理多帳號的介面：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 6\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> test-users\n  <span class=\"token punctuation\">(</span><span class=\"token function\">make-hash</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">hash-set!</span> test-users\n           <span class=\"token string\">\"danny\"</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>這段程式編碼了使用者名稱到密碼的 <strong>map</strong>。接著我們把測試的 <code class=\"language-text\">account-window</code> 程式刪除：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\">- (set! current-user \"danny\")\n- (send account-window show #t)</span></code></pre></div>\n<p>放入以下主程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre style=\"counter-reset: linenumber 65\" class=\"language-scheme line-numbers\"><code class=\"language-scheme\"><span class=\"token comment\">; Main window</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> window\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> frame%\n       [label <span class=\"token string\">\"ATM\"</span>]\n       [width <span class=\"token number\">400</span>]\n       [height <span class=\"token number\">300</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> username-input\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> text-field%\n       [parent window]\n       [label <span class=\"token string\">\"username:\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> password-input\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> text-field%\n       [parent window]\n       [label <span class=\"token string\">\"password:\"</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">login</span> a e<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">letrec</span> <span class=\"token punctuation\">(</span><span class=\"token function\">[username</span> <span class=\"token punctuation\">(</span><span class=\"token function\">send</span> username-input get-value<span class=\"token punctuation\">)</span>]\n           [passwd <span class=\"token punctuation\">(</span><span class=\"token function\">send</span> password-input get-value<span class=\"token punctuation\">)</span>]\n           [expected-passwd\n            <span class=\"token punctuation\">(</span><span class=\"token function\">hash-ref!</span> test-users username <span class=\"token string\">'no-account</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n      [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> expected-passwd passwd<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">set!</span> current-user username<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token function\">send</span> account-window show <span class=\"token boolean\">#t</span><span class=\"token punctuation\">)</span>]\n      [<span class=\"token boolean\">#t</span> message-box <span class=\"token string\">\"Error\"</span> <span class=\"token string\">\"No this user or incorrect password\"</span> window <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token function\">no-icon</span> ok<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> login-button\n  <span class=\"token punctuation\">(</span><span class=\"token function\">new</span> button%\n       [parent window]\n       [label <span class=\"token string\">\"login\"</span>]\n       [callback login]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; Display GUI</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">send</span> window show <span class=\"token boolean\">#t</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>大部分的程式都不用再解說，新的功能只有 <code class=\"language-text\">login</code> 這支函數，而它做的事也只有取得帳號跟密碼並跟資料中的資訊比對而已，如果成功就設定 <code class=\"language-text\">current-user</code> 並開啟 <code class=\"language-text\">acount-window</code>，否則跳出錯誤提示。最後把這個功能跟 <code class=\"language-text\">login-button</code> 綁定就完成了！而 <code class=\"language-text\">letrec</code> 是一個特殊的綁定宣告，它允許綁定互相參考，而這裏正好有這個需要，可以到我以前寫的 <a href=\"https://github.com/dannypsnl/little-scheme/issues/15\">scheme interpreter</a> 的 issue 找更多的資訊。</p>\n<h3>結論</h3>\n<p>這個教學重點擺在如何設計一個可用的程式，也因此跳過了很多細節部分，要進一步掌握寫程式這回事需要更多的努力，但我希望這個系列已經讓你知道如何抽象一個繁複的問題。因此我提出一些可能的改善方向給這個小專案作為給讀者的練習 XD：</p>\n<ul>\n<li>處理餘額不足的情況</li>\n<li>改用其他資料儲存方式，現有的變數儲存方案在 ATM 需要分配到不同地區時會出現資料同步的困難，也有程式一結束就不能儲存資料的問題，而我們很難預放程式的意外停止(如斷電、意外錯誤等)</li>\n<li>建立新帳號的功能(有管理員權限才能操作？)</li>\n</ul>\n<p>希望這些練習能夠幫助你更進一步理解程式修改的過程，最後感謝你的閱讀，see you。</p>\n<p>參考：</p>\n<ul>\n<li><a href=\"https://docs.racket-lang.org/\">docs.racket-lang.org</a></li>\n</ul>","frontmatter":{"title":"程式設計思考（二）操作介面","categories":["cs"],"tags":["programming","beginner","racket"]}}},"pageContext":{"slug":"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/"}}}