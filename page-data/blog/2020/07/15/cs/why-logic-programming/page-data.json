{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/07/15/cs/why-logic-programming/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Why? Always a good question, to understand logic programming, need to realize what we gain from it. Normally, if we want to solve a computational problem, we make a sequential command to get an answer. For example, what is Fibonacci's number at <code class=\"language-text\">3</code>? We can have a racket program for this:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span> n<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">match</span> n\n    [0 <span class=\"token number\">1</span>]\n    [1 <span class=\"token number\">1</span>]\n    [n <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">fib</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> n <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">fib</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, some questions aren't that easy to be resolved since need some synthesis, but we can take a look at how to resolve the Fibonacci problem via logic programming(use <code class=\"language-text\">Datalog</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang datalog\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">racket/base</span><span class=\"token punctuation\">)</span>.\n\nfib<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>, <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>.\nfib<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>.\n\nfib<span class=\"token punctuation\">(</span><span class=\"token function\">N,</span> F<span class=\"token punctuation\">)</span> :- N != <span class=\"token number\">1</span>,\n            N != <span class=\"token number\">0</span>,\n            N1 :- -<span class=\"token punctuation\">(</span><span class=\"token function\">N,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>,\n            N2 :- -<span class=\"token punctuation\">(</span><span class=\"token function\">N,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>,\n            fib<span class=\"token punctuation\">(</span><span class=\"token function\">N1,</span> F1<span class=\"token punctuation\">)</span>,\n            fib<span class=\"token punctuation\">(</span><span class=\"token function\">N2,</span> F2<span class=\"token punctuation\">)</span>,\n            F :- +<span class=\"token punctuation\">(</span><span class=\"token function\">F1,</span> F2<span class=\"token punctuation\">)</span>.\n\nfib<span class=\"token punctuation\">(</span><span class=\"token number\">3</span>, F<span class=\"token punctuation\">)</span>?</code></pre></div>\n<p>In Fibonacci this example they actually the same thing, but if I ask: g(x) is under f(x) follows the Big-O definition.</p>\n<blockquote>\n<p>C : Real(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\gt 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>), N : Integer(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\ge 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>), <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∀</mi><mi>n</mi><mo>≥</mo><mi>N</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∃</mi><mi>C</mi><mo separator=\"true\">,</mo><mi>g</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>C</mi><mo>⋅</mo><mi>f</mi><mo stretchy=\"false\">(</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\forall n \\ge N, \\exists C, g(N) &lt; C \\cdot f(N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">∀</span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n<p>Does that still easy to answer? Solve this problem in Racket is really hard, but simple in <code class=\"language-text\">Rosette</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang rosette/safe\n<span class=\"token punctuation\">(</span><span class=\"token function\">define-symbolic</span> C N integer?<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">O</span> f g<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">solve</span>\n   <span class=\"token punctuation\">(</span><span class=\"token keyword\">begin</span> <span class=\"token punctuation\">(</span><span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">>=</span> N <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token function\">positive?</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">g</span> N<span class=\"token punctuation\">)</span>\n                     <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span> C <span class=\"token punctuation\">(</span><span class=\"token function\">f</span> N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Can see all need to do is point out constraints. The only problem is we cannot use <code class=\"language-text\">C : Real</code> this definition since <code class=\"language-text\">Real</code> is not constructible. However, the power of logic programming already shows there. Hope you also like it ^_^.</p>","frontmatter":{"title":"Why Logic Programming?","categories":["cs"],"tags":["logic programming","racket","rosette","datalog"]}}},"pageContext":{"slug":"/blog/2020/07/15/cs/why-logic-programming/"}}}