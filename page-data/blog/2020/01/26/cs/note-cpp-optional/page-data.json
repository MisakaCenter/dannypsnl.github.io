{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/01/26/cs/note-cpp-optional/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Optional type <code class=\"language-text\">std::optional&lt;T&gt;</code> was introduced since C++17, we could include header <code class=\"language-text\">&lt;optional&gt;</code> to have it. I supply a few examples to explain this good abstraction.</p>\n<p>A little step:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>optional<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> i<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This example shows how to check <code class=\"language-text\">optional</code> exist or not, and how to extract value from <code class=\"language-text\">optional</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>optional<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> i<span class=\"token punctuation\">{</span>std<span class=\"token operator\">::</span>nullopt<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">value_or</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span></code></pre></div>\n<p>This example shows if we know the fall back value, we can provide it and skip checking <code class=\"language-text\">optional</code>. There was still something missing that quite important, for example, we shouldn't use <code class=\"language-text\">value_or</code>, but more expressive helpers:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token builtin\">fmap</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token constant\">Int</span>\n<span class=\"token constant\">Just</span> <span class=\"token number\">14</span>\n<span class=\"token constant\">Prelude</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;$></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;*></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">Just</span> <span class=\"token number\">20</span></code></pre></div>\n<p>So that we use function than just a value, furthermore I also would like to see there had something like <code class=\"language-text\">unwrap()</code>, C++ provided <strong>Exception</strong>, I thought there had no reason to prevent this way.</p>","frontmatter":{"title":"NOTE: C++ optional","categories":["cs"],"tags":["note","cpp","language"]}}},"pageContext":{"slug":"/blog/2020/01/26/cs/note-cpp-optional/"}}}