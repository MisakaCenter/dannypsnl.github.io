{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2020/01/24/cs/note-bound-polymorphism/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Bounded polymorphism refers to existential quantifiers(<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∃</mi></mrow><annotation encoding=\"application/x-tex\">\\exists</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">∃</span></span></span></span>), restricted to range over types of bound type. To understand it only needs a few examples. Let's start! Take a look at the following program:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">numSort</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">Num a</code> is how we represent the bounded polymorphism in <strong>Haskell</strong>, the definition of <code class=\"language-text\">Num</code> was <code class=\"language-text\">class Num b where</code>(Hoogle shows <code class=\"language-text\">a</code>, just prevent to confuse reader don't familiar with <strong>Haskell</strong>) could read as <strong>a type <code class=\"language-text\">b</code> is an instance of class <code class=\"language-text\">Num</code></strong>.</p>\n<p>So <code class=\"language-text\">numSort</code> takes <code class=\"language-text\">[a]</code> only if <code class=\"language-text\">a</code> is an instance of <code class=\"language-text\">Num</code>. Now we could run down:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">numSort</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">numSort</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">Double</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>This is really a powerful feature(and you don't need to use <strong>Haskell</strong> for this, <strong>Java</strong> also has this feature), consider the old way to do <code class=\"language-text\">List&lt;A&gt;</code> to <code class=\"language-text\">List&lt;B&gt;</code>, and unfortunately solution was to copy each element in the list.</p>","frontmatter":{"title":"NOTE: bounded polymorphism","categories":["cs"],"tags":["note","plt","language","haskell"]}}},"pageContext":{"slug":"/blog/2020/01/24/cs/note-bound-polymorphism/"}}}