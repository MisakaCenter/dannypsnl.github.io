{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/11/09/cs/abstraction-of-programming-design/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>這是一篇重看 2017 年發的系列文 (這裡是第一篇 <a href=\"https://routedan.blogspot.com/2017/02/atm-ps.html\">routedan.blogspot.com/2017/02/atm-ps.html</a>) 之後決定重寫的文章</p>\n<p>之所以決定重來，是因為以現在我的角度來看，當初寫得太過 Java Spec，並且設計流程相當的缺乏建構領域模型的概念</p>\n<p>針對第一點，我決定用 Scheme 作為開發語言，來讓讀者理解程式語言並非重點所在，深入學習語言的特殊技巧確實有用，但卻與程式設計的核心無關 (當然，這並不是說無視語言擁有的抽象機制寫程式是好事)</p>\n<p>Scheme 是相當小巧的語言，小巧到我可以寫個 <a href=\"https://github.com/dannypsnl/little-scheme\">直譯器</a> 來執行 (不過這裡我還是用 Racket，畢竟要做完全部的功能實在太麻煩了)</p>\n<p>對第二個問題我決定先從建立概念的領域語言開始這次的設計 (雖說借鑒 Domain Driven Design 但不會完全用一樣的描述方式，是說他有規定一定要怎麼做嗎？)</p>\n<p>那麼，在開始之前我們必須學習一點必要的 Scheme，首先，Scheme 有一個稍稍特別的語法叫 S Expression，基本上就是一個長 <code class=\"language-text\">(a b c)</code> 這樣的玩意兒</p>\n<p>那麼 S Expression 是怎麼運用的呢？我們可以用實際案例來理解：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; 6</span>\n<span class=\"token comment\">;;; 注意 'x 等同 (quote x) 在 scheme 中程式碼即資料 (同像性)</span>\n<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (1 2 3)</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (1 2 3)</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token string\">'[1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>]<span class=\"token punctuation\">)</span> <span class=\"token comment\">; 1，順帶一提 [] 等同 ()</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (2 3)</span></code></pre></div>\n<p>可以看到跟常見的中序語法 (<code class=\"language-text\">1 + 2</code> 這種) 不同之處在於函數被放到了最前面</p>\n<p>接著我們看定義新的變數的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token comment\">;;; 1</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> x <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 2</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">add</span> x y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 3</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> add <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>第一種會定義一個變數，第二與第三的意思其實是一樣的，只是直接綁定一個函數給名稱(第三個)，或是用了語法糖(第二個)</p>\n<p>沒錯，我們所需要的先導知識就只有這樣，其餘的部分會在用到的時候再提</p>\n<p>現在讓我們進入設計的部分，首先我們要為 ATM 這個存在建立模型，這個模型會影響很長一段時間內我們對這個問題的看法，進而影響實作的方式(極度糟糕的設計甚至可以讓你根本寫不出想要的結果)</p>\n<p>思考一下，ATM 外在的行為是什麼？我們可以提款(withdraw)、存款(deposit)、查詢餘額(check balances)、查詢紀錄(query record)，而這些行為都是在操作交易紀錄，可以總結為以下的規則：</p>\n<ol>\n<li>withdraw/deposit 增加交易紀錄</li>\n<li>check balances 會使用交易紀錄計算出自己需要的結果 (餘額)</li>\n<li>query record 列出所有交易紀錄</li>\n</ol>\n<p>現在讓我們先寫下三個定義，放進 <code class=\"language-text\">app.rkt</code> 中 (前置提醒，所有的檔案都要在第一行聲明 <code class=\"language-text\">#lang racket</code>，因為 Racket 實際上支援數種語言的變體)</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> withdraw <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> deposit <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> check-balances <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> query-record <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>這些函式還沒有用處，它們必須操作某種裝態才能夠產生效果，而在這裡我們給予它們的目標就是交易紀錄(list of transaction)</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> list-of-transaction ‘<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> money<span class=\"token punctuation\">)</span>\n  [set! list-of-transaction <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'withdraw</span> money<span class=\"token punctuation\">)</span> list-of-transaction<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> money<span class=\"token punctuation\">)</span>\n  [set! list-of-transaction <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'deposit</span> money<span class=\"token punctuation\">)</span> list-of-transaction<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span>\n  [let <span class=\"token punctuation\">(</span>\n    [sum <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">left</span> right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'withdraw</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'deposit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        <span class=\"token comment\">; 遇到不在意的 transaction 我們就跳過</span>\n        [else right]\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ]\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">foldr</span> sum <span class=\"token number\">0</span> list-of-transaction<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 直接印出 list-of-transaction</span>\n[pretty-print list-of-transaction]<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">check-balances</code> 裡面我們突然用了好幾個新的概念，但在解釋細節之前，讓我們看看這些函式用起來的感覺如何</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; result: '((withdraw . 2000) (withdraw . 1000) (deposit . 30000))</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; result: 27000</span></code></pre></div>\n<p>這一段程式碼相當直觀的展示了我們做了什麼操作，這樣的形式非常適合拿來寫測試，這也是為什麼我要從最核心的概念開始這個教學</p>\n<p>現在我們可以回到 <code class=\"language-text\">check-balances</code> 了，我們一共採用了 3 個前面沒提到的東西 (真的要說其實只有兩個，這個等下就會知道)</p>\n<ol>\n<li>let binding</li>\n<li>cond</li>\n<li>foldr</li>\n</ol>\n<p>我們從 let binding 開始談起，(let (‘binding…) ‘expression…)， … 表示一至多個，binding 由 (‘name ‘init-expression) 組成，而我們其實可以把它視為 lambda 的變換，下面展示這種變換：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">x</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>] x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 等於</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>當然，這個語法之所以存在就是因為這個變換並不好寫的關係，所以不要沒事改成 lambda 的寫法 (不過這就是為什麼其實只有兩個新東西)</p>\n<p><code class=\"language-text\">cond</code> 是 Scheme 的條件式之一，它接收一些 clause，回傳第一個成功的 clause 的結果，每個 clause 都由 ('predicate ‘expression…) 組成，注意在 Scheme 裡，多個表達式存在於一個地方的時候回傳值是最後一個表達式的值，換句話說如果中間表達式不具副作用(side effect)那就是沒有意義的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; result: 2</span>\n<span class=\"token comment\">;;; 永遠都沒有 1 的事</span></code></pre></div>\n<p><code class=\"language-text\">foldr</code> 是一個從後面往前 <code class=\"language-text\">fold</code> 的函式，它接收一個雙參數函式跟初始值以及要折疊的 list，可以從 <code class=\"language-text\">sum</code> 的定義裡看出 <code class=\"language-text\">right</code> 代表我們當前的折疊結果(初始值是第二個參數)，而 <code class=\"language-text\">left</code> 是當前要處理的元素</p>\n<p>那麼我們也將進入第二階段：測試 了</p>\n<p>現在我們有一組 ATM 的核心功能，但我們在可預見的未來內就會對它們進行修改 (因為全域變數的存在，事實上如果可以的話，我建議在程式內不要試圖去操作全域變數)，也因此我們必須要開始編寫簡單的測試來保證程式的關鍵功能沒有被破壞</p>\n<p>現在建立一個 <code class=\"language-text\">test.rkt</code> 裡面放入</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"app.rkt\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>一執行了 <code class=\"language-text\">test.rkt</code> 就會發現這有問題，我們會得到主程式運行的結果，然而這絕非我們預期的測試所需要的行為，所以我們要拆分 <code class=\"language-text\">app.rkt</code> 成兩個檔案 <code class=\"language-text\">app.rkt</code>與 <code class=\"language-text\">atm.rkt</code></p>\n<p>在 <code class=\"language-text\">app.rkt</code> 中我們只留下：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"atm.rkt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">write</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">atm.rkt</code> 中必須加入下面的程式來 export 這些函數 (不要忘記 <code class=\"language-text\">#lang racket</code> 喔)</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> withdraw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> deposit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> check-balances<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> query-record<span class=\"token punctuation\">)</span></code></pre></div>\n<p>作為運行範例，並且理所當然的 <code class=\"language-text\">test.rkt</code> 改為引入 <code class=\"language-text\">atm.rkt</code></p>\n<p>接著我們要建立一個簡單的測試框架作為接下來測試所使用的工具</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"atm.rkt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> list-of-test-failure <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> actual expect<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> actual expect<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">void</span><span class=\"token punctuation\">)</span>\n    [set! list-of-test-failure [cons <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token string\">'not-equal</span> <span class=\"token string\">'actual</span> actual <span class=\"token string\">'expect</span> expect<span class=\"token punctuation\">)</span> list-of-test-failure]]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;;; first test</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> list-of-test-failure<span class=\"token punctuation\">)</span>\n  <span class=\"token string\">'test-pass</span>\n  list-of-test-failure<span class=\"token punctuation\">)</span></code></pre></div>\n<p>我們做了一個簡單的回報錯誤框架 (感謝 Scheme 簡短的語法，只要 8 行就有這麼不錯的效果)，現在讓我們加入第二個測試</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>很不幸的是這次我們會得到：<code class=\"language-text\">((not-equal actual 4000 expect 1000))</code></p>\n<p>這是為什麼呢？因為我們的核心函式總是修改同一個全域的紀錄，這使得每次的測試之間其實都不是獨立的；然而當我們閱讀測試的時候，必然不希望每次都需要閱讀大量的前後文才能正確的理解結果；因此我們必須要修改核心的函式</p>\n<p>p.s. 事實上如果真實世界的測試寫成這樣也不可能讀得完，也無法修改。最後成為所有人的惡夢，因為這個測試總是失敗，也沒辦法修復，最後剩下不改相關的程式的結局</p>\n<p>所以這裡要引入一個新的結構 <code class=\"language-text\">struct</code> 用來暫存我們的狀態</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> tran<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> tran <span class=\"token punctuation\">(</span><span class=\"token function\">[list</span> #:auto #:mutable]<span class=\"token punctuation\">)</span>\n  #:auto-value <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 並修改操作函數</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> tr money<span class=\"token punctuation\">)</span>\n  [set-tran-list! tr <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'withdraw</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> tr money<span class=\"token punctuation\">)</span>\n  [set-tran-list! tr <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'deposit</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span> tr<span class=\"token punctuation\">)</span>\n  [let <span class=\"token punctuation\">(</span>\n    [sum <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">left</span> right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'withdraw</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'deposit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        <span class=\"token comment\">; 遇到不在意的 transaction 我們就跳過</span>\n        [else right]\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ]\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">foldr</span> sum <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span> tr<span class=\"token punctuation\">)</span>\n  [pretty-print <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span></code></pre></div>\n<p>現在我們的 <code class=\"language-text\">test.rkt</code> 變成</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">tr</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n  <span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> tr <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span> tr<span class=\"token punctuation\">)</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我們藉由引入一個變數去除了共用全域變數的衝突</p>\n<p>p.s. 注意 <code class=\"language-text\">app.rkt</code> 也要一起修改，這裡就不多費口舌</p>\n<p><code class=\"language-text\">p.s. set-tran-list!</code> 跟 <code class=\"language-text\">tran-list</code> 都是由 Racket 替我們生成的函數，有興趣看細節的可以看：<a href=\"https://docs.racket-lang.org/reference/define-struct.html\">docs.racket-lang.org/reference/define-struct.html</a> 這裡我就不介紹了</p>\n<p><a href=\"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/\">下一篇</a>會加入使用者操作的部分，see you next time</p>\n<p>參考：</p>\n<ul>\n<li><a href=\"https://docs.racket-lang.org/\">docs.racket-lang.org</a></li>\n</ul>","frontmatter":{"title":"程式設計思考（一）核心領域","categories":["cs"],"tags":["programming","beginner","racket"]}},"allMarkdownRemark":{"edges":[{"node":{"id":"546863be-ba1c-595e-8370-eb774f31f60c","frontmatter":{"title":"lexer 原理解釋","categories":["cs"],"tags":["compiler","lexer","golang"]},"fields":{"slug":"/blog/2017/07/08/cs/lexer-explains/"}}},{"node":{"id":"5072ada0-29d8-500b-8371-f80533ab27b0","frontmatter":{"title":"Vim replace","categories":["cs"],"tags":["vim"]},"fields":{"slug":"/blog/2017/10/24/cs/vim-replace/"}}},{"node":{"id":"28754ab9-bc87-5304-83d9-11586ee70fce","frontmatter":{"title":"C++ thread 基礎","categories":["cs"],"tags":["cpp","thread"]},"fields":{"slug":"/blog/2017/06/26/cs/cpp-thread-basic/"}}},{"node":{"id":"d191956f-b5bb-5c3f-993a-eacec934f193","frontmatter":{"title":"llvm Go bindings","categories":["cs"],"tags":["llvm","golang"]},"fields":{"slug":"/blog/2017/12/04/cs/llvm-go-bindings/"}}},{"node":{"id":"e34022aa-be3f-504a-9cc9-b222c3b6e52b","frontmatter":{"title":"Type driven development in C++","categories":["cs"],"tags":["cpp"]},"fields":{"slug":"/blog/2017/12/23/cs/type-driven-development-in-cpp/"}}},{"node":{"id":"6cf1b36b-fed7-5566-84f6-64f596c0568f","frontmatter":{"title":"OpenCV introduction","categories":["cs"],"tags":["OpenCV","cpp"]},"fields":{"slug":"/blog/2018/02/08/cs/opencv-introduction/"}}},{"node":{"id":"e507df39-a49c-5c75-a4c4-507de675ce52","frontmatter":{"title":"ANTLR v4--introduction","categories":["cs"],"tags":["antlr4"]},"fields":{"slug":"/blog/2017/09/03/cs/introduction-of-antlr4/"}}},{"node":{"id":"08473604-caaf-538c-a9ac-633842a5eb3a","frontmatter":{"title":"You should know about `this`","categories":["cs"],"tags":["javascript"]},"fields":{"slug":"/blog/2018/02/09/cs/you-should-know-about-this/"}}},{"node":{"id":"fd161ad4-402d-58bd-8190-08e44075694a","frontmatter":{"title":"Erlang Quick Start","categories":["cs"],"tags":["erlang"]},"fields":{"slug":"/blog/2018/01/05/cs/erlang-quick-start/"}}},{"node":{"id":"a379d931-4a5a-50cf-b87a-29c36bf0bfca","frontmatter":{"title":"Sort by interface in Go","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/02/14/cs/sort-by-interface-in-go/"}}},{"node":{"id":"44c9e7e4-a19a-5f18-98f6-b6105e3ceb1c","frontmatter":{"title":"The best practice of Singleton in Golang","categories":["cs"],"tags":["golang","DesignPattern"]},"fields":{"slug":"/blog/2018/02/12/cs/singleton-best-practice-in-golang/"}}},{"node":{"id":"843f70c9-b9bc-52c0-920f-8ebec90635fe","frontmatter":{"title":"Create a WaitGroup by yourself","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/02/15/cs/create-a-wait-group-by-yourself-and-do-not-use-it/"}}},{"node":{"id":"c16962e8-fa69-54e8-bb2b-c781a2eabd46","frontmatter":{"title":"Nginx 安裝與啟動","categories":["cs"],"tags":["nginx","web"]},"fields":{"slug":"/blog/2018/04/02/cs/nginx-run-and-up/"}}},{"node":{"id":"49fd1e2e-1554-5d24-ae01-66e647e77df8","frontmatter":{"title":"Phoneix 安裝與啟動","categories":["cs"],"tags":["phoenix","elixir","web"]},"fields":{"slug":"/blog/2018/03/31/cs/phoenix-run-and-up/"}}},{"node":{"id":"b22b2e98-3a62-5e3a-b698-5b6521ea8c3f","frontmatter":{"title":"Introduction Of Char Recognizing -- Lexer Tech","categories":["cs"],"tags":["compiler","lexer","rust"]},"fields":{"slug":"/blog/2018/02/25/cs/introduction-of-char-recognizing-lexer-tech/"}}},{"node":{"id":"7aadac41-a6ef-595c-adb3-fe7349045f54","frontmatter":{"title":"How to disable Go test caching","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/03/17/cs/how-to-disable-go-test-caching/"}}},{"node":{"id":"5d5d1de0-f7e4-50de-a930-599e3cd895b3","frontmatter":{"title":"Some thinking from Elixir X Ruby Conf","categories":["cs"],"tags":["elixir"]},"fields":{"slug":"/blog/2018/05/01/cs/elixir-ruby-conf-2018-thinking/"}}},{"node":{"id":"c1666f78-5ad1-5fcc-9142-1f14a81b6079","frontmatter":{"title":"Go Channels 入門","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/04/23/cs/go-channel-introduction/"}}},{"node":{"id":"c8c71a5e-7c2f-5503-b2f1-ac0620db1157","frontmatter":{"title":"Design of Redux-go v2","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/05/17/cs/design-of-redux-go-v2/"}}},{"node":{"id":"67df5cf3-7b75-52a0-bf1b-0e9a81cb0cb0","frontmatter":{"title":"How to getting start with Rust","categories":["cs"],"tags":["rust"]},"fields":{"slug":"/blog/2018/05/26/cs/getting-start-with-rust/"}}},{"node":{"id":"765d1f5a-a9e2-5773-b81d-6fa2a465e86b","frontmatter":{"title":"Error is Value","categories":["cs"],"tags":["golang","errors"]},"fields":{"slug":"/blog/2018/06/22/cs/error-is-value/"}}},{"node":{"id":"ec13d746-3be7-5ec5-8cc2-9f5773c784ee","frontmatter":{"title":"Practical issue about DNS -- EDNS0","categories":["cs"],"tags":["networking","dns","golang"]},"fields":{"slug":"/blog/2018/08/07/cs/practical-issue-about-dns-edns0/"}}},{"node":{"id":"d6e6b1cc-7b50-59af-b3dd-1e2d1bd5fb5e","frontmatter":{"title":"Reflection in Go: create a stack[T]","categories":["cs"],"tags":["golang","reflection"]},"fields":{"slug":"/blog/2018/07/22/cs/reflection-in-go-create-a-stack-t/"}}},{"node":{"id":"a82969d9-e24d-5361-8fdf-797bd2415044","frontmatter":{"title":"gRPC quick start in Go","categories":["cs"],"tags":["networking","gRPC","golang"]},"fields":{"slug":"/blog/2018/08/16/cs/gRPC-basic-tutorial/"}}},{"node":{"id":"03ff243a-28ff-5c17-93bc-5acbf8aa87df","frontmatter":{"title":"Mark Sweep GC","categories":["cs"],"tags":["gc"]},"fields":{"slug":"/blog/2018/09/03/cs/mark-sweep/"}}},{"node":{"id":"b2e1114a-0574-582d-801f-ea4a99e96feb","frontmatter":{"title":"Use httpexpect to test server","categories":["cs"],"tags":["http","testing","networking","golang"]},"fields":{"slug":"/blog/2018/09/16/cs/httpexpect-go/"}}},{"node":{"id":"30f863fb-545c-5fdf-8fbe-bf908eb73753","frontmatter":{"title":"Go quick start","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/09/23/cs/golang-quick-start/"}}},{"node":{"id":"292b53ea-c5a7-551b-8607-b920c50d4c6e","frontmatter":{"title":"Test LLVM Go binding in travis","categories":["cs"],"tags":["llvm","golang","testing","travis"]},"fields":{"slug":"/blog/2018/10/06/cs/test-llvm-go-binding-in-travis/"}}},{"node":{"id":"948da191-2170-532c-9e7a-61104f546f7a","frontmatter":{"title":"Testing in Go","categories":["cs"],"tags":["golang","testing","debug"]},"fields":{"slug":"/blog/2018/11/17/cs/testing-in-go/"}}},{"node":{"id":"9fd83d10-85ca-5ed3-9416-599e3d54d4c6","frontmatter":{"title":"Kubernetes 從 Pod 開始","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/10/27/cs/kubernetes-start-from-pod/"}}},{"node":{"id":"2d6b2494-ee64-5f20-a82a-f73f14882cee","frontmatter":{"title":"fun networking: tcp close","categories":["cs"],"tags":["workrecord","networking","tcp"]},"fields":{"slug":"/blog/2018/11/30/cs/fun-network-tcp-close/"}}},{"node":{"id":"b69e04f4-45ce-5dff-9a51-3fd54d7f2136","frontmatter":{"title":"XDP some note","categories":["cs"],"tags":["networking","xdp"]},"fields":{"slug":"/blog/2018/11/30/cs/xdp-some-note/"}}},{"node":{"id":"092c8346-aeb9-5615-9d86-7d331ef2cace","frontmatter":{"title":"Kubernetes context","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/12/09/cs/kubernetes-context/"}}},{"node":{"id":"8de033ca-f3ad-5b21-b998-6f31085d5c9e","frontmatter":{"title":"Should I learn?","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2018/12/22/cs/should-i-learn/"}}},{"node":{"id":"cee81faa-22ef-5571-8540-e84fbfd9f710","frontmatter":{"title":"How to compare Go benchmark in TravisCI","categories":["cs"],"tags":["golang","testing","travis"]},"fields":{"slug":"/blog/2018/12/28/cs/golang-benchmark-compare/"}}},{"node":{"id":"0644a550-53f6-545c-9659-35a85d899494","frontmatter":{"title":"Introduction of LLDB","categories":["cs"],"tags":["tool","debugger","lldb"]},"fields":{"slug":"/blog/2019/03/17/cs/introduction-of-lldb/"}}},{"node":{"id":"05bd5f1b-bc76-5625-a764-e0d3c71b402f","frontmatter":{"title":"Make googletest-like test framework from scratch","categories":["cs"],"tags":["metaprogramming","cpp"]},"fields":{"slug":"/blog/2019/03/03/cs/make-googletest-like-test-framework-from-scratch/"}}},{"node":{"id":"7755f76a-3458-5764-9f50-68c4ffb0a6c9","frontmatter":{"title":"gRPC proxy: approach & pain","categories":["cs"],"tags":["gRPC"]},"fields":{"slug":"/blog/2019/04/13/cs/grpc-proxy-approach-and-pain/"}}},{"node":{"id":"9a3c9420-dd65-579b-bbe6-04cdd5654b91","frontmatter":{"title":"Write a hashmap in Go","categories":["cs"],"tags":["data-structure","golang"]},"fields":{"slug":"/blog/2019/04/04/cs/write-hashmap-in-go/"}}},{"node":{"id":"f1b55b8d-f933-5627-8717-d62ef5dbe2f8","frontmatter":{"title":"戴德金分割與1為何等於0.9...(無限循環)","categories":["math"],"tags":["dedekind","dedekind cut"]},"fields":{"slug":"/blog/2019/03/01/math/dedekind-cut-and-application/"}}},{"node":{"id":"fd5f04d7-405c-5e7d-8ab6-3ccdc0bce760","frontmatter":{"title":"HugePages on Kubernetes","categories":["cs"],"tags":["workrecord","hugepages","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/04/cs/hugepages-on-kubernetes/"}}},{"node":{"id":"58d36ae9-d194-5fac-bc24-d0c9730866bf","frontmatter":{"title":"5 tools for file transfer","categories":["cs"],"tags":["tool"]},"fields":{"slug":"/blog/2019/04/27/cs/five-tools-for-file-transfer/"}}},{"node":{"id":"49d97e32-8a97-5e60-8c30-c78c403bba0d","frontmatter":{"title":"tcpdump cheat sheet","categories":["cs"],"tags":["tcpdump","networking"]},"fields":{"slug":"/blog/2019/06/25/cs/tcpdump-cheat-sheet/"}}},{"node":{"id":"9c683f4e-7281-5153-a08a-a50b6ee05b88","frontmatter":{"title":"The Go concurrency bug I made","categories":["cs"],"tags":["golang","concurrency","workrecord"]},"fields":{"slug":"/blog/2019/05/25/cs/golang-concurrency-bug-i-made/"}}},{"node":{"id":"a74742e1-23ff-5977-bdfc-5f74842b234c","frontmatter":{"title":"A simple way to ensure interface won't be implemented accidently","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2019/06/18/cs/simple-way-to-ensure-go-interface-wont-be-implement-accidently/"}}},{"node":{"id":"bbf87cca-106e-5d96-a27d-a4f68a7cf012","frontmatter":{"title":"How trait with lifetime can be a trouble and how to fix it","categories":["cs"],"tags":["rust","rust lifetime"]},"fields":{"slug":"/blog/2019/07/31/cs/how-lifetime-trait-can-be-trouble-and-how-to-fix-it/"}}},{"node":{"id":"739889c2-58d8-5632-9bc4-1518751e52a6","frontmatter":{"title":"Notes: Ruby Conf Taiwan 2019","categories":["cs"],"tags":["language","gc"]},"fields":{"slug":"/blog/2019/08/13/cs/ruby-conf-taiwan-2019/"}}},{"node":{"id":"4e62b250-d25f-5c39-bd18-2d5b3514461b","frontmatter":{"title":"cgo can be a trouble","categories":["cs"],"tags":["golang","cgo"]},"fields":{"slug":"/blog/2019/08/15/cs/cgo-can-be-a-trouble/"}}},{"node":{"id":"10eb1882-d25b-532e-90b3-ba31c0ae4de0","frontmatter":{"title":"nix report","categories":["cs"],"tags":["nix","shell"]},"fields":{"slug":"/blog/2019/09/12/cs/nix-report/"}}},{"node":{"id":"778b403e-0913-55b6-8631-8f709c3190a4","frontmatter":{"title":"DPDK -- EAL Input/output error","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/18/cs/dpdk-input-output-error/"}}},{"node":{"id":"c21bfb9e-3ed2-5312-8652-c28945f78f52","frontmatter":{"title":"Why not a big script","categories":["cs"],"tags":["shell"]},"fields":{"slug":"/blog/2019/10/05/cs/why-not-big-script/"}}},{"node":{"id":"af72f2b3-cd09-547a-bce0-9cfef54189d7","frontmatter":{"title":"DPDK usertools: devbind","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/19/cs/dpdk-usertools-devbind/"}}},{"node":{"id":"ad56e808-8f85-55ad-9aa7-34f5336e6d4a","frontmatter":{"title":"Privileged Pod -- Debug kubernetes node","categories":["cs"],"tags":["kubernetes","debug"]},"fields":{"slug":"/blog/2019/09/01/cs/privileged-pod/"}}},{"node":{"id":"d1844995-f98a-582d-8034-1261c2538134","frontmatter":{"title":"How to use .gitignore","categories":["cs"],"tags":["git"]},"fields":{"slug":"/blog/2019/11/08/cs/how-to-use-gitignore/"}}},{"node":{"id":"55cd1966-fe9a-5d8e-a7bc-613b82ea53cc","frontmatter":{"title":"Weird behavior in Go: encoding/gob","categories":["cs"],"tags":["gob","golang","workrecord"]},"fields":{"slug":"/blog/2019/10/31/cs/weird-behavior-gob/"}}},{"node":{"id":"e7effcba-43fa-55a2-a9a4-3ae56227bb4d","frontmatter":{"title":"Reflection on Working effectively with legacy code --- Part I","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/11/24/cs/reflection-on-working-effectively-with-legacy-code-part-one/"}}},{"node":{"id":"9f3948b2-bb63-5a4f-9c9c-0a1fadfc3517","frontmatter":{"title":"Mergeable replicated data types","categories":["cs"],"tags":["paper","data-structure"]},"fields":{"slug":"/blog/2019/11/30/cs/mergeable-replicated-data-types/"}}},{"node":{"id":"95cd04e7-3518-5f09-bc15-b481e5502ab8","frontmatter":{"title":"Algebra data type vs Class","categories":["cs"],"tags":["plt","scala","haskell"]},"fields":{"slug":"/blog/2019/11/19/cs/algebra-data-type-vs-class/"}}},{"node":{"id":"f12f1f8a-6de2-51da-8f8a-d323a92b3549","frontmatter":{"title":"Infinite Type","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/infinite-type/"}}},{"node":{"id":"5e569bcc-7ad2-5200-921e-a0ce3b17a773","frontmatter":{"title":"NOTE: If we write kubernetes client in Rust","categories":["cs"],"tags":["note","programming","kubernetes","rust"]},"fields":{"slug":"/blog/2019/12/13/cs/if-write-kube-client-go-in-rust/"}}},{"node":{"id":"a2137fb4-59cf-577d-b07f-a829d4f6882c","frontmatter":{"title":"How to test in Haskell: HSpec setup","categories":["cs"],"tags":["haskell","beginner","testing"]},"fields":{"slug":"/blog/2019/12/14/cs/how-to-test-haskell/"}}},{"node":{"id":"785de266-a84d-57e3-b119-46a5f7e0114a","frontmatter":{"title":"NOTE: get labels from Pod","categories":["cs"],"tags":["note","kubernetes"]},"fields":{"slug":"/blog/2019/12/20/cs/note-get-labels-from-pod/"}}},{"node":{"id":"de3bd99a-2f0c-5473-a853-21523d01dbb5","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 20 to 23","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/04/cs/reflection-on-working-effectively-with-legacy-code-ch-20-23/"}}},{"node":{"id":"d74e85e7-1028-51d0-add9-0c0ea37c4cb6","frontmatter":{"title":"TDD is not silver bullet","categories":["cs"],"tags":["programming"]},"fields":{"slug":"/blog/2020/01/11/cs/tdd-is-not-silver-bullet/"}}},{"node":{"id":"d4e2efd2-4da2-54dd-9e46-544abf0f1953","frontmatter":{"title":"NOTE: What is lambda calculus","categories":["cs"],"tags":["note","plt","utlc"]},"fields":{"slug":"/blog/2020/01/01/cs/note-what-is-lambda-calculus/"}}},{"node":{"id":"44eb6dda-c3e9-54fb-a251-b415fb08b49f","frontmatter":{"title":"NOTE: a little bit Z3 solver","categories":["cs"],"tags":["note","smt","z3"]},"fields":{"slug":"/blog/2020/01/24/cs/note-a-little-bit-z3-solver/"}}},{"node":{"id":"2a3dbf6d-50c5-5b0e-b4c2-4890cfc650a0","frontmatter":{"title":"NOTE: C++ optional","categories":["cs"],"tags":["note","cpp","language"]},"fields":{"slug":"/blog/2020/01/26/cs/note-cpp-optional/"}}},{"node":{"id":"f4cd1802-ad9e-5d80-81f0-79f85515f2cd","frontmatter":{"title":"NOTE: bounded polymorphism","categories":["cs"],"tags":["note","plt","language","haskell"]},"fields":{"slug":"/blog/2020/01/24/cs/note-bound-polymorphism/"}}},{"node":{"id":"e5f1b03a-f5cd-5b9b-aa1f-499ea2076fac","frontmatter":{"title":"一些推薦去嘗試看看的程式語言","categories":["cs"],"tags":["language"]},"fields":{"slug":"/blog/2020/02/06/cs/suggested-languages/"}}},{"node":{"id":"ec5fd544-7096-5098-89a6-0f06a873d47e","frontmatter":{"title":"不會騎 Gogoro 的兩個鄉巴佬","categories":["funny"],"tags":["life"]},"fields":{"slug":"/blog/2020/01/31/funny/two-idiots-who-cant-ride-gogoro/"}}},{"node":{"id":"10e9c6f2-3474-5ebc-99d2-5c4a97f879ea","frontmatter":{"title":"Binary Encoding of Integer","categories":["cs"],"tags":["fundamental"]},"fields":{"slug":"/blog/2020/03/21/cs/binary-encoding-of-interger/"}}},{"node":{"id":"e2302e39-eea1-5df3-90a6-ef060120cf9e","frontmatter":{"title":"小說推薦：天防者","categories":["book"],"tags":["novel","recommend","skyward","Brandon Sanderson"]},"fields":{"slug":"/blog/2020/04/01/book/recommend-novel-skyward/"}}},{"node":{"id":"80d44a1a-1a60-5d93-bf71-d21cbe6d796c","frontmatter":{"title":"NOTE: class member initialization order in C++","categories":["cs"],"tags":["note","cpp","class member","initialization","language"]},"fields":{"slug":"/blog/2020/04/13/cs/note-cpp-member-initialize-order/"}}},{"node":{"id":"ed391a8d-358b-56e3-b55c-f0fd90492aa8","frontmatter":{"title":"NOTE: Seven Bridges of Königsberg and Eulerian graph","categories":["math"],"tags":["note","topology","graph","Eulerian path","Eulerian circuit"]},"fields":{"slug":"/blog/2020/04/03/math/note-seven-bridges-of-konigsberg-eulerian-path/"}}},{"node":{"id":"047ac64e-b55c-5043-adae-1d5c9321c5cd","frontmatter":{"title":"NOTE: how to install Nix package manager on MacOS Catalina","categories":["cs"],"tags":["note","nix","macos","catalina"]},"fields":{"slug":"/blog/2020/04/17/cs/note-how-to-install-nix-on-macos-catalina/"}}},{"node":{"id":"c6c52b5a-8170-508f-b887-6b1ce2f6ecda","frontmatter":{"title":"How to parse expression with the parser combinator","categories":["cs"],"tags":["compiler","parser","racket"]},"fields":{"slug":"/blog/2020/05/03/cs/how-to-parse-expression-with-parser-combinator/"}}},{"node":{"id":"eff65ed1-fdb8-5069-919f-3983784e1344","frontmatter":{"title":"A beautiful proof: There have infinite primes","categories":["math"],"tags":["prime"]},"fields":{"slug":"/blog/2020/05/09/math/a-beautiful-proof-there-have-infinite-primes/"}}},{"node":{"id":"a30fc310-d412-5f36-95c3-0aee1ea000ae","frontmatter":{"title":"奶油白醬義大利麵","categories":["recipe"],"tags":["spaghetti","white sauce"]},"fields":{"slug":"/blog/2020/05/10/recipe/spaghetti/"}}},{"node":{"id":"0ad29589-2261-5f8f-a0f6-0ef61d5a4833","frontmatter":{"title":"NOTE: 演算法的各種時間複雜度","categories":["cs"],"tags":["note","algorithm","time complexity"]},"fields":{"slug":"/blog/2020/05/12/cs/algorithm-time-complexity/"}}},{"node":{"id":"4bc528e2-46d3-5ff9-9ef6-cd2036d9d741","frontmatter":{"title":"NOTE: 樸素集合論三大悖論","categories":["math"],"tags":["note","set theory","paradox","type theory"]},"fields":{"slug":"/blog/2020/05/31/math/set-theory-three-paradox/"}}},{"node":{"id":"67ccc98d-872a-548d-bec9-c1edd2297252","frontmatter":{"title":"Currying","categories":["cs"],"tags":["racket","macro"]},"fields":{"slug":"/blog/2020/05/31/cs/currying/"}}},{"node":{"id":"f49e05b7-906e-5dca-87d5-2a3d39e773db","frontmatter":{"title":"大阪燒","categories":["recipe"],"tags":["okonomiyaki"]},"fields":{"slug":"/blog/2020/06/17/recipe/recipe-okonomiyaki/"}}},{"node":{"id":"b8aae0b8-d789-57eb-b671-75bfa2f4290d","frontmatter":{"title":"NOTE: 演算法的量級","categories":["cs"],"tags":["note","algorithm","order"]},"fields":{"slug":"/blog/2020/06/20/cs/algorithm-order/"}}},{"node":{"id":"c6c0c8c1-db91-54c9-8929-78658c2a90dd","frontmatter":{"title":"NOTE: lambda 2","categories":["cs"],"tags":["note","plt","lambda 2"]},"fields":{"slug":"/blog/2020/06/12/cs/second-order-typed-lambda-calculus/"}}},{"node":{"id":"203837be-04fc-567d-9450-33a3f6b02872","frontmatter":{"title":"NOTE: ZFC","categories":["math"],"tags":["note","set theory"]},"fields":{"slug":"/blog/2020/06/11/math/note-zfc/"}}},{"node":{"id":"8dce6fe3-902a-5b3d-9d14-2e302cf0bef5","frontmatter":{"title":"小說推薦：優質國度","categories":["book"],"tags":["novel","recommend","Quality Land"]},"fields":{"slug":"/blog/2020/07/03/book/recommend-novel-quality-land/"}}},{"node":{"id":"a3447c9d-20fc-58e9-a993-f25b1f2b0d8a","frontmatter":{"title":"Extension hack","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/extension-hack/"}}},{"node":{"id":"3c3130a0-7b7a-5b3f-9f3c-9a23ed88cc72","frontmatter":{"title":"Swift --extension概念入門","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/swift-extension/"}}},{"node":{"id":"13404fcc-084f-5f56-8938-c72eb8e96c94","frontmatter":{"title":"Tracing source code of Kubernetes client-go","categories":["cs"],"tags":["kubernetes","golang"]},"fields":{"slug":"/blog/2019/01/25/cs/kube-client-go-source-code-tracing/"}}},{"node":{"id":"24cddb21-779c-545e-aff0-dd840418c8d2","frontmatter":{"title":"最後一次抱怨 Go","categories":["cs"],"tags":["golang","language"]},"fields":{"slug":"/blog/2020/01/19/cs/last-time-complain-about-go/"}}},{"node":{"id":"460001d0-2e11-586f-a331-e7294c963060","frontmatter":{"title":"A Racket macro tutorial -- get HTTP parameters easier","categories":["cs"],"tags":["racket","metaprogramming","macro"]},"fields":{"slug":"/blog/2020/02/16/cs/a-racket-macro-tutorial-get-http-parameters-easier/"}}},{"node":{"id":"d0e1e323-7ade-5a75-8c86-dbfd7f94861b","frontmatter":{"title":"Programming 生涯回顧","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2020/05/13/cs/programming-life-retro/"}}},{"node":{"id":"c029b0a3-b626-5758-b8e5-b6a38c781376","frontmatter":{"title":"Kubernetes Networking: concept and overview from underlying perspective","categories":["cs"],"tags":["networking","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/18/cs/kubernetes-networking-concept-and-overview/"}}},{"node":{"id":"bc080f44-1eaf-5efd-a61a-ff3f1da28b84","frontmatter":{"title":"From Functor to Applicative","categories":["cs"],"tags":["plt","applicative","language","haskell"]},"fields":{"slug":"/blog/2020/04/11/cs/from-functor-to-applicative/"}}},{"node":{"id":"757f6fbc-6d36-5b3f-989e-ef792d13aa7e","frontmatter":{"title":"NOTE: simply typed lambda calculus","categories":["cs"],"tags":["note","plt","stlc"]},"fields":{"slug":"/blog/2020/03/08/cs/note-stlc/"}}},{"node":{"id":"0bbd48f9-b7ac-5fbe-85f5-19ca3fa12734","frontmatter":{"title":"Type as Constraint: Why we need more type?","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2020/01/16/cs/type-as-constraint-why-we-need-more-type/"}}},{"node":{"id":"2a45e9d5-898d-59d4-84d4-f96458edfd2e","frontmatter":{"title":"程式設計思考（二）操作介面","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/"}}},{"node":{"id":"06cc88f1-000b-506b-8afb-0ba5409f5da1","frontmatter":{"title":"Haskell quick start","categories":["cs"],"tags":["haskell","beginner","plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/haskell-quick-start/"}}},{"node":{"id":"846c66d5-4f4a-5544-9491-fdc1671be380","frontmatter":{"title":"From Infinite Type to Functor","categories":["cs"],"tags":["plt","functor","language","haskell"]},"fields":{"slug":"/blog/2019/12/13/cs/from-infinite-type-to-functor/"}}},{"node":{"id":"b88e5107-daac-51de-aace-b9d13d01c5d1","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 6 to 10","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/12/07/cs/reflection-on-working-effectively-with-legacy-code-ch-6-10/"}}},{"node":{"id":"b9b6191e-1aa2-557b-9cbc-fcf4f689fe93","frontmatter":{"title":"Hindley-Milner type system: Incrementally build way & Make new language in Racket","categories":["cs"],"tags":["plt","hindley milner","racket"]},"fields":{"slug":"/blog/2020/05/24/cs/hindley-milner-system-incremental-build-and-make-new-language/"}}},{"node":{"id":"6759bad6-0b3f-5a19-b865-ee89d50703b4","frontmatter":{"title":"Magic in redux-go v2.1: package rematch","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/07/04/cs/magic-in-redux-go-2.1/"}}},{"node":{"id":"45c7c10b-ebe7-5f8a-9bb8-8384c90744cf","frontmatter":{"title":"Interaction with C in Zig","categories":["cs"],"tags":["zig","c","language"]},"fields":{"slug":"/blog/2019/12/22/cs/interaction-with-c-in-zig/"}}},{"node":{"id":"bce44484-82be-5531-bbc8-a9e1bc59076c","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 11 to 19","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/03/cs/reflection-on-working-effectively-with-legacy-code-ch-11-19/"}}},{"node":{"id":"602307b1-7619-55ee-91f4-b488361ff1fd","frontmatter":{"title":"程式設計思考（一）核心領域","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2019/11/09/cs/abstraction-of-programming-design/"}}},{"node":{"id":"d29c9aa1-2b7f-531a-868a-ccdca6371411","frontmatter":{"title":"De Bruijn index: why and how","categories":["cs"],"tags":["plt","de bruijn index","racket"]},"fields":{"slug":"/blog/2020/05/16/cs/de-bruijn-index/"}}},{"node":{"id":"29b4fcc7-cbe5-57fd-a9c5-7a18c62d8ee6","frontmatter":{"title":"正確實作 substitution 有多難","categories":["cs"],"tags":["plt","utlc"]},"fields":{"slug":"/blog/2020/06/04/cs/how-hard-can-implement-substitution-correctly-be/"}}},{"node":{"id":"ab571f39-a304-515c-9e56-c4bdc3a1d70b","frontmatter":{"title":"Why Logic Programming?","categories":["cs"],"tags":["logic programming","racket","rosette","datalog"]},"fields":{"slug":"/blog/2020/07/15/cs/why-logic-programming/"}}},{"node":{"id":"97bb49ed-2ce6-588c-bd14-86dcecaa2116","frontmatter":{"title":"NOTE: Algebra Structure","categories":["math"],"tags":["note","algebra structure","magma","semigroup","monoid","group"]},"fields":{"slug":"/blog/2020/07/12/math/algebra-structure/"}}}]}},"pageContext":{"slug":"/blog/2019/11/09/cs/abstraction-of-programming-design/"}}}