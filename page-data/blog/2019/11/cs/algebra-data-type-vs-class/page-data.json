{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/11/cs/algebra-data-type-vs-class/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>I have a long time thought that algebra data type(ADT) is must need.</p>\n<p>In <code class=\"language-text\">Haskell</code>, ADT looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Term</span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">Variable</span> <span class=\"token constant\">String</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Lambda</span> <span class=\"token constant\">String</span> <span class=\"token constant\">Term</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Application</span> <span class=\"token constant\">Term</span> <span class=\"token constant\">Term</span></code></pre></div>\n<p>And let's see how to do the same thing in <code class=\"language-text\">Scala</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> Term\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Variable<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Term\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Lambda<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> Term<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Term\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Application<span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> Term<span class=\"token punctuation\">,</span> arg<span class=\"token operator\">:</span> Term<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Term</code></pre></div>\n<p>Both of them are used to represent the <code class=\"language-text\">Term</code> of lambda calculus.</p>\n<p>They look the same. I can't say that is wrong, but two syntaxes actually have different: extendability.</p>\n<p>Let's say when we use these <code class=\"language-text\">Term</code> to do static analysis. When we report an error, we usually want to show where does the error happens, so we have to update our <code class=\"language-text\">Term</code> definition, in <code class=\"language-text\">Haskell</code>, it's annoying.</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Term</span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">Variable</span> <span class=\"token constant\">Location</span> <span class=\"token constant\">String</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Lambda</span> <span class=\"token constant\">Location</span> <span class=\"token constant\">String</span> <span class=\"token constant\">Term</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Application</span> <span class=\"token constant\">Location</span> <span class=\"token constant\">Term</span> <span class=\"token constant\">Term</span>\n<span class=\"token operator\">#</span> <span class=\"token builtin\">and</span> <span class=\"token hvariable\">when</span> <span class=\"token hvariable\">matching</span>\n<span class=\"token keyword\">case</span> <span class=\"token hvariable\">term</span> <span class=\"token keyword\">of</span>\n  <span class=\"token constant\">Variable</span> <span class=\"token hvariable\">loc</span> <span class=\"token hvariable\">name</span> <span class=\"token operator\">-></span> <span class=\"token operator\">#</span> <span class=\"token operator\">...</span>\n  <span class=\"token constant\">Lambda</span> <span class=\"token hvariable\">loc</span> <span class=\"token hvariable\">parameter</span> <span class=\"token hvariable\">body</span> <span class=\"token operator\">-></span> <span class=\"token operator\">#</span> <span class=\"token operator\">...</span>\n  <span class=\"token operator\">#</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>If you already use it everywhere, you would get crazy. Since you have to update every pattern-matching related to <code class=\"language-text\">Term</code>.</p>\n<p>Oh, we can prevent this. But must do this from the beginning:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Term</span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">Term</span> <span class=\"token punctuation\">{</span><span class=\"token hvariable\">location</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Location</span><span class=\"token punctuation\">,</span>\n        <span class=\"token hvariable\">value</span> <span class=\"token operator\">::</span> <span class=\"token constant\">TermValue</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">data</span> <span class=\"token constant\">TermValue</span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">Variable</span> <span class=\"token constant\">String</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Lambda</span> <span class=\"token constant\">String</span> <span class=\"token constant\">Term</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Application</span> <span class=\"token constant\">Term</span> <span class=\"token constant\">Term</span></code></pre></div>\n<p>Otherwise when you want to change it later, good luck.</p>\n<p>But in <code class=\"language-text\">Scala</code>, things different.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">sealed</span> <span class=\"token keyword\">class</span> Term <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> location<span class=\"token operator\">:</span> Location <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Location\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Variable<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Term\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Lambda<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> Term<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Term\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Application<span class=\"token punctuation\">(</span>func<span class=\"token operator\">:</span> Term<span class=\"token punctuation\">,</span> arg<span class=\"token operator\">:</span> Term<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Term</code></pre></div>\n<p>I'm not trying to show a full workable version(that anyway would be complex in any language). But showing that <code class=\"language-text\">class</code> help us to add a new field so easily. And proof that <code class=\"language-text\">class</code> can totally replace algebra data type.</p>","frontmatter":{"title":"Algebra data type vs Class","categories":["cs"],"tags":["plt","scala","haskell"]}}},"pageContext":{"slug":"/blog/2019/11/cs/algebra-data-type-vs-class/"}}}