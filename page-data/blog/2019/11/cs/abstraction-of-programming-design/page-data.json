{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/11/cs/abstraction-of-programming-design/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>這是一篇重看 2017 年發的系列文 (這裡是第一篇 <a href=\"https://routedan.blogspot.com/2017/02/atm-ps.html\">routedan.blogspot.com/2017/02/atm-ps.html</a>) 之後決定重寫的文章</p>\n<p>之所以決定重來，是因為以現在我的角度來看，當初寫得太過 Java Spec，並且設計流程相當的缺乏建構領域模型的概念</p>\n<p>針對第一點，我決定用 Scheme 作為開發語言，來讓讀者理解程式語言並非重點所在，深入學習語言的特殊技巧確實有用，但卻與程式設計的核心無關 (當然，這並不是說無視語言擁有的抽象機制寫程式是好事)</p>\n<p>Scheme 是相當小巧的語言，小巧到我可以寫個 <a href=\"https://github.com/dannypsnl/little-scheme\">直譯器</a> 來執行 (不過這裡我還是用 Racket，畢竟要做完全部的功能實在太麻煩了)</p>\n<p>對第二個問題我決定先從建立概念的領域語言開始這次的設計 (雖說借鑒 Domain Driven Design 但不會完全用一樣的描述方式，是說他有規定一定要怎麼做嗎？)</p>\n<p>那麼，在開始之前我們必須學習一點必要的 Scheme，首先，Scheme 有一個稍稍特別的語法叫 S Expression，基本上就是一個長 <code class=\"language-text\">(a b c)</code> 這樣的玩意兒</p>\n<p>那麼 S Expression 是怎麼運用的呢？我們可以用實際案例來理解：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; 6</span>\n<span class=\"token comment\">;;; 注意 'x 等同 (quote x) 在 scheme 中程式碼即資料 (同像性)</span>\n<span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (1 2 3)</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (1 2 3)</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> <span class=\"token string\">'[1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span>]<span class=\"token punctuation\">)</span> <span class=\"token comment\">; 1，順帶一提 [] 等同 ()</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; (2 3)</span></code></pre></div>\n<p>可以看到跟常見的中序語法 (<code class=\"language-text\">1 + 2</code> 這種) 不同之處在於函數被放到了最前面</p>\n<p>接著我們看定義新的變數的方式</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token comment\">;;; 1</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> x <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 2</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">add</span> x y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 3</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> add <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>第一種會定義一個變數，第二與第三的意思其實是一樣的，只是直接綁定一個函數給名稱(第三個)，或是用了語法糖(第二個)</p>\n<p>沒錯，我們所需要的先導知識就只有這樣，其餘的部分會在用到的時候再提</p>\n<p>現在讓我們進入設計的部分，首先我們要為 ATM 這個存在建立模型，這個模型會影響很長一段時間內我們對這個問題的看法，進而影響實作的方式(極度糟糕的設計甚至可以讓你根本寫不出想要的結果)</p>\n<p>思考一下，ATM 外在的行為是什麼？我們可以提款(withdraw)、存款(deposit)、查詢餘額(check balances)、查詢紀錄(query record)，而這些行為都是在操作交易紀錄，可以總結為以下的規則：</p>\n<ol>\n<li>withdraw/deposit 增加交易紀錄</li>\n<li>check balances 會使用交易紀錄計算出自己需要的結果 (餘額)</li>\n<li>query record 列出所有交易紀錄</li>\n</ol>\n<p>現在讓我們先寫下三個定義，放進 <code class=\"language-text\">app.rkt</code> 中 (前置提醒，所有的檔案都要在第一行聲明 <code class=\"language-text\">#lang racket</code>，因為 Racket 實際上支援數種語言的變體)</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> withdraw <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> deposit <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> check-balances <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> query-record <span class=\"token string\">'empty</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>這些函式還沒有用處，它們必須操作某種裝態才能夠產生效果，而在這裡我們給予它們的目標就是交易紀錄(list of transaction)</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> list-of-transaction ‘<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> money<span class=\"token punctuation\">)</span>\n  [set! list-of-transaction <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'withdraw</span> money<span class=\"token punctuation\">)</span> list-of-transaction<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> money<span class=\"token punctuation\">)</span>\n  [set! list-of-transaction <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'deposit</span> money<span class=\"token punctuation\">)</span> list-of-transaction<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span>\n  [let <span class=\"token punctuation\">(</span>\n    [sum <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">left</span> right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'withdraw</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'deposit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        <span class=\"token comment\">; 遇到不在意的 transaction 我們就跳過</span>\n        [else right]\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ]\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">foldr</span> sum <span class=\"token number\">0</span> list-of-transaction<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; 直接印出 list-of-transaction</span>\n[pretty-print list-of-transaction]<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">check-balances</code> 裡面我們突然用了好幾個新的概念，但在解釋細節之前，讓我們看看這些函式用起來的感覺如何</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; result: '((withdraw . 2000) (withdraw . 1000) (deposit . 30000))</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">pretty-print</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; result: 27000</span></code></pre></div>\n<p>這一段程式碼相當直觀的展示了我們做了什麼操作，這樣的形式非常適合拿來寫測試，這也是為什麼我要從最核心的概念開始這個教學</p>\n<p>現在我們可以回到 <code class=\"language-text\">check-balances</code> 了，我們一共採用了 3 個前面沒提到的東西 (真的要說其實只有兩個，這個等下就會知道)</p>\n<ol>\n<li>let binding</li>\n<li>cond</li>\n<li>foldr</li>\n</ol>\n<p>我們從 let binding 開始談起，(let (‘binding…) ‘expression…)， … 表示一至多個，binding 由 (‘name ‘init-expression) 組成，而我們其實可以把它視為 lambda 的變換，下面展示這種變換：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">x</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>] x<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 等於</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">x</span><span class=\"token punctuation\">)</span> x<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>當然，這個語法之所以存在就是因為這個變換並不好寫的關係，所以不要沒事改成 lambda 的寫法 (不過這就是為什麼其實只有兩個新東西)</p>\n<p><code class=\"language-text\">cond</code> 是 Scheme 的條件式之一，它接收一些 clause，回傳第一個成功的 clause 的結果，每個 clause 都由 ('predicate ‘expression…) 組成，注意在 Scheme 裡，多個表達式存在於一個地方的時候回傳值是最後一個表達式的值，換句話說如果中間表達式不具副作用(side effect)那就是沒有意義的程式：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; result: 2</span>\n<span class=\"token comment\">;;; 永遠都沒有 1 的事</span></code></pre></div>\n<p><code class=\"language-text\">foldr</code> 是一個從後面往前 <code class=\"language-text\">fold</code> 的函式，它接收一個雙參數函式跟初始值以及要折疊的 list，可以從 <code class=\"language-text\">sum</code> 的定義裡看出 <code class=\"language-text\">right</code> 代表我們當前的折疊結果(初始值是第二個參數)，而 <code class=\"language-text\">left</code> 是當前要處理的元素</p>\n<p>那麼我們也將進入第二階段：測試 了</p>\n<p>現在我們有一組 ATM 的核心功能，但我們在可預見的未來內就會對它們進行修改 (因為全域變數的存在，事實上如果可以的話，我建議在程式內不要試圖去操作全域變數)，也因此我們必須要開始編寫簡單的測試來保證程式的關鍵功能沒有被破壞</p>\n<p>現在建立一個 <code class=\"language-text\">test.rkt</code> 裡面放入</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"app.rkt\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>一執行了 <code class=\"language-text\">test.rkt</code> 就會發現這有問題，我們會得到主程式運行的結果，然而這絕非我們預期的測試所需要的行為，所以我們要拆分 <code class=\"language-text\">app.rkt</code> 成兩個檔案 <code class=\"language-text\">app.rkt</code>與 <code class=\"language-text\">atm.rkt</code></p>\n<p>在 <code class=\"language-text\">app.rkt</code> 中我們只留下：</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"atm.rkt\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">30000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">write</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在 <code class=\"language-text\">atm.rkt</code> 中必須加入下面的程式來 export 這些函數 (不要忘記 <code class=\"language-text\">#lang racket</code> 喔)</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> withdraw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> deposit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> check-balances<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> query-record<span class=\"token punctuation\">)</span></code></pre></div>\n<p>作為運行範例，並且理所當然的 <code class=\"language-text\">test.rkt</code> 改為引入 <code class=\"language-text\">atm.rkt</code></p>\n<p>接著我們要建立一個簡單的測試框架作為接下來測試所使用的工具</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">require</span> <span class=\"token string\">\"atm.rkt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> list-of-test-failure <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> actual expect<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> actual expect<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token function\">void</span><span class=\"token punctuation\">)</span>\n    [set! list-of-test-failure [cons <span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token string\">'not-equal</span> <span class=\"token string\">'actual</span> actual <span class=\"token string\">'expect</span> expect<span class=\"token punctuation\">)</span> list-of-test-failure]]<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">;;; first test</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">null?</span> list-of-test-failure<span class=\"token punctuation\">)</span>\n  <span class=\"token string\">'test-pass</span>\n  list-of-test-failure<span class=\"token punctuation\">)</span></code></pre></div>\n<p>我們做了一個簡單的回報錯誤框架 (感謝 Scheme 簡短的語法，只要 8 行就有這麼不錯的效果)，現在讓我們加入第二個測試</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>很不幸的是這次我們會得到：<code class=\"language-text\">((not-equal actual 4000 expect 1000))</code></p>\n<p>這是為什麼呢？因為我們的核心函式總是修改同一個全域的紀錄，這使得每次的測試之間其實都不是獨立的；然而當我們閱讀測試的時候，必然不希望每次都需要閱讀大量的前後文才能正確的理解結果；因此我們必須要修改核心的函式</p>\n<p>p.s. 事實上如果真實世界的測試寫成這樣也不可能讀得完，也無法修改。最後成為所有人的惡夢，因為這個測試總是失敗，也沒辦法修復，最後剩下不改相關的程式的結局</p>\n<p>所以這裡要引入一個新的結構 <code class=\"language-text\">struct</code> 用來暫存我們的狀態</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token function\">provide</span> tran<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token function\">struct</span> tran <span class=\"token punctuation\">(</span><span class=\"token function\">[list</span> #:auto #:mutable]<span class=\"token punctuation\">)</span>\n  #:auto-value <span class=\"token punctuation\">'</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  #:transparent<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">;;; 並修改操作函數</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">withdraw</span> tr money<span class=\"token punctuation\">)</span>\n  [set-tran-list! tr <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'withdraw</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> tr money<span class=\"token punctuation\">)</span>\n  [set-tran-list! tr <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">cons</span> <span class=\"token string\">'deposit</span> money<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span> tr<span class=\"token punctuation\">)</span>\n  [let <span class=\"token punctuation\">(</span>\n    [sum <span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token function\">left</span> right<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'withdraw</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        [<span class=\"token punctuation\">(</span><span class=\"token function\">equal?</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">car</span> left<span class=\"token punctuation\">)</span> <span class=\"token string\">'deposit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span> right <span class=\"token punctuation\">(</span><span class=\"token builtin\">cdr</span> left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n        <span class=\"token comment\">; 遇到不在意的 transaction 我們就跳過</span>\n        [else right]\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ]\n  <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">foldr</span> sum <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">define</span> <span class=\"token punctuation\">(</span><span class=\"token function\">query-record</span> tr<span class=\"token punctuation\">)</span>\n  [pretty-print <span class=\"token punctuation\">(</span><span class=\"token function\">tran-list</span> tr<span class=\"token punctuation\">)</span>]<span class=\"token punctuation\">)</span></code></pre></div>\n<p>現在我們的 <code class=\"language-text\">test.rkt</code> 變成</p>\n<div class=\"gatsby-highlight\" data-language=\"scheme\"><pre class=\"language-scheme\"><code class=\"language-scheme\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> [<span class=\"token punctuation\">(</span><span class=\"token function\">tr</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tran</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>]\n  <span class=\"token punctuation\">(</span><span class=\"token function\">deposit</span> tr <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token function\">assert-eq</span> <span class=\"token punctuation\">(</span><span class=\"token function\">check-balances</span> tr<span class=\"token punctuation\">)</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我們藉由引入一個變數去除了共用全域變數的衝突</p>\n<p>p.s. 注意 <code class=\"language-text\">app.rkt</code> 也要一起修改，這裡就不多費口舌</p>\n<p><code class=\"language-text\">p.s. set-tran-list!</code> 跟 <code class=\"language-text\">tran-list</code> 都是由 Racket 替我們生成的函數，有興趣看細節的可以看：<a href=\"https://docs.racket-lang.org/reference/define-struct.html\">docs.racket-lang.org/reference/define-struct.html</a> 這裡我就不介紹了</p>\n<p><a href=\"/blog/cs/abstraction-of-programming-design-2-user-interface/\">下一篇</a>會加入使用者操作的部分，see you next time</p>\n<p>參考：</p>\n<ul>\n<li><a href=\"https://docs.racket-lang.org/\">docs.racket-lang.org</a></li>\n</ul>","frontmatter":{"title":"程式設計思考（一）核心領域","categories":["cs"],"tags":["programming","beginner","racket"]}}},"pageContext":{"slug":"/blog/2019/11/cs/abstraction-of-programming-design/"}}}