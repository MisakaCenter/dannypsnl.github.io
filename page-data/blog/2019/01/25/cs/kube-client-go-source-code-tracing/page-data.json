{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/01/25/cs/kube-client-go-source-code-tracing/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Whole thing is started from <strong>Ingress</strong> this feature of <strong>Kubernetes</strong>.\nBut today I'm not going to talk too much about it, basically just I have to let <strong>Ingress Controller</strong>\nwill send packets to our <strong>Router</strong> so that we could do the thing we want,\nif you are interested in our <strong>Router</strong>, you can more infos from <a href=\"https://glasnostic.com/blog\">our blog</a> and\ndemo by just login to play with it.</p>\n<p>Anyway, the thing I'm going to do for this is I have to create a proxy for real kubernetes API server,\nand modify the real data to what we want. To do that, I have to understand how <a href=\"https://github.com/kubernetes/client-go\">client-go</a>\n(<strong>Ingress</strong> use client-go to get info, of course) send requests and what it expected. Let's start!</p>\n<blockquote>\n<p>NOTE: I just mention some part of codes, not explaining whole big piture</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">\tepEventHandler <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span>ResourceEventHandlerFuncs<span class=\"token punctuation\">{</span>\n\t\tAddFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tupdateCh<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> Event<span class=\"token punctuation\">{</span>\n\t\t\t\tType<span class=\"token punctuation\">:</span> CreateEvent<span class=\"token punctuation\">,</span>\n\t\t\t\tObj<span class=\"token punctuation\">:</span>  obj<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tDeleteFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tupdateCh<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> Event<span class=\"token punctuation\">{</span>\n\t\t\t\tType<span class=\"token punctuation\">:</span> DeleteEvent<span class=\"token punctuation\">,</span>\n\t\t\t\tObj<span class=\"token punctuation\">:</span>  obj<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tUpdateFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">,</span> cur <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\toep <span class=\"token operator\">:=</span> old<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">)</span>\n\t\t\tcep <span class=\"token operator\">:=</span> cur<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>cep<span class=\"token punctuation\">.</span>Subsets<span class=\"token punctuation\">,</span> oep<span class=\"token punctuation\">.</span>Subsets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tupdateCh<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> Event<span class=\"token punctuation\">{</span>\n\t\t\t\t\tType<span class=\"token punctuation\">:</span> UpdateEvent<span class=\"token punctuation\">,</span>\n\t\t\t\t\tObj<span class=\"token punctuation\">:</span>  cur<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These codes at <a href=\"https://github.com/kubernetes/ingress-nginx\">ingress-nginx</a> tag <code class=\"language-text\">nginx-v0.20.0</code>(at following context we just use this tag),\nfile <code class=\"language-text\">internal/ingress/controller/store/store.go</code> line <code class=\"language-text\">446</code></p>\n<p>The purpose is emit these callbacks into <code class=\"language-text\">SharedInformer</code> to get kubernetes events for updating the datas in store,\nto generate nginx configuration for load balancing these pods.</p>\n<p>Ok, so where we use <code class=\"language-text\">epEventHandler</code>? We would see it be passed into <code class=\"language-text\">store.informers.Endpoint</code> at\nthe same function, line <code class=\"language-text\">519</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">store<span class=\"token punctuation\">.</span>informers<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">.</span><span class=\"token function\">AddEventHandler</span><span class=\"token punctuation\">(</span>epEventHandler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we should care two things</p>\n<ul>\n<li>what is <code class=\"language-text\">Endpoint</code>?</li>\n<li>how it use the functions sent into <code class=\"language-text\">AddEventHandler</code>?</li>\n</ul>\n<p>Let's keep dig into the code, we would see <code class=\"language-text\">AddEventHandler</code> is a method of an <code class=\"language-text\">interface</code>: <code class=\"language-text\">SharedInformer</code>,\nyes, we just talk about it, now we see it. <code class=\"language-text\">SharedInformer</code> is defined under <code class=\"language-text\">k8s.io/client-go/tools/cache/shared_informer.go</code>\n(remember, here what I'm tracing is the <code class=\"language-text\">client-go</code> under <code class=\"language-text\">ingress-nginx</code> vendor, so it might outdate with latest <code class=\"language-text\">client-go</code>)</p>\n<p>The only implementor of <code class=\"language-text\">SharedInformer</code> is <code class=\"language-text\">sharedIndexInformer</code>(still at same file),\nit's a structure, here is the real code of <code class=\"language-text\">AddEventHandler</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>sharedIndexInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">AddEventHandler</span><span class=\"token punctuation\">(</span>handler ResourceEventHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">AddEventHandlerWithResyncPeriod</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>defaultEventHandlerResyncPeriod<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>sharedIndexInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">AddEventHandlerWithResyncPeriod</span><span class=\"token punctuation\">(</span>handler ResourceEventHandler<span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore, here would do some period syncing</span>\n\tlistener <span class=\"token operator\">:=</span> <span class=\"token function\">newProcessListener</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> resyncPeriod<span class=\"token punctuation\">,</span> <span class=\"token function\">determineResyncPeriod</span><span class=\"token punctuation\">(</span>resyncPeriod<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>resyncCheckPeriod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialBufferSize<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ignore, here would emit `listener` into `processer`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newProcessListener</span><span class=\"token punctuation\">(</span>handler ResourceEventHandler<span class=\"token punctuation\">,</span> requestedResyncPeriod<span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> now time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> bufferSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>processorListener <span class=\"token punctuation\">{</span>\n\tret <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>processorListener<span class=\"token punctuation\">{</span>\n\t\tnextCh<span class=\"token punctuation\">:</span>                <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\taddCh<span class=\"token punctuation\">:</span>                 <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\thandler<span class=\"token punctuation\">:</span>               handler<span class=\"token punctuation\">,</span>\n\t\tpendingNotifications<span class=\"token punctuation\">:</span>  <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">NewRingGrowing</span><span class=\"token punctuation\">(</span>bufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trequestedResyncPeriod<span class=\"token punctuation\">:</span> requestedResyncPeriod<span class=\"token punctuation\">,</span>\n\t\tresyncPeriod<span class=\"token punctuation\">:</span>          resyncPeriod<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tret<span class=\"token punctuation\">.</span><span class=\"token function\">determineNextResync</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To here, we should stop this part, because we can't get more from these.\nSo I go back to how to use <code class=\"language-text\">sharedIndexInformer</code></p>\n<p>I found type of <code class=\"language-text\">store.informers</code> have a method <code class=\"language-text\">Run</code> that would be called by store,\nthat's mean what it call is the point we care, that's <code class=\"language-text\">store.informers.Endpoint</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span>Informer<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// this is *sharedIndexInformer.Run</span>\n\t<span class=\"token keyword\">go</span> i<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ignore, all resource is working under the same way</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>sharedIndexInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// this is last line, I ignore others codes</span>\n\ts<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then I take a look at how controller works</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Run begins processing items, and will continue until a value is sent down stopCh.</span>\n<span class=\"token comment\">// It's an error to call Run more than once.</span>\n<span class=\"token comment\">// Run blocks; call via go.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>controller<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> utilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleCrash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">&lt;-</span>stopCh\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">NewReflector</span><span class=\"token punctuation\">(</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ListerWatcher<span class=\"token punctuation\">,</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ObjectType<span class=\"token punctuation\">,</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">,</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>FullResyncPeriod<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span>ShouldResync <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ShouldResync\n\tr<span class=\"token punctuation\">.</span>clock <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>clock\n\n\tc<span class=\"token punctuation\">.</span>reflectorMutex<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>reflector <span class=\"token operator\">=</span> r\n\tc<span class=\"token punctuation\">.</span>reflectorMutex<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> wg wait<span class=\"token punctuation\">.</span>Group\n\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">StartWithChannel</span><span class=\"token punctuation\">(</span>stopCh<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Run<span class=\"token punctuation\">)</span>\n\n\twait<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>processLoop<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> stopCh<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The point is <code class=\"language-text\">wg.StartWithChannel(stopCh, r.Run)</code>, in <code class=\"language-text\">reflector.Run</code>,\nit call <code class=\"language-text\">r.ListAndWatch(stopCh)</code>, and <code class=\"language-text\">ListAndWatch</code> is based on <code class=\"language-text\">listWatcher</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">list<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>listerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: Failed to list %v: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We would go back here later, let's find out what is <code class=\"language-text\">listerWatcher</code></p>\n<p>We set <code class=\"language-text\">store.informers.Endpoint</code> by this <code class=\"language-text\">store.informers.Endpoint = infFactory.Core().V1().Endpoints().Informer()</code> at\n<code class=\"language-text\">internal/ingress/controller/store/store.go:L264</code></p>\n<p>Then we see <code class=\"language-text\">infFactory</code>, line <code class=\"language-text\">257</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">infFactory <span class=\"token operator\">:=</span> informers<span class=\"token punctuation\">.</span><span class=\"token function\">NewSharedInformerFactoryWithOptions</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> resyncPeriod<span class=\"token punctuation\">,</span>\n\tinformers<span class=\"token punctuation\">.</span><span class=\"token function\">WithNamespace</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tinformers<span class=\"token punctuation\">.</span><span class=\"token function\">WithTweakListOptions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">informer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>endpointsInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">Informer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> cache<span class=\"token punctuation\">.</span>SharedIndexInformer <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">InformerFor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>defaultInformer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// defaultInformer</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>endpointsInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">defaultInformer</span><span class=\"token punctuation\">(</span>client kubernetes<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> cache<span class=\"token punctuation\">.</span>SharedIndexInformer <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">NewFilteredEndpointsInformer</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>namespace<span class=\"token punctuation\">,</span> resyncPeriod<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>Indexers<span class=\"token punctuation\">{</span>cache<span class=\"token punctuation\">.</span>NamespaceIndex<span class=\"token punctuation\">:</span> cache<span class=\"token punctuation\">.</span>MetaNamespaceIndexFunc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>tweakListOptions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// NewFilteredEndpointsInformer</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewFilteredEndpointsInformer</span><span class=\"token punctuation\">(</span>client kubernetes<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> namespace <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> indexers cache<span class=\"token punctuation\">.</span>Indexers<span class=\"token punctuation\">,</span> tweakListOptions internalinterfaces<span class=\"token punctuation\">.</span>TweakListOptionsFunc<span class=\"token punctuation\">)</span> cache<span class=\"token punctuation\">.</span>SharedIndexInformer <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">NewSharedIndexInformer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&amp;</span>cache<span class=\"token punctuation\">.</span>ListWatch<span class=\"token punctuation\">{</span>\n\t\t\tListFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>options metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> tweakListOptions <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">tweakListOptions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">CoreV1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Endpoints</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\tWatchFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>options metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>watch<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> tweakListOptions <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">tweakListOptions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">CoreV1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Endpoints</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">&amp;</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tresyncPeriod<span class=\"token punctuation\">,</span>\n\t\tindexers<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ha, we got <code class=\"language-text\">ListWatch</code> now, it would call an instance of <code class=\"language-text\">*kubernetes.ClientSet</code> to get the info it wanted!</p>\n<p>Now we can back to <code class=\"language-text\">ListAndWatch</code>, let's take a look at the details of it.</p>\n<p>In fact, I'm more focused on watch API, because it's a little bit weird.\nI found it's server with keep sending data until client part close the connection.\nHow it did it? At <code class=\"language-text\">k8s.io/client-go/tools/cache/reflector.go:L226</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// give the stopCh a chance to stop the loop, even in case of continue statements further down on errors</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stopCh<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\ttimeoutSeconds <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>minWatchTimeout<span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Float64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\toptions <span class=\"token operator\">=</span> metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">{</span>\n\t\t\tResourceVersion<span class=\"token punctuation\">:</span> resourceVersion<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">// We want to avoid situations of hanging watchers. Stop any wachers that do not</span>\n\t\t\t<span class=\"token comment\">// receive any events within the timeout window.</span>\n\t\t\tTimeoutSeconds<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>timeoutSeconds<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tr<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>numberOfWatches<span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tw<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>listerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">switch</span> err <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> io<span class=\"token punctuation\">.</span>EOF<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token comment\">// watch closed normally</span>\n\t\t\t<span class=\"token keyword\">case</span> io<span class=\"token punctuation\">.</span>ErrUnexpectedEOF<span class=\"token punctuation\">:</span>\n\t\t\t\tglog<span class=\"token punctuation\">.</span><span class=\"token function\">V</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Infof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: Watch for %v closed with unexpected EOF: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\t\tutilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: Failed to watch %v: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// If this is \"connection refused\" error, it means that most likely apiserver is not responsive.</span>\n\t\t\t<span class=\"token comment\">// It doesn't make sense to re-list all objects because most likely we will be able to restart</span>\n\t\t\t<span class=\"token comment\">// watch where we ended.</span>\n\t\t\t<span class=\"token comment\">// If that's the case wait and resend watch request.</span>\n\t\t\t<span class=\"token keyword\">if</span> urlError<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>url<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> opError<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> urlError<span class=\"token punctuation\">.</span>Err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>net<span class=\"token punctuation\">.</span>OpError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> errno<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> opError<span class=\"token punctuation\">.</span>Err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">.</span>Errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> syscall<span class=\"token punctuation\">.</span>ECONNREFUSED <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">watchHandler</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>resourceVersion<span class=\"token punctuation\">,</span> resyncerrc<span class=\"token punctuation\">,</span> stopCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> errorStopRequested <span class=\"token punctuation\">{</span>\n\t\t\t\tglog<span class=\"token punctuation\">.</span><span class=\"token function\">Warningf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: watch of %v ended with: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course is a endless loop, would stop by channel or return.</p>\n<p>The tricky part is it check error content, if it's a probable EOF, it would keep taking data rather stop connection.</p>\n<p>Ok, everything seems make sense right now, but that's not enough, I'm very confused by why it could receiving a JSON data by\nsuch as a streaming way, so let's go back to see <code class=\"language-text\">client.CoreV1().Endpoints(namespace).Watch(options)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Watch returns a watch.Interface that watches the requested endpoints.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>endpoints<span class=\"token punctuation\">)</span> <span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>opts metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>watch<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\topts<span class=\"token punctuation\">.</span>Watch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">Namespace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>ns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"endpoints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">VersionedParams</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>opts<span class=\"token punctuation\">,</span> scheme<span class=\"token punctuation\">.</span>ParameterCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Watch attempts to begin watching the requested location.</span>\n<span class=\"token comment\">// Returns a watch.Interface, or an error.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>watch<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">WatchWithSpecificDecoders</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>body io<span class=\"token punctuation\">.</span>ReadCloser<span class=\"token punctuation\">)</span> streaming<span class=\"token punctuation\">.</span>Decoder <span class=\"token punctuation\">{</span>\n\t\t\tframer <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>serializers<span class=\"token punctuation\">.</span>Framer<span class=\"token punctuation\">.</span><span class=\"token function\">NewFrameReader</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> streaming<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>framer<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>serializers<span class=\"token punctuation\">.</span>StreamingSerializer<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tr<span class=\"token punctuation\">.</span>serializers<span class=\"token punctuation\">.</span>Decoder<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And I found the point is <code class=\"language-text\">r.serializers</code>, and the shit thing is it still is a function send by external code.</p>\n<p>If you trace back then you would find it's from <code class=\"language-text\">*RESTClient.serializers</code>,\nat <code class=\"language-text\">k8s.io/client-go/rest/client.go</code>, line <code class=\"language-text\">225</code> and <code class=\"language-text\">227</code> send this into <code class=\"language-text\">NewRequest</code></p>\n<p>And you found it's created at line <code class=\"language-text\">108</code> in same file, <code class=\"language-text\">serializers, err := createSerializers(config)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">createSerializers</span><span class=\"token punctuation\">(</span>config ContentConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Serializers<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore, we don't care them since we just use `StreamSerializer` of `Serializers`</span>\n\t<span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>StreamSerializer <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">.</span>StreamingSerializer <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>StreamSerializer<span class=\"token punctuation\">.</span>Serializer\n\t\ts<span class=\"token punctuation\">.</span>Framer <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>StreamSerializer<span class=\"token punctuation\">.</span>Framer\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We would see the type of <code class=\"language-text\">StreamSerializer</code> is <code class=\"language-text\">runtime.Serializer</code>, it's an interface, and since we are sending JSON data,\nso we go to the JSON one implementor of it to see it's <code class=\"language-text\">Decode</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\tjsoniter <span class=\"token string\">\"github.com/json-iterator/go\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>After see that, I know the trace already done, because my question already been answered, them use <code class=\"language-text\">github.com/json-iterator/go</code> this library</p>\n<p>I guess I would talk about something about how to create a kube API proxy with modifying datas after completing my proxy of kube API server.\n(It's really hard XD)</p>\n<p>I guess today the most interesting thing we learned is Go <code class=\"language-text\">*http.Response</code> is a <code class=\"language-text\">ReadCloser</code>!(How Kubernetes done their watch trick)</p>\n<p>Anyway, thanks for read, hope these could help you more detailed understanding Kubernetes client implementation\nand be a little start point to read more about it.</p>","frontmatter":{"title":"Tracing source code of Kubernetes client-go","categories":["cs"],"tags":["kubernetes","golang"]}},"allMarkdownRemark":{"edges":[{"node":{"id":"546863be-ba1c-595e-8370-eb774f31f60c","frontmatter":{"title":"lexer 原理解釋","categories":["cs"],"tags":["compiler","lexer","golang"]},"fields":{"slug":"/blog/2017/07/08/cs/lexer-explains/"}}},{"node":{"id":"5072ada0-29d8-500b-8371-f80533ab27b0","frontmatter":{"title":"Vim replace","categories":["cs"],"tags":["vim"]},"fields":{"slug":"/blog/2017/10/24/cs/vim-replace/"}}},{"node":{"id":"28754ab9-bc87-5304-83d9-11586ee70fce","frontmatter":{"title":"C++ thread 基礎","categories":["cs"],"tags":["cpp","thread"]},"fields":{"slug":"/blog/2017/06/26/cs/cpp-thread-basic/"}}},{"node":{"id":"d191956f-b5bb-5c3f-993a-eacec934f193","frontmatter":{"title":"llvm Go bindings","categories":["cs"],"tags":["llvm","golang"]},"fields":{"slug":"/blog/2017/12/04/cs/llvm-go-bindings/"}}},{"node":{"id":"e34022aa-be3f-504a-9cc9-b222c3b6e52b","frontmatter":{"title":"Type driven development in C++","categories":["cs"],"tags":["cpp"]},"fields":{"slug":"/blog/2017/12/23/cs/type-driven-development-in-cpp/"}}},{"node":{"id":"6cf1b36b-fed7-5566-84f6-64f596c0568f","frontmatter":{"title":"OpenCV introduction","categories":["cs"],"tags":["OpenCV","cpp"]},"fields":{"slug":"/blog/2018/02/08/cs/opencv-introduction/"}}},{"node":{"id":"e507df39-a49c-5c75-a4c4-507de675ce52","frontmatter":{"title":"ANTLR v4--introduction","categories":["cs"],"tags":["antlr4"]},"fields":{"slug":"/blog/2017/09/03/cs/introduction-of-antlr4/"}}},{"node":{"id":"08473604-caaf-538c-a9ac-633842a5eb3a","frontmatter":{"title":"You should know about `this`","categories":["cs"],"tags":["javascript"]},"fields":{"slug":"/blog/2018/02/09/cs/you-should-know-about-this/"}}},{"node":{"id":"fd161ad4-402d-58bd-8190-08e44075694a","frontmatter":{"title":"Erlang Quick Start","categories":["cs"],"tags":["erlang"]},"fields":{"slug":"/blog/2018/01/05/cs/erlang-quick-start/"}}},{"node":{"id":"a379d931-4a5a-50cf-b87a-29c36bf0bfca","frontmatter":{"title":"Sort by interface in Go","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/02/14/cs/sort-by-interface-in-go/"}}},{"node":{"id":"44c9e7e4-a19a-5f18-98f6-b6105e3ceb1c","frontmatter":{"title":"The best practice of Singleton in Golang","categories":["cs"],"tags":["golang","DesignPattern"]},"fields":{"slug":"/blog/2018/02/12/cs/singleton-best-practice-in-golang/"}}},{"node":{"id":"843f70c9-b9bc-52c0-920f-8ebec90635fe","frontmatter":{"title":"Create a WaitGroup by yourself","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/02/15/cs/create-a-wait-group-by-yourself-and-do-not-use-it/"}}},{"node":{"id":"c16962e8-fa69-54e8-bb2b-c781a2eabd46","frontmatter":{"title":"Nginx 安裝與啟動","categories":["cs"],"tags":["nginx","web"]},"fields":{"slug":"/blog/2018/04/02/cs/nginx-run-and-up/"}}},{"node":{"id":"49fd1e2e-1554-5d24-ae01-66e647e77df8","frontmatter":{"title":"Phoneix 安裝與啟動","categories":["cs"],"tags":["phoenix","elixir","web"]},"fields":{"slug":"/blog/2018/03/31/cs/phoenix-run-and-up/"}}},{"node":{"id":"b22b2e98-3a62-5e3a-b698-5b6521ea8c3f","frontmatter":{"title":"Introduction Of Char Recognizing -- Lexer Tech","categories":["cs"],"tags":["compiler","lexer","rust"]},"fields":{"slug":"/blog/2018/02/25/cs/introduction-of-char-recognizing-lexer-tech/"}}},{"node":{"id":"7aadac41-a6ef-595c-adb3-fe7349045f54","frontmatter":{"title":"How to disable Go test caching","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/03/17/cs/how-to-disable-go-test-caching/"}}},{"node":{"id":"5d5d1de0-f7e4-50de-a930-599e3cd895b3","frontmatter":{"title":"Some thinking from Elixir X Ruby Conf","categories":["cs"],"tags":["elixir"]},"fields":{"slug":"/blog/2018/05/01/cs/elixir-ruby-conf-2018-thinking/"}}},{"node":{"id":"c1666f78-5ad1-5fcc-9142-1f14a81b6079","frontmatter":{"title":"Go Channels 入門","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/04/23/cs/go-channel-introduction/"}}},{"node":{"id":"c8c71a5e-7c2f-5503-b2f1-ac0620db1157","frontmatter":{"title":"Design of Redux-go v2","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/05/17/cs/design-of-redux-go-v2/"}}},{"node":{"id":"67df5cf3-7b75-52a0-bf1b-0e9a81cb0cb0","frontmatter":{"title":"How to getting start with Rust","categories":["cs"],"tags":["rust"]},"fields":{"slug":"/blog/2018/05/26/cs/getting-start-with-rust/"}}},{"node":{"id":"765d1f5a-a9e2-5773-b81d-6fa2a465e86b","frontmatter":{"title":"Error is Value","categories":["cs"],"tags":["golang","errors"]},"fields":{"slug":"/blog/2018/06/22/cs/error-is-value/"}}},{"node":{"id":"ec13d746-3be7-5ec5-8cc2-9f5773c784ee","frontmatter":{"title":"Practical issue about DNS -- EDNS0","categories":["cs"],"tags":["networking","dns","golang"]},"fields":{"slug":"/blog/2018/08/07/cs/practical-issue-about-dns-edns0/"}}},{"node":{"id":"d6e6b1cc-7b50-59af-b3dd-1e2d1bd5fb5e","frontmatter":{"title":"Reflection in Go: create a stack[T]","categories":["cs"],"tags":["golang","reflection"]},"fields":{"slug":"/blog/2018/07/22/cs/reflection-in-go-create-a-stack-t/"}}},{"node":{"id":"a82969d9-e24d-5361-8fdf-797bd2415044","frontmatter":{"title":"gRPC quick start in Go","categories":["cs"],"tags":["networking","gRPC","golang"]},"fields":{"slug":"/blog/2018/08/16/cs/gRPC-basic-tutorial/"}}},{"node":{"id":"03ff243a-28ff-5c17-93bc-5acbf8aa87df","frontmatter":{"title":"Mark Sweep GC","categories":["cs"],"tags":["gc"]},"fields":{"slug":"/blog/2018/09/03/cs/mark-sweep/"}}},{"node":{"id":"b2e1114a-0574-582d-801f-ea4a99e96feb","frontmatter":{"title":"Use httpexpect to test server","categories":["cs"],"tags":["http","testing","networking","golang"]},"fields":{"slug":"/blog/2018/09/16/cs/httpexpect-go/"}}},{"node":{"id":"30f863fb-545c-5fdf-8fbe-bf908eb73753","frontmatter":{"title":"Go quick start","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/09/23/cs/golang-quick-start/"}}},{"node":{"id":"292b53ea-c5a7-551b-8607-b920c50d4c6e","frontmatter":{"title":"Test LLVM Go binding in travis","categories":["cs"],"tags":["llvm","golang","testing","travis"]},"fields":{"slug":"/blog/2018/10/06/cs/test-llvm-go-binding-in-travis/"}}},{"node":{"id":"948da191-2170-532c-9e7a-61104f546f7a","frontmatter":{"title":"Testing in Go","categories":["cs"],"tags":["golang","testing","debug"]},"fields":{"slug":"/blog/2018/11/17/cs/testing-in-go/"}}},{"node":{"id":"9fd83d10-85ca-5ed3-9416-599e3d54d4c6","frontmatter":{"title":"Kubernetes 從 Pod 開始","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/10/27/cs/kubernetes-start-from-pod/"}}},{"node":{"id":"2d6b2494-ee64-5f20-a82a-f73f14882cee","frontmatter":{"title":"fun networking: tcp close","categories":["cs"],"tags":["workrecord","networking","tcp"]},"fields":{"slug":"/blog/2018/11/30/cs/fun-network-tcp-close/"}}},{"node":{"id":"b69e04f4-45ce-5dff-9a51-3fd54d7f2136","frontmatter":{"title":"XDP some note","categories":["cs"],"tags":["networking","xdp"]},"fields":{"slug":"/blog/2018/11/30/cs/xdp-some-note/"}}},{"node":{"id":"092c8346-aeb9-5615-9d86-7d331ef2cace","frontmatter":{"title":"Kubernetes context","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/12/09/cs/kubernetes-context/"}}},{"node":{"id":"8de033ca-f3ad-5b21-b998-6f31085d5c9e","frontmatter":{"title":"Should I learn?","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2018/12/22/cs/should-i-learn/"}}},{"node":{"id":"cee81faa-22ef-5571-8540-e84fbfd9f710","frontmatter":{"title":"How to compare Go benchmark in TravisCI","categories":["cs"],"tags":["golang","testing","travis"]},"fields":{"slug":"/blog/2018/12/28/cs/golang-benchmark-compare/"}}},{"node":{"id":"0644a550-53f6-545c-9659-35a85d899494","frontmatter":{"title":"Introduction of LLDB","categories":["cs"],"tags":["tool","debugger","lldb"]},"fields":{"slug":"/blog/2019/03/17/cs/introduction-of-lldb/"}}},{"node":{"id":"05bd5f1b-bc76-5625-a764-e0d3c71b402f","frontmatter":{"title":"Make googletest-like test framework from scratch","categories":["cs"],"tags":["metaprogramming","cpp"]},"fields":{"slug":"/blog/2019/03/03/cs/make-googletest-like-test-framework-from-scratch/"}}},{"node":{"id":"7755f76a-3458-5764-9f50-68c4ffb0a6c9","frontmatter":{"title":"gRPC proxy: approach & pain","categories":["cs"],"tags":["gRPC"]},"fields":{"slug":"/blog/2019/04/13/cs/grpc-proxy-approach-and-pain/"}}},{"node":{"id":"9a3c9420-dd65-579b-bbe6-04cdd5654b91","frontmatter":{"title":"Write a hashmap in Go","categories":["cs"],"tags":["data-structure","golang"]},"fields":{"slug":"/blog/2019/04/04/cs/write-hashmap-in-go/"}}},{"node":{"id":"f1b55b8d-f933-5627-8717-d62ef5dbe2f8","frontmatter":{"title":"戴德金分割與1為何等於0.9...(無限循環)","categories":["math"],"tags":["dedekind","dedekind cut"]},"fields":{"slug":"/blog/2019/03/01/math/dedekind-cut-and-application/"}}},{"node":{"id":"fd5f04d7-405c-5e7d-8ab6-3ccdc0bce760","frontmatter":{"title":"HugePages on Kubernetes","categories":["cs"],"tags":["workrecord","hugepages","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/04/cs/hugepages-on-kubernetes/"}}},{"node":{"id":"58d36ae9-d194-5fac-bc24-d0c9730866bf","frontmatter":{"title":"5 tools for file transfer","categories":["cs"],"tags":["tool"]},"fields":{"slug":"/blog/2019/04/27/cs/five-tools-for-file-transfer/"}}},{"node":{"id":"49d97e32-8a97-5e60-8c30-c78c403bba0d","frontmatter":{"title":"tcpdump cheat sheet","categories":["cs"],"tags":["tcpdump","networking"]},"fields":{"slug":"/blog/2019/06/25/cs/tcpdump-cheat-sheet/"}}},{"node":{"id":"9c683f4e-7281-5153-a08a-a50b6ee05b88","frontmatter":{"title":"The Go concurrency bug I made","categories":["cs"],"tags":["golang","concurrency","workrecord"]},"fields":{"slug":"/blog/2019/05/25/cs/golang-concurrency-bug-i-made/"}}},{"node":{"id":"a74742e1-23ff-5977-bdfc-5f74842b234c","frontmatter":{"title":"A simple way to ensure interface won't be implemented accidently","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2019/06/18/cs/simple-way-to-ensure-go-interface-wont-be-implement-accidently/"}}},{"node":{"id":"bbf87cca-106e-5d96-a27d-a4f68a7cf012","frontmatter":{"title":"How trait with lifetime can be a trouble and how to fix it","categories":["cs"],"tags":["rust","rust lifetime"]},"fields":{"slug":"/blog/2019/07/31/cs/how-lifetime-trait-can-be-trouble-and-how-to-fix-it/"}}},{"node":{"id":"739889c2-58d8-5632-9bc4-1518751e52a6","frontmatter":{"title":"Notes: Ruby Conf Taiwan 2019","categories":["cs"],"tags":["language","gc"]},"fields":{"slug":"/blog/2019/08/13/cs/ruby-conf-taiwan-2019/"}}},{"node":{"id":"4e62b250-d25f-5c39-bd18-2d5b3514461b","frontmatter":{"title":"cgo can be a trouble","categories":["cs"],"tags":["golang","cgo"]},"fields":{"slug":"/blog/2019/08/15/cs/cgo-can-be-a-trouble/"}}},{"node":{"id":"10eb1882-d25b-532e-90b3-ba31c0ae4de0","frontmatter":{"title":"nix report","categories":["cs"],"tags":["nix","shell"]},"fields":{"slug":"/blog/2019/09/12/cs/nix-report/"}}},{"node":{"id":"778b403e-0913-55b6-8631-8f709c3190a4","frontmatter":{"title":"DPDK -- EAL Input/output error","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/18/cs/dpdk-input-output-error/"}}},{"node":{"id":"c21bfb9e-3ed2-5312-8652-c28945f78f52","frontmatter":{"title":"Why not a big script","categories":["cs"],"tags":["shell"]},"fields":{"slug":"/blog/2019/10/05/cs/why-not-big-script/"}}},{"node":{"id":"af72f2b3-cd09-547a-bce0-9cfef54189d7","frontmatter":{"title":"DPDK usertools: devbind","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/19/cs/dpdk-usertools-devbind/"}}},{"node":{"id":"ad56e808-8f85-55ad-9aa7-34f5336e6d4a","frontmatter":{"title":"Privileged Pod -- Debug kubernetes node","categories":["cs"],"tags":["kubernetes","debug"]},"fields":{"slug":"/blog/2019/09/01/cs/privileged-pod/"}}},{"node":{"id":"d1844995-f98a-582d-8034-1261c2538134","frontmatter":{"title":"How to use .gitignore","categories":["cs"],"tags":["git"]},"fields":{"slug":"/blog/2019/11/08/cs/how-to-use-gitignore/"}}},{"node":{"id":"55cd1966-fe9a-5d8e-a7bc-613b82ea53cc","frontmatter":{"title":"Weird behavior in Go: encoding/gob","categories":["cs"],"tags":["gob","golang","workrecord"]},"fields":{"slug":"/blog/2019/10/31/cs/weird-behavior-gob/"}}},{"node":{"id":"e7effcba-43fa-55a2-a9a4-3ae56227bb4d","frontmatter":{"title":"Reflection on Working effectively with legacy code --- Part I","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/11/24/cs/reflection-on-working-effectively-with-legacy-code-part-one/"}}},{"node":{"id":"9f3948b2-bb63-5a4f-9c9c-0a1fadfc3517","frontmatter":{"title":"Mergeable replicated data types","categories":["cs"],"tags":["paper","data-structure"]},"fields":{"slug":"/blog/2019/11/30/cs/mergeable-replicated-data-types/"}}},{"node":{"id":"95cd04e7-3518-5f09-bc15-b481e5502ab8","frontmatter":{"title":"Algebra data type vs Class","categories":["cs"],"tags":["plt","scala","haskell"]},"fields":{"slug":"/blog/2019/11/19/cs/algebra-data-type-vs-class/"}}},{"node":{"id":"f12f1f8a-6de2-51da-8f8a-d323a92b3549","frontmatter":{"title":"Infinite Type","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/infinite-type/"}}},{"node":{"id":"5e569bcc-7ad2-5200-921e-a0ce3b17a773","frontmatter":{"title":"NOTE: If we write kubernetes client in Rust","categories":["cs"],"tags":["note","programming","kubernetes","rust"]},"fields":{"slug":"/blog/2019/12/13/cs/if-write-kube-client-go-in-rust/"}}},{"node":{"id":"a2137fb4-59cf-577d-b07f-a829d4f6882c","frontmatter":{"title":"How to test in Haskell: HSpec setup","categories":["cs"],"tags":["haskell","beginner","testing"]},"fields":{"slug":"/blog/2019/12/14/cs/how-to-test-haskell/"}}},{"node":{"id":"785de266-a84d-57e3-b119-46a5f7e0114a","frontmatter":{"title":"NOTE: get labels from Pod","categories":["cs"],"tags":["note","kubernetes"]},"fields":{"slug":"/blog/2019/12/20/cs/note-get-labels-from-pod/"}}},{"node":{"id":"de3bd99a-2f0c-5473-a853-21523d01dbb5","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 20 to 23","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/04/cs/reflection-on-working-effectively-with-legacy-code-ch-20-23/"}}},{"node":{"id":"d74e85e7-1028-51d0-add9-0c0ea37c4cb6","frontmatter":{"title":"TDD is not silver bullet","categories":["cs"],"tags":["programming"]},"fields":{"slug":"/blog/2020/01/11/cs/tdd-is-not-silver-bullet/"}}},{"node":{"id":"d4e2efd2-4da2-54dd-9e46-544abf0f1953","frontmatter":{"title":"NOTE: What is lambda calculus","categories":["cs"],"tags":["note","plt","utlc"]},"fields":{"slug":"/blog/2020/01/01/cs/note-what-is-lambda-calculus/"}}},{"node":{"id":"44eb6dda-c3e9-54fb-a251-b415fb08b49f","frontmatter":{"title":"NOTE: a little bit Z3 solver","categories":["cs"],"tags":["note","smt","z3"]},"fields":{"slug":"/blog/2020/01/24/cs/note-a-little-bit-z3-solver/"}}},{"node":{"id":"2a3dbf6d-50c5-5b0e-b4c2-4890cfc650a0","frontmatter":{"title":"NOTE: C++ optional","categories":["cs"],"tags":["note","cpp","language"]},"fields":{"slug":"/blog/2020/01/26/cs/note-cpp-optional/"}}},{"node":{"id":"f4cd1802-ad9e-5d80-81f0-79f85515f2cd","frontmatter":{"title":"NOTE: bounded polymorphism","categories":["cs"],"tags":["note","plt","language","haskell"]},"fields":{"slug":"/blog/2020/01/24/cs/note-bound-polymorphism/"}}},{"node":{"id":"e5f1b03a-f5cd-5b9b-aa1f-499ea2076fac","frontmatter":{"title":"一些推薦去嘗試看看的程式語言","categories":["cs"],"tags":["language"]},"fields":{"slug":"/blog/2020/02/06/cs/suggested-languages/"}}},{"node":{"id":"ec5fd544-7096-5098-89a6-0f06a873d47e","frontmatter":{"title":"不會騎 Gogoro 的兩個鄉巴佬","categories":["funny"],"tags":["life"]},"fields":{"slug":"/blog/2020/01/31/funny/two-idiots-who-cant-ride-gogoro/"}}},{"node":{"id":"10e9c6f2-3474-5ebc-99d2-5c4a97f879ea","frontmatter":{"title":"Binary Encoding of Integer","categories":["cs"],"tags":["fundamental"]},"fields":{"slug":"/blog/2020/03/21/cs/binary-encoding-of-interger/"}}},{"node":{"id":"e2302e39-eea1-5df3-90a6-ef060120cf9e","frontmatter":{"title":"小說推薦：天防者","categories":["book"],"tags":["novel","recommend","skyward","Brandon Sanderson"]},"fields":{"slug":"/blog/2020/04/01/book/recommend-novel-skyward/"}}},{"node":{"id":"80d44a1a-1a60-5d93-bf71-d21cbe6d796c","frontmatter":{"title":"NOTE: class member initialization order in C++","categories":["cs"],"tags":["note","cpp","class member","initialization","language"]},"fields":{"slug":"/blog/2020/04/13/cs/note-cpp-member-initialize-order/"}}},{"node":{"id":"ed391a8d-358b-56e3-b55c-f0fd90492aa8","frontmatter":{"title":"NOTE: Seven Bridges of Königsberg and Eulerian graph","categories":["math"],"tags":["note","topology","graph","Eulerian path","Eulerian circuit"]},"fields":{"slug":"/blog/2020/04/03/math/note-seven-bridges-of-konigsberg-eulerian-path/"}}},{"node":{"id":"047ac64e-b55c-5043-adae-1d5c9321c5cd","frontmatter":{"title":"NOTE: how to install Nix package manager on MacOS Catalina","categories":["cs"],"tags":["note","nix","macos","catalina"]},"fields":{"slug":"/blog/2020/04/17/cs/note-how-to-install-nix-on-macos-catalina/"}}},{"node":{"id":"c6c52b5a-8170-508f-b887-6b1ce2f6ecda","frontmatter":{"title":"How to parse expression with the parser combinator","categories":["cs"],"tags":["compiler","parser","racket"]},"fields":{"slug":"/blog/2020/05/03/cs/how-to-parse-expression-with-parser-combinator/"}}},{"node":{"id":"eff65ed1-fdb8-5069-919f-3983784e1344","frontmatter":{"title":"A beautiful proof: There have infinite primes","categories":["math"],"tags":["prime"]},"fields":{"slug":"/blog/2020/05/09/math/a-beautiful-proof-there-have-infinite-primes/"}}},{"node":{"id":"a30fc310-d412-5f36-95c3-0aee1ea000ae","frontmatter":{"title":"奶油白醬義大利麵","categories":["recipe"],"tags":["spaghetti","white sauce"]},"fields":{"slug":"/blog/2020/05/10/recipe/spaghetti/"}}},{"node":{"id":"0ad29589-2261-5f8f-a0f6-0ef61d5a4833","frontmatter":{"title":"NOTE: 演算法的各種時間複雜度","categories":["cs"],"tags":["note","algorithm","time complexity"]},"fields":{"slug":"/blog/2020/05/12/cs/algorithm-time-complexity/"}}},{"node":{"id":"4bc528e2-46d3-5ff9-9ef6-cd2036d9d741","frontmatter":{"title":"NOTE: 樸素集合論三大悖論","categories":["math"],"tags":["note","set theory","paradox","type theory"]},"fields":{"slug":"/blog/2020/05/31/math/set-theory-three-paradox/"}}},{"node":{"id":"67ccc98d-872a-548d-bec9-c1edd2297252","frontmatter":{"title":"Currying","categories":["cs"],"tags":["racket","macro"]},"fields":{"slug":"/blog/2020/05/31/cs/currying/"}}},{"node":{"id":"f49e05b7-906e-5dca-87d5-2a3d39e773db","frontmatter":{"title":"大阪燒","categories":["recipe"],"tags":["okonomiyaki"]},"fields":{"slug":"/blog/2020/06/17/recipe/recipe-okonomiyaki/"}}},{"node":{"id":"b8aae0b8-d789-57eb-b671-75bfa2f4290d","frontmatter":{"title":"NOTE: 演算法的量級","categories":["cs"],"tags":["note","algorithm","order"]},"fields":{"slug":"/blog/2020/06/20/cs/algorithm-order/"}}},{"node":{"id":"c6c0c8c1-db91-54c9-8929-78658c2a90dd","frontmatter":{"title":"NOTE: lambda 2","categories":["cs"],"tags":["note","plt","lambda 2"]},"fields":{"slug":"/blog/2020/06/12/cs/second-order-typed-lambda-calculus/"}}},{"node":{"id":"203837be-04fc-567d-9450-33a3f6b02872","frontmatter":{"title":"NOTE: ZFC","categories":["math"],"tags":["note","set theory"]},"fields":{"slug":"/blog/2020/06/11/math/note-zfc/"}}},{"node":{"id":"8dce6fe3-902a-5b3d-9d14-2e302cf0bef5","frontmatter":{"title":"小說推薦：優質國度","categories":["book"],"tags":["novel","recommend","Quality Land"]},"fields":{"slug":"/blog/2020/07/03/book/recommend-novel-quality-land/"}}},{"node":{"id":"a3447c9d-20fc-58e9-a993-f25b1f2b0d8a","frontmatter":{"title":"Extension hack","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/extension-hack/"}}},{"node":{"id":"3c3130a0-7b7a-5b3f-9f3c-9a23ed88cc72","frontmatter":{"title":"Swift --extension概念入門","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/swift-extension/"}}},{"node":{"id":"13404fcc-084f-5f56-8938-c72eb8e96c94","frontmatter":{"title":"Tracing source code of Kubernetes client-go","categories":["cs"],"tags":["kubernetes","golang"]},"fields":{"slug":"/blog/2019/01/25/cs/kube-client-go-source-code-tracing/"}}},{"node":{"id":"24cddb21-779c-545e-aff0-dd840418c8d2","frontmatter":{"title":"最後一次抱怨 Go","categories":["cs"],"tags":["golang","language"]},"fields":{"slug":"/blog/2020/01/19/cs/last-time-complain-about-go/"}}},{"node":{"id":"460001d0-2e11-586f-a331-e7294c963060","frontmatter":{"title":"A Racket macro tutorial -- get HTTP parameters easier","categories":["cs"],"tags":["racket","metaprogramming","macro"]},"fields":{"slug":"/blog/2020/02/16/cs/a-racket-macro-tutorial-get-http-parameters-easier/"}}},{"node":{"id":"d0e1e323-7ade-5a75-8c86-dbfd7f94861b","frontmatter":{"title":"Programming 生涯回顧","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2020/05/13/cs/programming-life-retro/"}}},{"node":{"id":"c029b0a3-b626-5758-b8e5-b6a38c781376","frontmatter":{"title":"Kubernetes Networking: concept and overview from underlying perspective","categories":["cs"],"tags":["networking","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/18/cs/kubernetes-networking-concept-and-overview/"}}},{"node":{"id":"bc080f44-1eaf-5efd-a61a-ff3f1da28b84","frontmatter":{"title":"From Functor to Applicative","categories":["cs"],"tags":["plt","applicative","language","haskell"]},"fields":{"slug":"/blog/2020/04/11/cs/from-functor-to-applicative/"}}},{"node":{"id":"757f6fbc-6d36-5b3f-989e-ef792d13aa7e","frontmatter":{"title":"NOTE: simply typed lambda calculus","categories":["cs"],"tags":["note","plt","stlc"]},"fields":{"slug":"/blog/2020/03/08/cs/note-stlc/"}}},{"node":{"id":"0bbd48f9-b7ac-5fbe-85f5-19ca3fa12734","frontmatter":{"title":"Type as Constraint: Why we need more type?","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2020/01/16/cs/type-as-constraint-why-we-need-more-type/"}}},{"node":{"id":"2a45e9d5-898d-59d4-84d4-f96458edfd2e","frontmatter":{"title":"程式設計思考（二）操作介面","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/"}}},{"node":{"id":"06cc88f1-000b-506b-8afb-0ba5409f5da1","frontmatter":{"title":"Haskell quick start","categories":["cs"],"tags":["haskell","beginner","plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/haskell-quick-start/"}}},{"node":{"id":"846c66d5-4f4a-5544-9491-fdc1671be380","frontmatter":{"title":"From Infinite Type to Functor","categories":["cs"],"tags":["plt","functor","language","haskell"]},"fields":{"slug":"/blog/2019/12/13/cs/from-infinite-type-to-functor/"}}},{"node":{"id":"b88e5107-daac-51de-aace-b9d13d01c5d1","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 6 to 10","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/12/07/cs/reflection-on-working-effectively-with-legacy-code-ch-6-10/"}}},{"node":{"id":"b9b6191e-1aa2-557b-9cbc-fcf4f689fe93","frontmatter":{"title":"Hindley-Milner type system: Incrementally build way & Make new language in Racket","categories":["cs"],"tags":["plt","hindley milner","racket"]},"fields":{"slug":"/blog/2020/05/24/cs/hindley-milner-system-incremental-build-and-make-new-language/"}}},{"node":{"id":"6759bad6-0b3f-5a19-b865-ee89d50703b4","frontmatter":{"title":"Magic in redux-go v2.1: package rematch","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/07/04/cs/magic-in-redux-go-2.1/"}}},{"node":{"id":"45c7c10b-ebe7-5f8a-9bb8-8384c90744cf","frontmatter":{"title":"Interaction with C in Zig","categories":["cs"],"tags":["zig","c","language"]},"fields":{"slug":"/blog/2019/12/22/cs/interaction-with-c-in-zig/"}}},{"node":{"id":"bce44484-82be-5531-bbc8-a9e1bc59076c","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 11 to 19","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/03/cs/reflection-on-working-effectively-with-legacy-code-ch-11-19/"}}},{"node":{"id":"602307b1-7619-55ee-91f4-b488361ff1fd","frontmatter":{"title":"程式設計思考（一）核心領域","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2019/11/09/cs/abstraction-of-programming-design/"}}},{"node":{"id":"d29c9aa1-2b7f-531a-868a-ccdca6371411","frontmatter":{"title":"De Bruijn index: why and how","categories":["cs"],"tags":["plt","de bruijn index","racket"]},"fields":{"slug":"/blog/2020/05/16/cs/de-bruijn-index/"}}},{"node":{"id":"29b4fcc7-cbe5-57fd-a9c5-7a18c62d8ee6","frontmatter":{"title":"正確實作 substitution 有多難","categories":["cs"],"tags":["plt","utlc"]},"fields":{"slug":"/blog/2020/06/04/cs/how-hard-can-implement-substitution-correctly-be/"}}},{"node":{"id":"ab571f39-a304-515c-9e56-c4bdc3a1d70b","frontmatter":{"title":"Why Logic Programming?","categories":["cs"],"tags":["logic programming","racket","rosette","datalog"]},"fields":{"slug":"/blog/2020/07/15/cs/why-logic-programming/"}}},{"node":{"id":"97bb49ed-2ce6-588c-bd14-86dcecaa2116","frontmatter":{"title":"NOTE: Algebra Structure","categories":["math"],"tags":["note","algebra structure","magma","semigroup","monoid","group"]},"fields":{"slug":"/blog/2020/07/12/math/algebra-structure/"}}}]}},"pageContext":{"slug":"/blog/2019/01/25/cs/kube-client-go-source-code-tracing/"}}}