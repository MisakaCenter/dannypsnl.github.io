{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/12/07/cs/reflection-on-working-effectively-with-legacy-code-ch-6-10/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>At <a href=\"/blog/2019/11/24/cs/reflection-on-working-effectively-with-legacy-code-part-one/\">part I</a> we basically understand why we need to test, how to test legacy code and what tools can we use. Chapter 6 to 10 mentions more practicing issues that would face in real jobs.</p>\n<p>First, we quickly overview all content:</p>\n<ul>\n<li>Chapter 6: I Don’t Have Much Time and I Have to Change It</li>\n<li>Chapter 7: It Takes Forever to Make a Change</li>\n<li>Chapter 8: How Do I Add a Feature?</li>\n<li>Chapter 9: I Can’t Get This Class into a Test Harness</li>\n<li>Chapter 10: I Can’t Run This Method in a Test Harness</li>\n</ul>\n<h3>Chapter 6: I Don’t Have Much Time and I Have to Change It</h3>\n<p>The author describes a common question about testing, many people thought the time spent on the test might not be needed by the job on hand, because the deadline is coming. In my opinion, people's concern makes sense, just has a problem that they also don't do the test when they got time. I agree that when customers want to see the result immediately send a patch for them is important, this is not about technology, this is a business problem. But \"good\" testing helps the team in the future when they modify related code, and the best thing is we only have to write them once, they can run many times, that worth it. Ok, back to the situation, we must provide code change in three hours. In this case, the author provides a few tricks that allows us to add a test with quick fix:</p>\n<ol>\n<li>New method: It's hard to test existed code. But at least we can test those new.</li>\n<li>New class: When we can't create an instance of the original class in the deadline limit, we can create a new class and use it in the original class, then we can add a test for the new class safety. Here the author also mentions many people can't accept that create a new class just for this purpose, however, we probably can get a new concern for the design and improve the code, which gives us more than just testing.</li>\n<li>\n<p>Wrap method: rename your target method; create a new method using the target method's original name; call the target method in a new method and the new feature code we add. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// foo_code</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// refactor to</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">do_foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">new_feature_code</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function\">do_foo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// foo_code</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Wrap class: Well, I can't see what's different with the wrap method and this. Just extract in a different way. BTW, you might like to call it decorator if you love design patterns.</li>\n</ol>\n<h3>Chapter 7: It Takes Forever to Make a Change</h3>\n<p>There are many reasons make a lengthy modification:</p>\n<ol>\n<li>understanding code: The only point at here was if you can't understand your codebase well, reference chapter 16,17</li>\n<li>lag time: This is caused by bad toolchain. For example, compile spend 30 minutes. No laugh, that happens in many codebases like LLVM, Linux. In fact, the last time I compile the whole LLVM 8.0 takes 4 hours on my laptop. So we actually need an independent script to test certain components.</li>\n<li>Remove dependency: Some classes have too many dependencies let we can't remove them in an acceptable time. In this case, we better do not try to test all of them at once.</li>\n<li>Build dependency: Remove the build dependency to improve build time, but I mostly use Go, Rust, I have no idea with this. I think who use Java or C++ would need this.</li>\n</ol>\n<h3>Chapter 8: How Do I Add a Feature?</h3>\n<p>Facing legacy code, one of the most important considerations was the most code didn't have tests. Even worse, we can't simply put the test in. So most teams would fall back to the technologies described in chapter 6. Sure we can use them to add more code into legacy code but that's with danger. First, when using sprouting and wrapping we didn't do explicit change code, so we can't say the design was improved! Repeated code is another danger factor. If new code(with test) and old code have duplicate, and we didn't try to merge them, then the old code would never get tested. Furthermore, we could scare and don't want to touch the legacy code anymore since code didn't become better.</p>\n<p>Facing the problem is better than escape. Here the author shows some TDD examples if you don't know what is TDD, take a look at <a href=\"https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\">https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/</a></p>\n<p>The important thing here was <strong>programming by difference</strong>.</p>\n<h4>programming by difference</h4>\n<p>In Object-Oriented language, this means <strong>inherit</strong>. Consider a case, we have a class: <code class=\"language-text\">ast::Integer</code>. It has a method: <code class=\"language-text\">add</code>, and now we want to distinguish <code class=\"language-text\">int32</code> and <code class=\"language-text\">int64</code>. We can found that create new interface of function that effect signature would be crazy heavy jobs if we already use <code class=\"language-text\">Integer</code> everywhere. So one way we can try was <strong>inherit</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Integer</span> <span class=\"token punctuation\">{</span>\n  Integer <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token function\">is_int32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token function\">is_int64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Integer <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Integer <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Integer <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Integer <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Int32</span> <span class=\"token operator\">:</span> Integer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token function\">is_int32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token function\">is_int64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Int64</span> <span class=\"token operator\">:</span> Integer <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token function\">is_int32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">bool</span> <span class=\"token function\">is_int64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can mix <code class=\"language-text\">int32</code> and <code class=\"language-text\">int64</code> with the original signature.</p>\n<p>In this case <strong>inherit</strong> actually not bad. But at the most time, we shouldn't <strong>inherit</strong> and override a concrete method, in the book also describes how overriding a concrete method became a tragedy. So make sure every time we do that, we are ready to remove them as soon as possible.</p>\n<h3>Chapter 9: I Can’t Get This Class into a Test Harness</h3>\n<p>Well, if create an instance of a class is always easy, then the book would be shorter. Unfortunately, that was not true. We usually face four problems:</p>\n<ol>\n<li>Cannot create the instance of the class</li>\n<li>When the test dependent on the class it cannot build</li>\n<li>The constructor has a side effect</li>\n<li>The constructor has some important jobs and we want to test them</li>\n</ol>\n<p>Create a class instance can be annoying, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Foo(a: A, b: B, c: C)\nclass A(b: B, g: G)\nclass B(e: E, f: F)\nclass C(h: H, j: J, z: Z)</code></pre></div>\n<p>To remove these dependencies we have to change a lot of code, and what if we can't remove them? A good idea was we can fake them. So, let's take a look at a simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ConcreteCNI <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>ConcreteCNI<span class=\"token punctuation\">)</span> <span class=\"token function\">AddPod</span><span class=\"token punctuation\">(</span>podName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> limit <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>Limit<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewCluster</span><span class=\"token punctuation\">(</span>cni <span class=\"token operator\">*</span>ConcreteCNI<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cluster <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we want to test <code class=\"language-text\">Cluster</code>, that can be hard in current implementation, because we have no chances to use any no side effect <code class=\"language-text\">CNI</code>. So we have to add <strong>seam</strong>, by using <code class=\"language-text\">interface</code> we can insert fake objects as <code class=\"language-text\">CNI</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> CNI <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">AddPod</span><span class=\"token punctuation\">(</span>podName <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> limit <span class=\"token operator\">*</span>resource<span class=\"token punctuation\">.</span>Limit<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewCluster</span><span class=\"token punctuation\">(</span>cni CNI<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Cluster <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NewCluster(&amp;ConcreteCNI{})</span>\n<span class=\"token comment\">// NewCluster(&amp;FakeCNI{})</span></code></pre></div>\n<p>Now we can test <code class=\"language-text\">Cluster</code>. And if we found the testing target do not need <code class=\"language-text\">*ConcreteCNI</code>? Actually, we can use <code class=\"language-text\">NewCluster(nil)</code> in the test, just remember to simple or generalize the type used in constructor.</p>\n<p>I think examples here do not really need to read all of them. In fact, all of them are doing the same thing:</p>\n<ol>\n<li>remove dependencies</li>\n<li>make dependencies generalize</li>\n<li>remove global dependencies</li>\n</ol>\n<p>The key here is including dependencies, this happened in languages like: <code class=\"language-text\">C</code>, <code class=\"language-text\">C++</code>...</p>\n<p>If we are lucky guys, the following test should work:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;TestFramework></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Foo.hpp\"</span></span>\n\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>create<span class=\"token punctuation\">,</span> Foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  Foo foo<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, I don't why some people didn't like to include all the headers needed by the library. BUT IT ALWAYS HAPPENED.</p>\n<p>And in the end, the author mentions a case that if our interface almost one to one with a concrete class(no include fake for test one) is not a good design. BTW, Kubernetes has that one-to-one design. But that's because of the technology for solving this case isn't there in Go: <strong>inherit</strong>.</p>\n<p>Subtyping the original one as the fake object is the technology here.</p>\n<h3>Chapter 10: I Can’t Run This Method in a Test Harness</h3>\n<p>This chapter has no big difference with the previous one. We might face:</p>\n<ol>\n<li>Accessibility issue, e.g.: private method</li>\n<li>arguments of methods are hard to construct</li>\n<li>side effect</li>\n<li>We might need to test by the object used by functions.</li>\n</ol>\n<p>To solve the accessibility issue, first, we should consider is can we test it by some public methods? If we could then it's worth to do that, because a public method is how we use that code in the production codebase. This can help us reduce work, avoiding has to find a way to test with the private method. But sometimes we cannot make a private method became public. Here are two reasons:</p>\n<ol>\n<li>Clients didn't need it</li>\n<li>If the client code uses that method, it would against or affect the result of other methods in the class.</li>\n</ol>\n<p>For the first one, we can just make it public, if clients won't use it they won't use it.</p>\n<p>For the second one, we can extract it from the original class to a new class. Now it became public, and the design was improved. And remember do not try to use something like <strong>reflection</strong> to treat compiler and your eyes. It just hides the problem, not facing it.</p>\n<p>Sometimes, we would face the problem made by languages, for example: <code class=\"language-text\">sealed class</code>, <code class=\"language-text\">final class</code>, no generic type. For <code class=\"language-text\">sealed</code> or <code class=\"language-text\">final</code>, the solution is quite a direct, wrapping it, if you have some code use class <code class=\"language-text\">sealed class Foo</code> which does not allow you inherit it. Make a new class:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> MyFoo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's all.</p>\n<p>And sometimes, we have methods with signature: <code class=\"language-text\">(A, B, C): void</code>, the method returns nothing to us. Unfortunately, mainstream languages nowadays didn't make a feature correct, we should know the difference between <strong>procedure</strong> and <strong>function</strong>. Let's say <strong>procedure</strong> has side effect and <strong>function</strong> doesn't. Then we can test <strong>function</strong> without fear. And the most interesting thing is now we are trying to add an effect system back into languages. But we still can try to follow the rule: returns <code class=\"language-text\">void</code> for side effect function and no side effect in other. Remember safety is the most important when doing these changes.</p>\n<p>After we add the tests, we can make the production code better.</p>","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 6 to 10","categories":["cs"],"tags":["programming","testing"]}},"allMarkdownRemark":{"edges":[{"node":{"id":"c7e5cf37-9e4a-5437-b28b-2941b576bdd3","frontmatter":{"title":"How to find mk fixed point","categories":["cs"],"tags":["plt","utlc","fixed point"]},"fields":{"slug":"/blog/2020/07/26/cs/how-to-find-mk-fixed-point/"}}},{"node":{"id":"546863be-ba1c-595e-8370-eb774f31f60c","frontmatter":{"title":"lexer 原理解釋","categories":["cs"],"tags":["compiler","lexer","golang"]},"fields":{"slug":"/blog/2017/07/08/cs/lexer-explains/"}}},{"node":{"id":"e507df39-a49c-5c75-a4c4-507de675ce52","frontmatter":{"title":"ANTLR v4--introduction","categories":["cs"],"tags":["antlr4"]},"fields":{"slug":"/blog/2017/09/03/cs/introduction-of-antlr4/"}}},{"node":{"id":"5072ada0-29d8-500b-8371-f80533ab27b0","frontmatter":{"title":"Vim replace","categories":["cs"],"tags":["vim"]},"fields":{"slug":"/blog/2017/10/24/cs/vim-replace/"}}},{"node":{"id":"e34022aa-be3f-504a-9cc9-b222c3b6e52b","frontmatter":{"title":"Type driven development in C++","categories":["cs"],"tags":["cpp"]},"fields":{"slug":"/blog/2017/12/23/cs/type-driven-development-in-cpp/"}}},{"node":{"id":"d191956f-b5bb-5c3f-993a-eacec934f193","frontmatter":{"title":"llvm Go bindings","categories":["cs"],"tags":["llvm","golang"]},"fields":{"slug":"/blog/2017/12/04/cs/llvm-go-bindings/"}}},{"node":{"id":"28754ab9-bc87-5304-83d9-11586ee70fce","frontmatter":{"title":"C++ thread 基礎","categories":["cs"],"tags":["cpp","thread"]},"fields":{"slug":"/blog/2017/06/26/cs/cpp-thread-basic/"}}},{"node":{"id":"fd161ad4-402d-58bd-8190-08e44075694a","frontmatter":{"title":"Erlang Quick Start","categories":["cs"],"tags":["erlang"]},"fields":{"slug":"/blog/2018/01/05/cs/erlang-quick-start/"}}},{"node":{"id":"44c9e7e4-a19a-5f18-98f6-b6105e3ceb1c","frontmatter":{"title":"The best practice of Singleton in Golang","categories":["cs"],"tags":["golang","DesignPattern"]},"fields":{"slug":"/blog/2018/02/12/cs/singleton-best-practice-in-golang/"}}},{"node":{"id":"6cf1b36b-fed7-5566-84f6-64f596c0568f","frontmatter":{"title":"OpenCV introduction","categories":["cs"],"tags":["OpenCV","cpp"]},"fields":{"slug":"/blog/2018/02/08/cs/opencv-introduction/"}}},{"node":{"id":"08473604-caaf-538c-a9ac-633842a5eb3a","frontmatter":{"title":"You should know about `this`","categories":["cs"],"tags":["javascript"]},"fields":{"slug":"/blog/2018/02/09/cs/you-should-know-about-this/"}}},{"node":{"id":"a379d931-4a5a-50cf-b87a-29c36bf0bfca","frontmatter":{"title":"Sort by interface in Go","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/02/14/cs/sort-by-interface-in-go/"}}},{"node":{"id":"7aadac41-a6ef-595c-adb3-fe7349045f54","frontmatter":{"title":"How to disable Go test caching","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/03/17/cs/how-to-disable-go-test-caching/"}}},{"node":{"id":"b22b2e98-3a62-5e3a-b698-5b6521ea8c3f","frontmatter":{"title":"Introduction Of Char Recognizing -- Lexer Tech","categories":["cs"],"tags":["compiler","lexer","rust"]},"fields":{"slug":"/blog/2018/02/25/cs/introduction-of-char-recognizing-lexer-tech/"}}},{"node":{"id":"843f70c9-b9bc-52c0-920f-8ebec90635fe","frontmatter":{"title":"Create a WaitGroup by yourself","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/02/15/cs/create-a-wait-group-by-yourself-and-do-not-use-it/"}}},{"node":{"id":"49fd1e2e-1554-5d24-ae01-66e647e77df8","frontmatter":{"title":"Phoneix 安裝與啟動","categories":["cs"],"tags":["phoenix","elixir","web"]},"fields":{"slug":"/blog/2018/03/31/cs/phoenix-run-and-up/"}}},{"node":{"id":"c16962e8-fa69-54e8-bb2b-c781a2eabd46","frontmatter":{"title":"Nginx 安裝與啟動","categories":["cs"],"tags":["nginx","web"]},"fields":{"slug":"/blog/2018/04/02/cs/nginx-run-and-up/"}}},{"node":{"id":"67df5cf3-7b75-52a0-bf1b-0e9a81cb0cb0","frontmatter":{"title":"How to getting start with Rust","categories":["cs"],"tags":["rust"]},"fields":{"slug":"/blog/2018/05/26/cs/getting-start-with-rust/"}}},{"node":{"id":"c1666f78-5ad1-5fcc-9142-1f14a81b6079","frontmatter":{"title":"Go Channels 入門","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/04/23/cs/go-channel-introduction/"}}},{"node":{"id":"c8c71a5e-7c2f-5503-b2f1-ac0620db1157","frontmatter":{"title":"Design of Redux-go v2","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/05/17/cs/design-of-redux-go-v2/"}}},{"node":{"id":"765d1f5a-a9e2-5773-b81d-6fa2a465e86b","frontmatter":{"title":"Error is Value","categories":["cs"],"tags":["golang","errors"]},"fields":{"slug":"/blog/2018/06/22/cs/error-is-value/"}}},{"node":{"id":"5d5d1de0-f7e4-50de-a930-599e3cd895b3","frontmatter":{"title":"Some thinking from Elixir X Ruby Conf","categories":["cs"],"tags":["elixir"]},"fields":{"slug":"/blog/2018/05/01/cs/elixir-ruby-conf-2018-thinking/"}}},{"node":{"id":"ec13d746-3be7-5ec5-8cc2-9f5773c784ee","frontmatter":{"title":"Practical issue about DNS -- EDNS0","categories":["cs"],"tags":["networking","dns","golang"]},"fields":{"slug":"/blog/2018/08/07/cs/practical-issue-about-dns-edns0/"}}},{"node":{"id":"d6e6b1cc-7b50-59af-b3dd-1e2d1bd5fb5e","frontmatter":{"title":"Reflection in Go: create a stack[T]","categories":["cs"],"tags":["golang","reflection"]},"fields":{"slug":"/blog/2018/07/22/cs/reflection-in-go-create-a-stack-t/"}}},{"node":{"id":"a82969d9-e24d-5361-8fdf-797bd2415044","frontmatter":{"title":"gRPC quick start in Go","categories":["cs"],"tags":["networking","gRPC","golang"]},"fields":{"slug":"/blog/2018/08/16/cs/gRPC-basic-tutorial/"}}},{"node":{"id":"03ff243a-28ff-5c17-93bc-5acbf8aa87df","frontmatter":{"title":"Mark Sweep GC","categories":["cs"],"tags":["gc"]},"fields":{"slug":"/blog/2018/09/03/cs/mark-sweep/"}}},{"node":{"id":"b2e1114a-0574-582d-801f-ea4a99e96feb","frontmatter":{"title":"Use httpexpect to test server","categories":["cs"],"tags":["http","testing","networking","golang"]},"fields":{"slug":"/blog/2018/09/16/cs/httpexpect-go/"}}},{"node":{"id":"30f863fb-545c-5fdf-8fbe-bf908eb73753","frontmatter":{"title":"Go quick start","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/09/23/cs/golang-quick-start/"}}},{"node":{"id":"9fd83d10-85ca-5ed3-9416-599e3d54d4c6","frontmatter":{"title":"Kubernetes 從 Pod 開始","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/10/27/cs/kubernetes-start-from-pod/"}}},{"node":{"id":"2d6b2494-ee64-5f20-a82a-f73f14882cee","frontmatter":{"title":"fun networking: tcp close","categories":["cs"],"tags":["workrecord","networking","tcp"]},"fields":{"slug":"/blog/2018/11/30/cs/fun-network-tcp-close/"}}},{"node":{"id":"b69e04f4-45ce-5dff-9a51-3fd54d7f2136","frontmatter":{"title":"XDP some note","categories":["cs"],"tags":["networking","xdp"]},"fields":{"slug":"/blog/2018/11/30/cs/xdp-some-note/"}}},{"node":{"id":"292b53ea-c5a7-551b-8607-b920c50d4c6e","frontmatter":{"title":"Test LLVM Go binding in travis","categories":["cs"],"tags":["llvm","golang","testing","travis"]},"fields":{"slug":"/blog/2018/10/06/cs/test-llvm-go-binding-in-travis/"}}},{"node":{"id":"092c8346-aeb9-5615-9d86-7d331ef2cace","frontmatter":{"title":"Kubernetes context","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/12/09/cs/kubernetes-context/"}}},{"node":{"id":"948da191-2170-532c-9e7a-61104f546f7a","frontmatter":{"title":"Testing in Go","categories":["cs"],"tags":["golang","testing","debug"]},"fields":{"slug":"/blog/2018/11/17/cs/testing-in-go/"}}},{"node":{"id":"6759bad6-0b3f-5a19-b865-ee89d50703b4","frontmatter":{"title":"Magic in redux-go v2.1: package rematch","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/07/04/cs/magic-in-redux-go-2.1/"}}},{"node":{"id":"f1b55b8d-f933-5627-8717-d62ef5dbe2f8","frontmatter":{"title":"戴德金分割與1為何等於0.9...(無限循環)","categories":["math"],"tags":["dedekind","dedekind cut"]},"fields":{"slug":"/blog/2019/03/01/math/dedekind-cut-and-application/"}}},{"node":{"id":"8de033ca-f3ad-5b21-b998-6f31085d5c9e","frontmatter":{"title":"Should I learn?","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2018/12/22/cs/should-i-learn/"}}},{"node":{"id":"cee81faa-22ef-5571-8540-e84fbfd9f710","frontmatter":{"title":"How to compare Go benchmark in TravisCI","categories":["cs"],"tags":["golang","testing","travis"]},"fields":{"slug":"/blog/2018/12/28/cs/golang-benchmark-compare/"}}},{"node":{"id":"05bd5f1b-bc76-5625-a764-e0d3c71b402f","frontmatter":{"title":"Make googletest-like test framework from scratch","categories":["cs"],"tags":["metaprogramming","cpp"]},"fields":{"slug":"/blog/2019/03/03/cs/make-googletest-like-test-framework-from-scratch/"}}},{"node":{"id":"0644a550-53f6-545c-9659-35a85d899494","frontmatter":{"title":"Introduction of LLDB","categories":["cs"],"tags":["tool","debugger","lldb"]},"fields":{"slug":"/blog/2019/03/17/cs/introduction-of-lldb/"}}},{"node":{"id":"9a3c9420-dd65-579b-bbe6-04cdd5654b91","frontmatter":{"title":"Write a hashmap in Go","categories":["cs"],"tags":["data-structure","golang"]},"fields":{"slug":"/blog/2019/04/04/cs/write-hashmap-in-go/"}}},{"node":{"id":"58d36ae9-d194-5fac-bc24-d0c9730866bf","frontmatter":{"title":"5 tools for file transfer","categories":["cs"],"tags":["tool"]},"fields":{"slug":"/blog/2019/04/27/cs/five-tools-for-file-transfer/"}}},{"node":{"id":"fd5f04d7-405c-5e7d-8ab6-3ccdc0bce760","frontmatter":{"title":"HugePages on Kubernetes","categories":["cs"],"tags":["workrecord","hugepages","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/04/cs/hugepages-on-kubernetes/"}}},{"node":{"id":"7755f76a-3458-5764-9f50-68c4ffb0a6c9","frontmatter":{"title":"gRPC proxy: approach & pain","categories":["cs"],"tags":["gRPC"]},"fields":{"slug":"/blog/2019/04/13/cs/grpc-proxy-approach-and-pain/"}}},{"node":{"id":"a74742e1-23ff-5977-bdfc-5f74842b234c","frontmatter":{"title":"A simple way to ensure interface won't be implemented accidently","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2019/06/18/cs/simple-way-to-ensure-go-interface-wont-be-implement-accidently/"}}},{"node":{"id":"9c683f4e-7281-5153-a08a-a50b6ee05b88","frontmatter":{"title":"The Go concurrency bug I made","categories":["cs"],"tags":["golang","concurrency","workrecord"]},"fields":{"slug":"/blog/2019/05/25/cs/golang-concurrency-bug-i-made/"}}},{"node":{"id":"49d97e32-8a97-5e60-8c30-c78c403bba0d","frontmatter":{"title":"tcpdump cheat sheet","categories":["cs"],"tags":["tcpdump","networking"]},"fields":{"slug":"/blog/2019/06/25/cs/tcpdump-cheat-sheet/"}}},{"node":{"id":"bbf87cca-106e-5d96-a27d-a4f68a7cf012","frontmatter":{"title":"How trait with lifetime can be a trouble and how to fix it","categories":["cs"],"tags":["rust","rust lifetime"]},"fields":{"slug":"/blog/2019/07/31/cs/how-lifetime-trait-can-be-trouble-and-how-to-fix-it/"}}},{"node":{"id":"739889c2-58d8-5632-9bc4-1518751e52a6","frontmatter":{"title":"Notes: Ruby Conf Taiwan 2019","categories":["cs"],"tags":["language","gc"]},"fields":{"slug":"/blog/2019/08/13/cs/ruby-conf-taiwan-2019/"}}},{"node":{"id":"ad56e808-8f85-55ad-9aa7-34f5336e6d4a","frontmatter":{"title":"Privileged Pod -- Debug kubernetes node","categories":["cs"],"tags":["kubernetes","debug"]},"fields":{"slug":"/blog/2019/09/01/cs/privileged-pod/"}}},{"node":{"id":"4e62b250-d25f-5c39-bd18-2d5b3514461b","frontmatter":{"title":"cgo can be a trouble","categories":["cs"],"tags":["golang","cgo"]},"fields":{"slug":"/blog/2019/08/15/cs/cgo-can-be-a-trouble/"}}},{"node":{"id":"c21bfb9e-3ed2-5312-8652-c28945f78f52","frontmatter":{"title":"Why not a big script","categories":["cs"],"tags":["shell"]},"fields":{"slug":"/blog/2019/10/05/cs/why-not-big-script/"}}},{"node":{"id":"10eb1882-d25b-532e-90b3-ba31c0ae4de0","frontmatter":{"title":"nix report","categories":["cs"],"tags":["nix","shell"]},"fields":{"slug":"/blog/2019/09/12/cs/nix-report/"}}},{"node":{"id":"778b403e-0913-55b6-8631-8f709c3190a4","frontmatter":{"title":"DPDK -- EAL Input/output error","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/18/cs/dpdk-input-output-error/"}}},{"node":{"id":"d1844995-f98a-582d-8034-1261c2538134","frontmatter":{"title":"How to use .gitignore","categories":["cs"],"tags":["git"]},"fields":{"slug":"/blog/2019/11/08/cs/how-to-use-gitignore/"}}},{"node":{"id":"af72f2b3-cd09-547a-bce0-9cfef54189d7","frontmatter":{"title":"DPDK usertools: devbind","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/19/cs/dpdk-usertools-devbind/"}}},{"node":{"id":"55cd1966-fe9a-5d8e-a7bc-613b82ea53cc","frontmatter":{"title":"Weird behavior in Go: encoding/gob","categories":["cs"],"tags":["gob","golang","workrecord"]},"fields":{"slug":"/blog/2019/10/31/cs/weird-behavior-gob/"}}},{"node":{"id":"95cd04e7-3518-5f09-bc15-b481e5502ab8","frontmatter":{"title":"Algebra data type vs Class","categories":["cs"],"tags":["plt","scala","haskell"]},"fields":{"slug":"/blog/2019/11/19/cs/algebra-data-type-vs-class/"}}},{"node":{"id":"e7effcba-43fa-55a2-a9a4-3ae56227bb4d","frontmatter":{"title":"Reflection on Working effectively with legacy code --- Part I","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/11/24/cs/reflection-on-working-effectively-with-legacy-code-part-one/"}}},{"node":{"id":"9f3948b2-bb63-5a4f-9c9c-0a1fadfc3517","frontmatter":{"title":"Mergeable replicated data types","categories":["cs"],"tags":["paper","data-structure"]},"fields":{"slug":"/blog/2019/11/30/cs/mergeable-replicated-data-types/"}}},{"node":{"id":"f12f1f8a-6de2-51da-8f8a-d323a92b3549","frontmatter":{"title":"Infinite Type","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/infinite-type/"}}},{"node":{"id":"a2137fb4-59cf-577d-b07f-a829d4f6882c","frontmatter":{"title":"How to test in Haskell: HSpec setup","categories":["cs"],"tags":["haskell","beginner","testing"]},"fields":{"slug":"/blog/2019/12/14/cs/how-to-test-haskell/"}}},{"node":{"id":"5e569bcc-7ad2-5200-921e-a0ce3b17a773","frontmatter":{"title":"NOTE: If we write kubernetes client in Rust","categories":["cs"],"tags":["note","programming","kubernetes","rust"]},"fields":{"slug":"/blog/2019/12/13/cs/if-write-kube-client-go-in-rust/"}}},{"node":{"id":"06cc88f1-000b-506b-8afb-0ba5409f5da1","frontmatter":{"title":"Haskell quick start","categories":["cs"],"tags":["haskell","beginner","plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/haskell-quick-start/"}}},{"node":{"id":"785de266-a84d-57e3-b119-46a5f7e0114a","frontmatter":{"title":"NOTE: get labels from Pod","categories":["cs"],"tags":["note","kubernetes"]},"fields":{"slug":"/blog/2019/12/20/cs/note-get-labels-from-pod/"}}},{"node":{"id":"846c66d5-4f4a-5544-9491-fdc1671be380","frontmatter":{"title":"From Infinite Type to Functor","categories":["cs"],"tags":["plt","functor","language","haskell"]},"fields":{"slug":"/blog/2019/12/13/cs/from-infinite-type-to-functor/"}}},{"node":{"id":"d4e2efd2-4da2-54dd-9e46-544abf0f1953","frontmatter":{"title":"NOTE: What is lambda calculus","categories":["cs"],"tags":["note","plt","utlc"]},"fields":{"slug":"/blog/2020/01/01/cs/note-what-is-lambda-calculus/"}}},{"node":{"id":"0bbd48f9-b7ac-5fbe-85f5-19ca3fa12734","frontmatter":{"title":"Type as Constraint: Why we need more type?","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2020/01/16/cs/type-as-constraint-why-we-need-more-type/"}}},{"node":{"id":"bce44484-82be-5531-bbc8-a9e1bc59076c","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 11 to 19","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/03/cs/reflection-on-working-effectively-with-legacy-code-ch-11-19/"}}},{"node":{"id":"d74e85e7-1028-51d0-add9-0c0ea37c4cb6","frontmatter":{"title":"TDD is not silver bullet","categories":["cs"],"tags":["programming"]},"fields":{"slug":"/blog/2020/01/11/cs/tdd-is-not-silver-bullet/"}}},{"node":{"id":"de3bd99a-2f0c-5473-a853-21523d01dbb5","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 20 to 23","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/04/cs/reflection-on-working-effectively-with-legacy-code-ch-20-23/"}}},{"node":{"id":"44eb6dda-c3e9-54fb-a251-b415fb08b49f","frontmatter":{"title":"NOTE: a little bit Z3 solver","categories":["cs"],"tags":["note","smt","z3"]},"fields":{"slug":"/blog/2020/01/24/cs/note-a-little-bit-z3-solver/"}}},{"node":{"id":"f4cd1802-ad9e-5d80-81f0-79f85515f2cd","frontmatter":{"title":"NOTE: bounded polymorphism","categories":["cs"],"tags":["note","plt","language","haskell"]},"fields":{"slug":"/blog/2020/01/24/cs/note-bound-polymorphism/"}}},{"node":{"id":"2a3dbf6d-50c5-5b0e-b4c2-4890cfc650a0","frontmatter":{"title":"NOTE: C++ optional","categories":["cs"],"tags":["note","cpp","language"]},"fields":{"slug":"/blog/2020/01/26/cs/note-cpp-optional/"}}},{"node":{"id":"ec5fd544-7096-5098-89a6-0f06a873d47e","frontmatter":{"title":"不會騎 Gogoro 的兩個鄉巴佬","categories":["funny"],"tags":["life"]},"fields":{"slug":"/blog/2020/01/31/funny/two-idiots-who-cant-ride-gogoro/"}}},{"node":{"id":"e5f1b03a-f5cd-5b9b-aa1f-499ea2076fac","frontmatter":{"title":"一些推薦去嘗試看看的程式語言","categories":["cs"],"tags":["language"]},"fields":{"slug":"/blog/2020/02/06/cs/suggested-languages/"}}},{"node":{"id":"10e9c6f2-3474-5ebc-99d2-5c4a97f879ea","frontmatter":{"title":"Binary Encoding of Integer","categories":["cs"],"tags":["fundamental"]},"fields":{"slug":"/blog/2020/03/21/cs/binary-encoding-of-interger/"}}},{"node":{"id":"e2302e39-eea1-5df3-90a6-ef060120cf9e","frontmatter":{"title":"小說推薦：天防者","categories":["book"],"tags":["novel","recommend","skyward","Brandon Sanderson"]},"fields":{"slug":"/blog/2020/04/01/book/recommend-novel-skyward/"}}},{"node":{"id":"ed391a8d-358b-56e3-b55c-f0fd90492aa8","frontmatter":{"title":"NOTE: Seven Bridges of Königsberg and Eulerian graph","categories":["math"],"tags":["note","topology","graph","Eulerian path","Eulerian circuit"]},"fields":{"slug":"/blog/2020/04/03/math/note-seven-bridges-of-konigsberg-eulerian-path/"}}},{"node":{"id":"80d44a1a-1a60-5d93-bf71-d21cbe6d796c","frontmatter":{"title":"NOTE: class member initialization order in C++","categories":["cs"],"tags":["note","cpp","class member","initialization","language"]},"fields":{"slug":"/blog/2020/04/13/cs/note-cpp-member-initialize-order/"}}},{"node":{"id":"757f6fbc-6d36-5b3f-989e-ef792d13aa7e","frontmatter":{"title":"NOTE: simply typed lambda calculus","categories":["cs"],"tags":["note","plt","stlc"]},"fields":{"slug":"/blog/2020/03/08/cs/note-stlc/"}}},{"node":{"id":"047ac64e-b55c-5043-adae-1d5c9321c5cd","frontmatter":{"title":"NOTE: how to install Nix package manager on MacOS Catalina","categories":["cs"],"tags":["note","nix","macos","catalina"]},"fields":{"slug":"/blog/2020/04/17/cs/note-how-to-install-nix-on-macos-catalina/"}}},{"node":{"id":"bc080f44-1eaf-5efd-a61a-ff3f1da28b84","frontmatter":{"title":"From Functor to Applicative","categories":["cs"],"tags":["plt","applicative","language","haskell"]},"fields":{"slug":"/blog/2020/04/11/cs/from-functor-to-applicative/"}}},{"node":{"id":"c6c52b5a-8170-508f-b887-6b1ce2f6ecda","frontmatter":{"title":"How to parse expression with the parser combinator","categories":["cs"],"tags":["compiler","parser","racket"]},"fields":{"slug":"/blog/2020/05/03/cs/how-to-parse-expression-with-parser-combinator/"}}},{"node":{"id":"eff65ed1-fdb8-5069-919f-3983784e1344","frontmatter":{"title":"A beautiful proof: There have infinite primes","categories":["math"],"tags":["prime"]},"fields":{"slug":"/blog/2020/05/09/math/a-beautiful-proof-there-have-infinite-primes/"}}},{"node":{"id":"a30fc310-d412-5f36-95c3-0aee1ea000ae","frontmatter":{"title":"奶油白醬義大利麵","categories":["recipe"],"tags":["spaghetti","white sauce"]},"fields":{"slug":"/blog/2020/05/10/recipe/spaghetti/"}}},{"node":{"id":"0ad29589-2261-5f8f-a0f6-0ef61d5a4833","frontmatter":{"title":"NOTE: 演算法的各種時間複雜度","categories":["cs"],"tags":["note","algorithm","time complexity"]},"fields":{"slug":"/blog/2020/05/12/cs/algorithm-time-complexity/"}}},{"node":{"id":"4bc528e2-46d3-5ff9-9ef6-cd2036d9d741","frontmatter":{"title":"NOTE: 樸素集合論三大悖論","categories":["math"],"tags":["note","set theory","paradox","type theory"]},"fields":{"slug":"/blog/2020/05/31/math/set-theory-three-paradox/"}}},{"node":{"id":"67ccc98d-872a-548d-bec9-c1edd2297252","frontmatter":{"title":"Currying","categories":["cs"],"tags":["racket","macro"]},"fields":{"slug":"/blog/2020/05/31/cs/currying/"}}},{"node":{"id":"d29c9aa1-2b7f-531a-868a-ccdca6371411","frontmatter":{"title":"De Bruijn index: why and how","categories":["cs"],"tags":["plt","de bruijn index","racket"]},"fields":{"slug":"/blog/2020/05/16/cs/de-bruijn-index/"}}},{"node":{"id":"203837be-04fc-567d-9450-33a3f6b02872","frontmatter":{"title":"NOTE: ZFC","categories":["math"],"tags":["note","set theory"]},"fields":{"slug":"/blog/2020/06/11/math/note-zfc/"}}},{"node":{"id":"29b4fcc7-cbe5-57fd-a9c5-7a18c62d8ee6","frontmatter":{"title":"正確實作 substitution 有多難","categories":["cs"],"tags":["plt","utlc"]},"fields":{"slug":"/blog/2020/06/04/cs/how-hard-can-implement-substitution-correctly-be/"}}},{"node":{"id":"c6c0c8c1-db91-54c9-8929-78658c2a90dd","frontmatter":{"title":"NOTE: lambda 2","categories":["cs"],"tags":["note","plt","lambda 2"]},"fields":{"slug":"/blog/2020/06/12/cs/second-order-typed-lambda-calculus/"}}},{"node":{"id":"f49e05b7-906e-5dca-87d5-2a3d39e773db","frontmatter":{"title":"大阪燒","categories":["recipe"],"tags":["okonomiyaki"]},"fields":{"slug":"/blog/2020/06/17/recipe/recipe-okonomiyaki/"}}},{"node":{"id":"b8aae0b8-d789-57eb-b671-75bfa2f4290d","frontmatter":{"title":"NOTE: 演算法的量級","categories":["cs"],"tags":["note","algorithm","order"]},"fields":{"slug":"/blog/2020/06/20/cs/algorithm-order/"}}},{"node":{"id":"a3447c9d-20fc-58e9-a993-f25b1f2b0d8a","frontmatter":{"title":"Extension hack","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/extension-hack/"}}},{"node":{"id":"8dce6fe3-902a-5b3d-9d14-2e302cf0bef5","frontmatter":{"title":"小說推薦：優質國度","categories":["book"],"tags":["novel","recommend","Quality Land"]},"fields":{"slug":"/blog/2020/07/03/book/recommend-novel-quality-land/"}}},{"node":{"id":"3c3130a0-7b7a-5b3f-9f3c-9a23ed88cc72","frontmatter":{"title":"Swift --extension概念入門","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/swift-extension/"}}},{"node":{"id":"97bb49ed-2ce6-588c-bd14-86dcecaa2116","frontmatter":{"title":"NOTE: Algebra Structure","categories":["math"],"tags":["note","algebra structure","magma","semigroup","monoid","group"]},"fields":{"slug":"/blog/2020/07/12/math/algebra-structure/"}}},{"node":{"id":"ab571f39-a304-515c-9e56-c4bdc3a1d70b","frontmatter":{"title":"Why Logic Programming?","categories":["cs"],"tags":["logic programming","racket","rosette","datalog"]},"fields":{"slug":"/blog/2020/07/15/cs/why-logic-programming/"}}},{"node":{"id":"13404fcc-084f-5f56-8938-c72eb8e96c94","frontmatter":{"title":"Tracing source code of Kubernetes client-go","categories":["cs"],"tags":["kubernetes","golang"]},"fields":{"slug":"/blog/2019/01/25/cs/kube-client-go-source-code-tracing/"}}},{"node":{"id":"602307b1-7619-55ee-91f4-b488361ff1fd","frontmatter":{"title":"程式設計思考（一）核心領域","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2019/11/09/cs/abstraction-of-programming-design/"}}},{"node":{"id":"b88e5107-daac-51de-aace-b9d13d01c5d1","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 6 to 10","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/12/07/cs/reflection-on-working-effectively-with-legacy-code-ch-6-10/"}}},{"node":{"id":"45c7c10b-ebe7-5f8a-9bb8-8384c90744cf","frontmatter":{"title":"Interaction with C in Zig","categories":["cs"],"tags":["zig","c","language"]},"fields":{"slug":"/blog/2019/12/22/cs/interaction-with-c-in-zig/"}}},{"node":{"id":"24cddb21-779c-545e-aff0-dd840418c8d2","frontmatter":{"title":"最後一次抱怨 Go","categories":["cs"],"tags":["golang","language"]},"fields":{"slug":"/blog/2020/01/19/cs/last-time-complain-about-go/"}}},{"node":{"id":"460001d0-2e11-586f-a331-e7294c963060","frontmatter":{"title":"A Racket macro tutorial -- get HTTP parameters easier","categories":["cs"],"tags":["racket","metaprogramming","macro"]},"fields":{"slug":"/blog/2020/02/16/cs/a-racket-macro-tutorial-get-http-parameters-easier/"}}},{"node":{"id":"d0e1e323-7ade-5a75-8c86-dbfd7f94861b","frontmatter":{"title":"Programming 生涯回顧","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2020/05/13/cs/programming-life-retro/"}}},{"node":{"id":"2a45e9d5-898d-59d4-84d4-f96458edfd2e","frontmatter":{"title":"程式設計思考（二）操作介面","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/"}}},{"node":{"id":"c029b0a3-b626-5758-b8e5-b6a38c781376","frontmatter":{"title":"Kubernetes Networking: concept and overview from underlying perspective","categories":["cs"],"tags":["networking","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/18/cs/kubernetes-networking-concept-and-overview/"}}},{"node":{"id":"b9b6191e-1aa2-557b-9cbc-fcf4f689fe93","frontmatter":{"title":"Hindley-Milner type system: Incrementally build way & Make new language in Racket","categories":["cs"],"tags":["plt","hindley milner","racket"]},"fields":{"slug":"/blog/2020/05/24/cs/hindley-milner-system-incremental-build-and-make-new-language/"}}}]}},"pageContext":{"slug":"/blog/2019/12/07/cs/reflection-on-working-effectively-with-legacy-code-ch-6-10/"}}}