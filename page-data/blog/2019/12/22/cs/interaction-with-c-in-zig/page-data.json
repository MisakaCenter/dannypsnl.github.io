{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2019/12/22/cs/interaction-with-c-in-zig/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>From 1972, <strong>C</strong> became more and more important in the underlying world. Many projects are based on <strong>C</strong>, including the famous operating system: <strong>Linux</strong>; the multi-platform toolkit for creating GUI: GTK; \"your friend\": Ruby and many others great software. <strong>C</strong> also introduces the <strong>pointer</strong>, I especially point out is because there has several <strong>pointer</strong> ways at that time, but the one used by <strong>C</strong> is the winner, and most people only know this version right now: at before, the pointer we have usually directly use size rather than object as its value, which means a pointer <code class=\"language-text\">p</code> which points to location <code class=\"language-text\">1</code>, after using the <code class=\"language-text\">p++</code> would point to location <code class=\"language-text\">2</code>; in <strong>C</strong>, the one we get used to, would depend on what is the object the <code class=\"language-text\">p</code> points to; that's why <code class=\"language-text\">x[i]</code> and <code class=\"language-text\">*(x + i)</code> are equivalent. From <a href=\"https://en.wikipedia.org/wiki/The_C_Programming_Language\">The C programming language</a>:</p>\n<blockquote>\n<p>As formal parameters in a function definition, char s[]; and char *s are equivalent.</p>\n</blockquote>\n<p><strong>C</strong> is an unbelievable simple language and makes so many great stuff, I think I can say it's a great language. But is not enough nowadays, let's take a look at a few examples:</p>\n<ul>\n<li>\n<p>where is my object?</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">*</span><span class=\"token function\">new_object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">*</span>obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>so, <code class=\"language-text\">char s[]</code> and <code class=\"language-text\">char *s</code> are equivalent?</p>\n<p>We have a global here:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Can I use</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">;</span></code></pre></div>\n<p>to operate the origin one? No, but the following are the same</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>how to use boolean operations in <strong>C</strong>?</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>How about: <code class=\"language-text\">if (0x63)</code>?</p>\n</li>\n<li>\n<p>Can I point to that address?</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// so what is c?</span>\n<span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>Finally, we know <a href=\"https://www.slideshare.net/olvemaudal/insecure-coding-in-c-and-c\">how to kill ourself by creating a global thermonuclear war</a>, or because we don't know?</p>\n<h3>Future?</h3>\n<p>We make many tools and define many rules to avoid to make those errors in <strong>C</strong>. Like <a href=\"https://en.wikipedia.org/wiki/MISRA_C\">MISRA C</a>, <a href=\"https://en.wikipedia.org/wiki/List_of_model_checking_tools\">model checking</a> and more. Some of them are palliative, like define programming rules (unless that rule can be checked by linter, else is usually not really helpful), but some of them are very nice; here my point is focusing on the tool like <a href=\"https://www.fstar-lang.org/#introduction\">F*</a>.</p>\n<p>What I'm going to introduce is <strong>Zig</strong>. The first language which I really think it can be a replacement of <strong>C</strong>. The reason I think <strong>Zig</strong> is better is the concept of <strong>compile-time</strong> in <strong>Zig</strong>. Which means we can get the benefit from pre/post-condition checking. Let's have an example to know what's that means:</p>\n<div class=\"gatsby-highlight\" data-language=\"zig\"><pre class=\"language-zig\"><code class=\"language-zig\"><span class=\"token keyword\">fn</span> <span class=\"token function\">check_upper_case_name</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">comptime</span> str<span class=\"token punctuation\">:</span> <span class=\"token class-name\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">const</span> <span class=\"token builtin-types keyword\">u8</span></span><span class=\"token punctuation\">)</span> <span class=\"token class-name\"><span class=\"token builtin-types keyword\">void</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">comptime</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> str<span class=\"token punctuation\">.</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token string\">'a'</span> <span class=\"token keyword\">and</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">@compileError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"must be all uppercase\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// so if we typed `check_upper_case_name(\"apple\")`</span>\n<span class=\"token comment\">// would cause a compile error</span></code></pre></div>\n<p>This is a very powerful feature, but it's not enough to be a replacement of <strong>C</strong>. <strong>Rust</strong> has more features than <strong>C</strong> in the programming language designing view. It's not about performance, many languages can be faster than <strong>C</strong>(depends on the field of CS). The <strong>Go</strong> even as simple as <strong>C</strong>. But they cannot be a replacement of <strong>C</strong>. Because the interaction way is not simple enough, even have limitations (this is quite normal, it's caused by different languages design, I have mentioned <a href=\"/blog/2019/08/15/cs/cgo-can-be-a-trouble/\">how cgo makes trouble</a>,\ncgo helps we link binary multiple times and must set up the linker flags multiple times, what a good idea!). Others language use FFI, in <strong>Rust</strong> we have to write:</p>\n<blockquote>\n<p>From <a href=\"https://doc.rust-lang.org/nomicon/ffi.html\">https://doc.rust-lang.org/nomicon/ffi.html</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[link(name = \"snappy\")]</span>\n<span class=\"token keyword\">extern</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">snappy_max_compressed_length</span><span class=\"token punctuation\">(</span>source_length<span class=\"token punctuation\">:</span> size_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> size_t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Everything looks good, but FFI has a common limitation(I think the language use this model would have this problem): <a href=\"https://stackoverflow.com/questions/21485655/how-do-i-use-c-preprocessor-macros-with-rusts-ffi\">we cannot access the <code class=\"language-text\">#define</code> in <strong>C</strong></a>. You know, we can access macro in C is already confuse people and thought it is just a variable(but it's not). But <strong>C</strong> programs use <code class=\"language-text\">#define</code> for many things, like error number. So we are required to do so:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">const</span> A_C_ERROR_XXX<span class=\"token punctuation\">:</span> u32 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> A_C_ERROR_XXX2<span class=\"token punctuation\">:</span> u32 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> A_C_ERROR_XXX3<span class=\"token punctuation\">:</span> u32 <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Hope you enjoy this process(or normally we would make a code generator and found the header location was changed after some versions).</p>\n<p><strong>Zig</strong> does a lot on making the interaction more convenience, that's why it can be the replacement of <strong>C</strong>. Not joking, let's see how to access existing <strong>C</strong> code from <strong>Zig</strong>.</p>\n<blockquote>\n<p>From <a href=\"https://github.com/dannypsnl/write-you-a-k8s/blob/master/test.zig\">https://github.com/dannypsnl/write-you-a-k8s/blob/master/test.zig</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"zig\"><pre class=\"language-zig\"><code class=\"language-zig\"><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token builtin\">@cImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">@cInclude</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"netlink/netlink.h\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">@cInclude</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"netlink/route/link.h\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can even access macro:</p>\n<div class=\"gatsby-highlight\" data-language=\"zig\"><pre class=\"language-zig\"><code class=\"language-zig\"><span class=\"token keyword\">fn</span> <span class=\"token function\">netlink_err</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">:</span> <span class=\"token class-name\"><span class=\"token builtin-types keyword\">c_int</span></span><span class=\"token punctuation\">)</span> <span class=\"token class-name\"><span class=\"token operator\">!</span><span class=\"token builtin-types keyword\">void</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// error code is negative, we must convert it back first, so we use `-err`</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span>NLE_SUCCESS <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_FAILURE <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>FAILURE<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_INTR <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>INTR<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_BAD_SOCK <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>BAD_SOCK<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_AGAIN <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>AGAIN<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_NOMEM <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>NOMEM<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_EXIST <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>EXIST<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_INVAL <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>INVAL<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_RANGE <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>RANGE<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_MSGSIZE <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>MSGSIZE<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_OPNOTSUPP <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>OPNOTSUPP<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_AF_NOSUPPORT <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>AF_NOSUPPORT<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_OBJ_NOTFOUND <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>OBJ_NOTFOUND<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_NOATTR <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>NOATTR<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_MISSING_ATTR <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>MISSING_ATTR<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_AF_MISMATCH <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>AF_MISMATCH<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_SEQ_MISMATCH <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>SEQ_MISMATCH<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_MSG_OVERFLOW <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>MSG_OVERFLOW<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_MSG_TRUNC <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>MSG_TRUNC<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_NOADDR <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>NOADDR<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_SRCRT_NOSUPPORT <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>SRCRT_NOSUPPORT<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_MSG_TOOSHORT <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>MSG_TOOSHORT<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_MSGTYPE_NOSUPPORT <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>MSGTYPE_NOSUPPORT<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_OBJ_MISMATCH <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>OBJ_MISMATCH<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_NOCACHE <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>NOCACHE<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_BUSY <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>BUSY<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_PROTO_MISMATCH <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>PROTO_MISMATCH<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_NOACCESS <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>NOACCESS<span class=\"token punctuation\">,</span>\n        c<span class=\"token punctuation\">.</span>NLE_PERM <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>PERM<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">else</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> NetLinkError<span class=\"token punctuation\">.</span>Unknown<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> NetLinkError <span class=\"token operator\">=</span> <span class=\"token keyword\">error</span><span class=\"token punctuation\">{</span>\n    Unknown<span class=\"token punctuation\">,</span>\n    FAILURE<span class=\"token punctuation\">,</span>\n    INTR<span class=\"token punctuation\">,</span>\n    BAD_SOCK<span class=\"token punctuation\">,</span>\n    AGAIN<span class=\"token punctuation\">,</span>\n    NOMEM<span class=\"token punctuation\">,</span>\n    EXIST<span class=\"token punctuation\">,</span>\n    INVAL<span class=\"token punctuation\">,</span>\n    RANGE<span class=\"token punctuation\">,</span>\n    MSGSIZE<span class=\"token punctuation\">,</span>\n    OPNOTSUPP<span class=\"token punctuation\">,</span>\n    AF_NOSUPPORT<span class=\"token punctuation\">,</span>\n    OBJ_NOTFOUND<span class=\"token punctuation\">,</span>\n    NOATTR<span class=\"token punctuation\">,</span>\n    MISSING_ATTR<span class=\"token punctuation\">,</span>\n    AF_MISMATCH<span class=\"token punctuation\">,</span>\n    SEQ_MISMATCH<span class=\"token punctuation\">,</span>\n    MSG_OVERFLOW<span class=\"token punctuation\">,</span>\n    MSG_TRUNC<span class=\"token punctuation\">,</span>\n    NOADDR<span class=\"token punctuation\">,</span>\n    SRCRT_NOSUPPORT<span class=\"token punctuation\">,</span>\n    MSG_TOOSHORT<span class=\"token punctuation\">,</span>\n    MSGTYPE_NOSUPPORT<span class=\"token punctuation\">,</span>\n    OBJ_MISMATCH<span class=\"token punctuation\">,</span>\n    NOCACHE<span class=\"token punctuation\">,</span>\n    BUSY<span class=\"token punctuation\">,</span>\n    PROTO_MISMATCH<span class=\"token punctuation\">,</span>\n    NOACCESS<span class=\"token punctuation\">,</span>\n    PERM<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Yes, <a href=\"http://charette.no-ip.com:81/programming/doxygen/netfilter/errno_8h.html\"><code class=\"language-text\">NLE_FAILURE</code> is macro</a>.</p>\n<p>But we cannot just take a look at how to code it, right? How about the build system? <strong>Zig</strong> use <strong>Zig</strong> as build script, and already has several helpful functionalities! Here is an example(file should be named <code class=\"language-text\">build.zig</code>):</p>\n<blockquote>\n<p>From <a href=\"https://github.com/dannypsnl/write-you-a-k8s/blob/master/build.zig\">https://github.com/dannypsnl/write-you-a-k8s/blob/master/build.zig</a></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"zig\"><pre class=\"language-zig\"><code class=\"language-zig\"><span class=\"token keyword\">const</span> Builder <span class=\"token operator\">=</span> <span class=\"token builtin\">@import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"std\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">.</span>Builder<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">:</span> <span class=\"token class-name\"><span class=\"token operator\">*</span>Builder</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\"><span class=\"token builtin-types keyword\">void</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> exe <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">addExecutable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test.zig\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    exe<span class=\"token punctuation\">.</span><span class=\"token function\">linkSystemLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exe<span class=\"token punctuation\">.</span><span class=\"token function\">linkSystemLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nl-3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exe<span class=\"token punctuation\">.</span><span class=\"token function\">linkSystemLibrary</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nl-route-3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exe<span class=\"token punctuation\">.</span><span class=\"token function\">addIncludeDir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/usr/include/libnl3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    exe<span class=\"token punctuation\">.</span><span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    b<span class=\"token punctuation\">.</span>default_step<span class=\"token punctuation\">.</span><span class=\"token function\">dependOn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>exe<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We use <code class=\"language-text\">test.zig</code> to build an executable, link to <strong>C</strong> libraries <code class=\"language-text\">c</code>, <code class=\"language-text\">nl-3</code> and <code class=\"language-text\">nl-route-3</code>. Also, add an include directory for headers searching. All of them are the feature we exactly need when building a project works with <strong>C</strong>.</p>\n<h3>Conculsion</h3>\n<p>Now we got the idea why <strong>Zig</strong> is a proper replacement of <strong>C</strong>, so we should use it right now? For me is not, it points out the way we can move to. But itself is not complete enough for a production project, for example I haven't saught a package manager for <strong>Zig</strong>, seems like still in <a href=\"https://github.com/ziglang/zig/issues/943\">discussion</a>. So we can take a sit, and observe the future of <strong>Zig</strong>. Anyway, I really hope it can be successful. How about you?</p>","frontmatter":{"title":"Interaction with C in Zig","categories":["cs"],"tags":["zig","c","language"]}},"allMarkdownRemark":{"edges":[{"node":{"id":"7b2485d7-e7c3-57fd-9547-16fd402b114d","frontmatter":{"title":"How to find mk fixed point","categories":["cs"],"tags":["plt","utlc","fixed point"]},"fields":{"slug":"/blog/2020/07/27/cs/how-to-find-mk-fixed-point/"}}},{"node":{"id":"546863be-ba1c-595e-8370-eb774f31f60c","frontmatter":{"title":"lexer 原理解釋","categories":["cs"],"tags":["compiler","lexer","golang"]},"fields":{"slug":"/blog/2017/07/08/cs/lexer-explains/"}}},{"node":{"id":"e507df39-a49c-5c75-a4c4-507de675ce52","frontmatter":{"title":"ANTLR v4--introduction","categories":["cs"],"tags":["antlr4"]},"fields":{"slug":"/blog/2017/09/03/cs/introduction-of-antlr4/"}}},{"node":{"id":"5072ada0-29d8-500b-8371-f80533ab27b0","frontmatter":{"title":"Vim replace","categories":["cs"],"tags":["vim"]},"fields":{"slug":"/blog/2017/10/24/cs/vim-replace/"}}},{"node":{"id":"e34022aa-be3f-504a-9cc9-b222c3b6e52b","frontmatter":{"title":"Type driven development in C++","categories":["cs"],"tags":["cpp"]},"fields":{"slug":"/blog/2017/12/23/cs/type-driven-development-in-cpp/"}}},{"node":{"id":"d191956f-b5bb-5c3f-993a-eacec934f193","frontmatter":{"title":"llvm Go bindings","categories":["cs"],"tags":["llvm","golang"]},"fields":{"slug":"/blog/2017/12/04/cs/llvm-go-bindings/"}}},{"node":{"id":"28754ab9-bc87-5304-83d9-11586ee70fce","frontmatter":{"title":"C++ thread 基礎","categories":["cs"],"tags":["cpp","thread"]},"fields":{"slug":"/blog/2017/06/26/cs/cpp-thread-basic/"}}},{"node":{"id":"fd161ad4-402d-58bd-8190-08e44075694a","frontmatter":{"title":"Erlang Quick Start","categories":["cs"],"tags":["erlang"]},"fields":{"slug":"/blog/2018/01/05/cs/erlang-quick-start/"}}},{"node":{"id":"44c9e7e4-a19a-5f18-98f6-b6105e3ceb1c","frontmatter":{"title":"The best practice of Singleton in Golang","categories":["cs"],"tags":["golang","DesignPattern"]},"fields":{"slug":"/blog/2018/02/12/cs/singleton-best-practice-in-golang/"}}},{"node":{"id":"6cf1b36b-fed7-5566-84f6-64f596c0568f","frontmatter":{"title":"OpenCV introduction","categories":["cs"],"tags":["OpenCV","cpp"]},"fields":{"slug":"/blog/2018/02/08/cs/opencv-introduction/"}}},{"node":{"id":"08473604-caaf-538c-a9ac-633842a5eb3a","frontmatter":{"title":"You should know about `this`","categories":["cs"],"tags":["javascript"]},"fields":{"slug":"/blog/2018/02/09/cs/you-should-know-about-this/"}}},{"node":{"id":"a379d931-4a5a-50cf-b87a-29c36bf0bfca","frontmatter":{"title":"Sort by interface in Go","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/02/14/cs/sort-by-interface-in-go/"}}},{"node":{"id":"7aadac41-a6ef-595c-adb3-fe7349045f54","frontmatter":{"title":"How to disable Go test caching","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/03/17/cs/how-to-disable-go-test-caching/"}}},{"node":{"id":"b22b2e98-3a62-5e3a-b698-5b6521ea8c3f","frontmatter":{"title":"Introduction Of Char Recognizing -- Lexer Tech","categories":["cs"],"tags":["compiler","lexer","rust"]},"fields":{"slug":"/blog/2018/02/25/cs/introduction-of-char-recognizing-lexer-tech/"}}},{"node":{"id":"843f70c9-b9bc-52c0-920f-8ebec90635fe","frontmatter":{"title":"Create a WaitGroup by yourself","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/02/15/cs/create-a-wait-group-by-yourself-and-do-not-use-it/"}}},{"node":{"id":"49fd1e2e-1554-5d24-ae01-66e647e77df8","frontmatter":{"title":"Phoneix 安裝與啟動","categories":["cs"],"tags":["phoenix","elixir","web"]},"fields":{"slug":"/blog/2018/03/31/cs/phoenix-run-and-up/"}}},{"node":{"id":"c16962e8-fa69-54e8-bb2b-c781a2eabd46","frontmatter":{"title":"Nginx 安裝與啟動","categories":["cs"],"tags":["nginx","web"]},"fields":{"slug":"/blog/2018/04/02/cs/nginx-run-and-up/"}}},{"node":{"id":"67df5cf3-7b75-52a0-bf1b-0e9a81cb0cb0","frontmatter":{"title":"How to getting start with Rust","categories":["cs"],"tags":["rust"]},"fields":{"slug":"/blog/2018/05/26/cs/getting-start-with-rust/"}}},{"node":{"id":"c1666f78-5ad1-5fcc-9142-1f14a81b6079","frontmatter":{"title":"Go Channels 入門","categories":["cs"],"tags":["golang","concurrency"]},"fields":{"slug":"/blog/2018/04/23/cs/go-channel-introduction/"}}},{"node":{"id":"c8c71a5e-7c2f-5503-b2f1-ac0620db1157","frontmatter":{"title":"Design of Redux-go v2","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/05/17/cs/design-of-redux-go-v2/"}}},{"node":{"id":"765d1f5a-a9e2-5773-b81d-6fa2a465e86b","frontmatter":{"title":"Error is Value","categories":["cs"],"tags":["golang","errors"]},"fields":{"slug":"/blog/2018/06/22/cs/error-is-value/"}}},{"node":{"id":"5d5d1de0-f7e4-50de-a930-599e3cd895b3","frontmatter":{"title":"Some thinking from Elixir X Ruby Conf","categories":["cs"],"tags":["elixir"]},"fields":{"slug":"/blog/2018/05/01/cs/elixir-ruby-conf-2018-thinking/"}}},{"node":{"id":"ec13d746-3be7-5ec5-8cc2-9f5773c784ee","frontmatter":{"title":"Practical issue about DNS -- EDNS0","categories":["cs"],"tags":["networking","dns","golang"]},"fields":{"slug":"/blog/2018/08/07/cs/practical-issue-about-dns-edns0/"}}},{"node":{"id":"d6e6b1cc-7b50-59af-b3dd-1e2d1bd5fb5e","frontmatter":{"title":"Reflection in Go: create a stack[T]","categories":["cs"],"tags":["golang","reflection"]},"fields":{"slug":"/blog/2018/07/22/cs/reflection-in-go-create-a-stack-t/"}}},{"node":{"id":"a82969d9-e24d-5361-8fdf-797bd2415044","frontmatter":{"title":"gRPC quick start in Go","categories":["cs"],"tags":["networking","gRPC","golang"]},"fields":{"slug":"/blog/2018/08/16/cs/gRPC-basic-tutorial/"}}},{"node":{"id":"03ff243a-28ff-5c17-93bc-5acbf8aa87df","frontmatter":{"title":"Mark Sweep GC","categories":["cs"],"tags":["gc"]},"fields":{"slug":"/blog/2018/09/03/cs/mark-sweep/"}}},{"node":{"id":"b2e1114a-0574-582d-801f-ea4a99e96feb","frontmatter":{"title":"Use httpexpect to test server","categories":["cs"],"tags":["http","testing","networking","golang"]},"fields":{"slug":"/blog/2018/09/16/cs/httpexpect-go/"}}},{"node":{"id":"30f863fb-545c-5fdf-8fbe-bf908eb73753","frontmatter":{"title":"Go quick start","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2018/09/23/cs/golang-quick-start/"}}},{"node":{"id":"9fd83d10-85ca-5ed3-9416-599e3d54d4c6","frontmatter":{"title":"Kubernetes 從 Pod 開始","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/10/27/cs/kubernetes-start-from-pod/"}}},{"node":{"id":"2d6b2494-ee64-5f20-a82a-f73f14882cee","frontmatter":{"title":"fun networking: tcp close","categories":["cs"],"tags":["workrecord","networking","tcp"]},"fields":{"slug":"/blog/2018/11/30/cs/fun-network-tcp-close/"}}},{"node":{"id":"b69e04f4-45ce-5dff-9a51-3fd54d7f2136","frontmatter":{"title":"XDP some note","categories":["cs"],"tags":["networking","xdp"]},"fields":{"slug":"/blog/2018/11/30/cs/xdp-some-note/"}}},{"node":{"id":"292b53ea-c5a7-551b-8607-b920c50d4c6e","frontmatter":{"title":"Test LLVM Go binding in travis","categories":["cs"],"tags":["llvm","golang","testing","travis"]},"fields":{"slug":"/blog/2018/10/06/cs/test-llvm-go-binding-in-travis/"}}},{"node":{"id":"092c8346-aeb9-5615-9d86-7d331ef2cace","frontmatter":{"title":"Kubernetes context","categories":["cs"],"tags":["kubernetes"]},"fields":{"slug":"/blog/2018/12/09/cs/kubernetes-context/"}}},{"node":{"id":"948da191-2170-532c-9e7a-61104f546f7a","frontmatter":{"title":"Testing in Go","categories":["cs"],"tags":["golang","testing","debug"]},"fields":{"slug":"/blog/2018/11/17/cs/testing-in-go/"}}},{"node":{"id":"6759bad6-0b3f-5a19-b865-ee89d50703b4","frontmatter":{"title":"Magic in redux-go v2.1: package rematch","categories":["cs"],"tags":["golang","redux"]},"fields":{"slug":"/blog/2018/07/04/cs/magic-in-redux-go-2.1/"}}},{"node":{"id":"f1b55b8d-f933-5627-8717-d62ef5dbe2f8","frontmatter":{"title":"戴德金分割與1為何等於0.9...(無限循環)","categories":["math"],"tags":["dedekind","dedekind cut"]},"fields":{"slug":"/blog/2019/03/01/math/dedekind-cut-and-application/"}}},{"node":{"id":"8de033ca-f3ad-5b21-b998-6f31085d5c9e","frontmatter":{"title":"Should I learn?","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2018/12/22/cs/should-i-learn/"}}},{"node":{"id":"cee81faa-22ef-5571-8540-e84fbfd9f710","frontmatter":{"title":"How to compare Go benchmark in TravisCI","categories":["cs"],"tags":["golang","testing","travis"]},"fields":{"slug":"/blog/2018/12/28/cs/golang-benchmark-compare/"}}},{"node":{"id":"05bd5f1b-bc76-5625-a764-e0d3c71b402f","frontmatter":{"title":"Make googletest-like test framework from scratch","categories":["cs"],"tags":["metaprogramming","cpp"]},"fields":{"slug":"/blog/2019/03/03/cs/make-googletest-like-test-framework-from-scratch/"}}},{"node":{"id":"0644a550-53f6-545c-9659-35a85d899494","frontmatter":{"title":"Introduction of LLDB","categories":["cs"],"tags":["tool","debugger","lldb"]},"fields":{"slug":"/blog/2019/03/17/cs/introduction-of-lldb/"}}},{"node":{"id":"9a3c9420-dd65-579b-bbe6-04cdd5654b91","frontmatter":{"title":"Write a hashmap in Go","categories":["cs"],"tags":["data-structure","golang"]},"fields":{"slug":"/blog/2019/04/04/cs/write-hashmap-in-go/"}}},{"node":{"id":"58d36ae9-d194-5fac-bc24-d0c9730866bf","frontmatter":{"title":"5 tools for file transfer","categories":["cs"],"tags":["tool"]},"fields":{"slug":"/blog/2019/04/27/cs/five-tools-for-file-transfer/"}}},{"node":{"id":"fd5f04d7-405c-5e7d-8ab6-3ccdc0bce760","frontmatter":{"title":"HugePages on Kubernetes","categories":["cs"],"tags":["workrecord","hugepages","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/04/cs/hugepages-on-kubernetes/"}}},{"node":{"id":"7755f76a-3458-5764-9f50-68c4ffb0a6c9","frontmatter":{"title":"gRPC proxy: approach & pain","categories":["cs"],"tags":["gRPC"]},"fields":{"slug":"/blog/2019/04/13/cs/grpc-proxy-approach-and-pain/"}}},{"node":{"id":"a74742e1-23ff-5977-bdfc-5f74842b234c","frontmatter":{"title":"A simple way to ensure interface won't be implemented accidently","categories":["cs"],"tags":["golang"]},"fields":{"slug":"/blog/2019/06/18/cs/simple-way-to-ensure-go-interface-wont-be-implement-accidently/"}}},{"node":{"id":"9c683f4e-7281-5153-a08a-a50b6ee05b88","frontmatter":{"title":"The Go concurrency bug I made","categories":["cs"],"tags":["golang","concurrency","workrecord"]},"fields":{"slug":"/blog/2019/05/25/cs/golang-concurrency-bug-i-made/"}}},{"node":{"id":"49d97e32-8a97-5e60-8c30-c78c403bba0d","frontmatter":{"title":"tcpdump cheat sheet","categories":["cs"],"tags":["tcpdump","networking"]},"fields":{"slug":"/blog/2019/06/25/cs/tcpdump-cheat-sheet/"}}},{"node":{"id":"bbf87cca-106e-5d96-a27d-a4f68a7cf012","frontmatter":{"title":"How trait with lifetime can be a trouble and how to fix it","categories":["cs"],"tags":["rust","rust lifetime"]},"fields":{"slug":"/blog/2019/07/31/cs/how-lifetime-trait-can-be-trouble-and-how-to-fix-it/"}}},{"node":{"id":"739889c2-58d8-5632-9bc4-1518751e52a6","frontmatter":{"title":"Notes: Ruby Conf Taiwan 2019","categories":["cs"],"tags":["language","gc"]},"fields":{"slug":"/blog/2019/08/13/cs/ruby-conf-taiwan-2019/"}}},{"node":{"id":"ad56e808-8f85-55ad-9aa7-34f5336e6d4a","frontmatter":{"title":"Privileged Pod -- Debug kubernetes node","categories":["cs"],"tags":["kubernetes","debug"]},"fields":{"slug":"/blog/2019/09/01/cs/privileged-pod/"}}},{"node":{"id":"4e62b250-d25f-5c39-bd18-2d5b3514461b","frontmatter":{"title":"cgo can be a trouble","categories":["cs"],"tags":["golang","cgo"]},"fields":{"slug":"/blog/2019/08/15/cs/cgo-can-be-a-trouble/"}}},{"node":{"id":"c21bfb9e-3ed2-5312-8652-c28945f78f52","frontmatter":{"title":"Why not a big script","categories":["cs"],"tags":["shell"]},"fields":{"slug":"/blog/2019/10/05/cs/why-not-big-script/"}}},{"node":{"id":"10eb1882-d25b-532e-90b3-ba31c0ae4de0","frontmatter":{"title":"nix report","categories":["cs"],"tags":["nix","shell"]},"fields":{"slug":"/blog/2019/09/12/cs/nix-report/"}}},{"node":{"id":"778b403e-0913-55b6-8631-8f709c3190a4","frontmatter":{"title":"DPDK -- EAL Input/output error","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/18/cs/dpdk-input-output-error/"}}},{"node":{"id":"d1844995-f98a-582d-8034-1261c2538134","frontmatter":{"title":"How to use .gitignore","categories":["cs"],"tags":["git"]},"fields":{"slug":"/blog/2019/11/08/cs/how-to-use-gitignore/"}}},{"node":{"id":"af72f2b3-cd09-547a-bce0-9cfef54189d7","frontmatter":{"title":"DPDK usertools: devbind","categories":["cs"],"tags":["dpdk","networking","workrecord"]},"fields":{"slug":"/blog/2019/10/19/cs/dpdk-usertools-devbind/"}}},{"node":{"id":"55cd1966-fe9a-5d8e-a7bc-613b82ea53cc","frontmatter":{"title":"Weird behavior in Go: encoding/gob","categories":["cs"],"tags":["gob","golang","workrecord"]},"fields":{"slug":"/blog/2019/10/31/cs/weird-behavior-gob/"}}},{"node":{"id":"95cd04e7-3518-5f09-bc15-b481e5502ab8","frontmatter":{"title":"Algebra data type vs Class","categories":["cs"],"tags":["plt","scala","haskell"]},"fields":{"slug":"/blog/2019/11/19/cs/algebra-data-type-vs-class/"}}},{"node":{"id":"e7effcba-43fa-55a2-a9a4-3ae56227bb4d","frontmatter":{"title":"Reflection on Working effectively with legacy code --- Part I","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/11/24/cs/reflection-on-working-effectively-with-legacy-code-part-one/"}}},{"node":{"id":"9f3948b2-bb63-5a4f-9c9c-0a1fadfc3517","frontmatter":{"title":"Mergeable replicated data types","categories":["cs"],"tags":["paper","data-structure"]},"fields":{"slug":"/blog/2019/11/30/cs/mergeable-replicated-data-types/"}}},{"node":{"id":"f12f1f8a-6de2-51da-8f8a-d323a92b3549","frontmatter":{"title":"Infinite Type","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/infinite-type/"}}},{"node":{"id":"a2137fb4-59cf-577d-b07f-a829d4f6882c","frontmatter":{"title":"How to test in Haskell: HSpec setup","categories":["cs"],"tags":["haskell","beginner","testing"]},"fields":{"slug":"/blog/2019/12/14/cs/how-to-test-haskell/"}}},{"node":{"id":"5e569bcc-7ad2-5200-921e-a0ce3b17a773","frontmatter":{"title":"NOTE: If we write kubernetes client in Rust","categories":["cs"],"tags":["note","programming","kubernetes","rust"]},"fields":{"slug":"/blog/2019/12/13/cs/if-write-kube-client-go-in-rust/"}}},{"node":{"id":"06cc88f1-000b-506b-8afb-0ba5409f5da1","frontmatter":{"title":"Haskell quick start","categories":["cs"],"tags":["haskell","beginner","plt","language"]},"fields":{"slug":"/blog/2019/12/08/cs/haskell-quick-start/"}}},{"node":{"id":"785de266-a84d-57e3-b119-46a5f7e0114a","frontmatter":{"title":"NOTE: get labels from Pod","categories":["cs"],"tags":["note","kubernetes"]},"fields":{"slug":"/blog/2019/12/20/cs/note-get-labels-from-pod/"}}},{"node":{"id":"846c66d5-4f4a-5544-9491-fdc1671be380","frontmatter":{"title":"From Infinite Type to Functor","categories":["cs"],"tags":["plt","functor","language","haskell"]},"fields":{"slug":"/blog/2019/12/13/cs/from-infinite-type-to-functor/"}}},{"node":{"id":"d4e2efd2-4da2-54dd-9e46-544abf0f1953","frontmatter":{"title":"NOTE: What is lambda calculus","categories":["cs"],"tags":["note","plt","utlc"]},"fields":{"slug":"/blog/2020/01/01/cs/note-what-is-lambda-calculus/"}}},{"node":{"id":"0bbd48f9-b7ac-5fbe-85f5-19ca3fa12734","frontmatter":{"title":"Type as Constraint: Why we need more type?","categories":["cs"],"tags":["plt","language"]},"fields":{"slug":"/blog/2020/01/16/cs/type-as-constraint-why-we-need-more-type/"}}},{"node":{"id":"bce44484-82be-5531-bbc8-a9e1bc59076c","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 11 to 19","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/03/cs/reflection-on-working-effectively-with-legacy-code-ch-11-19/"}}},{"node":{"id":"d74e85e7-1028-51d0-add9-0c0ea37c4cb6","frontmatter":{"title":"TDD is not silver bullet","categories":["cs"],"tags":["programming"]},"fields":{"slug":"/blog/2020/01/11/cs/tdd-is-not-silver-bullet/"}}},{"node":{"id":"de3bd99a-2f0c-5473-a853-21523d01dbb5","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 20 to 23","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2020/01/04/cs/reflection-on-working-effectively-with-legacy-code-ch-20-23/"}}},{"node":{"id":"44eb6dda-c3e9-54fb-a251-b415fb08b49f","frontmatter":{"title":"NOTE: a little bit Z3 solver","categories":["cs"],"tags":["note","smt","z3"]},"fields":{"slug":"/blog/2020/01/24/cs/note-a-little-bit-z3-solver/"}}},{"node":{"id":"f4cd1802-ad9e-5d80-81f0-79f85515f2cd","frontmatter":{"title":"NOTE: bounded polymorphism","categories":["cs"],"tags":["note","plt","language","haskell"]},"fields":{"slug":"/blog/2020/01/24/cs/note-bound-polymorphism/"}}},{"node":{"id":"2a3dbf6d-50c5-5b0e-b4c2-4890cfc650a0","frontmatter":{"title":"NOTE: C++ optional","categories":["cs"],"tags":["note","cpp","language"]},"fields":{"slug":"/blog/2020/01/26/cs/note-cpp-optional/"}}},{"node":{"id":"ec5fd544-7096-5098-89a6-0f06a873d47e","frontmatter":{"title":"不會騎 Gogoro 的兩個鄉巴佬","categories":["funny"],"tags":["life"]},"fields":{"slug":"/blog/2020/01/31/funny/two-idiots-who-cant-ride-gogoro/"}}},{"node":{"id":"e5f1b03a-f5cd-5b9b-aa1f-499ea2076fac","frontmatter":{"title":"一些推薦去嘗試看看的程式語言","categories":["cs"],"tags":["language"]},"fields":{"slug":"/blog/2020/02/06/cs/suggested-languages/"}}},{"node":{"id":"10e9c6f2-3474-5ebc-99d2-5c4a97f879ea","frontmatter":{"title":"Binary Encoding of Integer","categories":["cs"],"tags":["fundamental"]},"fields":{"slug":"/blog/2020/03/21/cs/binary-encoding-of-interger/"}}},{"node":{"id":"e2302e39-eea1-5df3-90a6-ef060120cf9e","frontmatter":{"title":"小說推薦：天防者","categories":["book"],"tags":["novel","recommend","skyward","Brandon Sanderson"]},"fields":{"slug":"/blog/2020/04/01/book/recommend-novel-skyward/"}}},{"node":{"id":"ed391a8d-358b-56e3-b55c-f0fd90492aa8","frontmatter":{"title":"NOTE: Seven Bridges of Königsberg and Eulerian graph","categories":["math"],"tags":["note","topology","graph","Eulerian path","Eulerian circuit"]},"fields":{"slug":"/blog/2020/04/03/math/note-seven-bridges-of-konigsberg-eulerian-path/"}}},{"node":{"id":"80d44a1a-1a60-5d93-bf71-d21cbe6d796c","frontmatter":{"title":"NOTE: class member initialization order in C++","categories":["cs"],"tags":["note","cpp","class member","initialization","language"]},"fields":{"slug":"/blog/2020/04/13/cs/note-cpp-member-initialize-order/"}}},{"node":{"id":"757f6fbc-6d36-5b3f-989e-ef792d13aa7e","frontmatter":{"title":"NOTE: simply typed lambda calculus","categories":["cs"],"tags":["note","plt","stlc"]},"fields":{"slug":"/blog/2020/03/08/cs/note-stlc/"}}},{"node":{"id":"047ac64e-b55c-5043-adae-1d5c9321c5cd","frontmatter":{"title":"NOTE: how to install Nix package manager on MacOS Catalina","categories":["cs"],"tags":["note","nix","macos","catalina"]},"fields":{"slug":"/blog/2020/04/17/cs/note-how-to-install-nix-on-macos-catalina/"}}},{"node":{"id":"bc080f44-1eaf-5efd-a61a-ff3f1da28b84","frontmatter":{"title":"From Functor to Applicative","categories":["cs"],"tags":["plt","applicative","language","haskell"]},"fields":{"slug":"/blog/2020/04/11/cs/from-functor-to-applicative/"}}},{"node":{"id":"c6c52b5a-8170-508f-b887-6b1ce2f6ecda","frontmatter":{"title":"How to parse expression with the parser combinator","categories":["cs"],"tags":["compiler","parser","racket"]},"fields":{"slug":"/blog/2020/05/03/cs/how-to-parse-expression-with-parser-combinator/"}}},{"node":{"id":"eff65ed1-fdb8-5069-919f-3983784e1344","frontmatter":{"title":"A beautiful proof: There have infinite primes","categories":["math"],"tags":["prime"]},"fields":{"slug":"/blog/2020/05/09/math/a-beautiful-proof-there-have-infinite-primes/"}}},{"node":{"id":"a30fc310-d412-5f36-95c3-0aee1ea000ae","frontmatter":{"title":"奶油白醬義大利麵","categories":["recipe"],"tags":["spaghetti","white sauce"]},"fields":{"slug":"/blog/2020/05/10/recipe/spaghetti/"}}},{"node":{"id":"0ad29589-2261-5f8f-a0f6-0ef61d5a4833","frontmatter":{"title":"NOTE: 演算法的各種時間複雜度","categories":["cs"],"tags":["note","algorithm","time complexity"]},"fields":{"slug":"/blog/2020/05/12/cs/algorithm-time-complexity/"}}},{"node":{"id":"4bc528e2-46d3-5ff9-9ef6-cd2036d9d741","frontmatter":{"title":"NOTE: 樸素集合論三大悖論","categories":["math"],"tags":["note","set theory","paradox","type theory"]},"fields":{"slug":"/blog/2020/05/31/math/set-theory-three-paradox/"}}},{"node":{"id":"67ccc98d-872a-548d-bec9-c1edd2297252","frontmatter":{"title":"Currying","categories":["cs"],"tags":["racket","macro"]},"fields":{"slug":"/blog/2020/05/31/cs/currying/"}}},{"node":{"id":"d29c9aa1-2b7f-531a-868a-ccdca6371411","frontmatter":{"title":"De Bruijn index: why and how","categories":["cs"],"tags":["plt","de bruijn index","racket"]},"fields":{"slug":"/blog/2020/05/16/cs/de-bruijn-index/"}}},{"node":{"id":"203837be-04fc-567d-9450-33a3f6b02872","frontmatter":{"title":"NOTE: ZFC","categories":["math"],"tags":["note","set theory"]},"fields":{"slug":"/blog/2020/06/11/math/note-zfc/"}}},{"node":{"id":"29b4fcc7-cbe5-57fd-a9c5-7a18c62d8ee6","frontmatter":{"title":"正確實作 substitution 有多難","categories":["cs"],"tags":["plt","utlc"]},"fields":{"slug":"/blog/2020/06/04/cs/how-hard-can-implement-substitution-correctly-be/"}}},{"node":{"id":"c6c0c8c1-db91-54c9-8929-78658c2a90dd","frontmatter":{"title":"NOTE: lambda 2","categories":["cs"],"tags":["note","plt","lambda 2"]},"fields":{"slug":"/blog/2020/06/12/cs/second-order-typed-lambda-calculus/"}}},{"node":{"id":"f49e05b7-906e-5dca-87d5-2a3d39e773db","frontmatter":{"title":"大阪燒","categories":["recipe"],"tags":["okonomiyaki"]},"fields":{"slug":"/blog/2020/06/17/recipe/recipe-okonomiyaki/"}}},{"node":{"id":"b8aae0b8-d789-57eb-b671-75bfa2f4290d","frontmatter":{"title":"NOTE: 演算法的量級","categories":["cs"],"tags":["note","algorithm","order"]},"fields":{"slug":"/blog/2020/06/20/cs/algorithm-order/"}}},{"node":{"id":"a3447c9d-20fc-58e9-a993-f25b1f2b0d8a","frontmatter":{"title":"Extension hack","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/extension-hack/"}}},{"node":{"id":"8dce6fe3-902a-5b3d-9d14-2e302cf0bef5","frontmatter":{"title":"小說推薦：優質國度","categories":["book"],"tags":["novel","recommend","Quality Land"]},"fields":{"slug":"/blog/2020/07/03/book/recommend-novel-quality-land/"}}},{"node":{"id":"3c3130a0-7b7a-5b3f-9f3c-9a23ed88cc72","frontmatter":{"title":"Swift --extension概念入門","categories":["cs"],"tags":["swift","extension"]},"fields":{"slug":"/blog/2017/09/29/cs/swift-extension/"}}},{"node":{"id":"97bb49ed-2ce6-588c-bd14-86dcecaa2116","frontmatter":{"title":"NOTE: Algebra Structure","categories":["math"],"tags":["note","algebra structure","magma","semigroup","monoid","group"]},"fields":{"slug":"/blog/2020/07/12/math/algebra-structure/"}}},{"node":{"id":"ab571f39-a304-515c-9e56-c4bdc3a1d70b","frontmatter":{"title":"Why Logic Programming?","categories":["cs"],"tags":["logic programming","racket","rosette","datalog"]},"fields":{"slug":"/blog/2020/07/15/cs/why-logic-programming/"}}},{"node":{"id":"13404fcc-084f-5f56-8938-c72eb8e96c94","frontmatter":{"title":"Tracing source code of Kubernetes client-go","categories":["cs"],"tags":["kubernetes","golang"]},"fields":{"slug":"/blog/2019/01/25/cs/kube-client-go-source-code-tracing/"}}},{"node":{"id":"602307b1-7619-55ee-91f4-b488361ff1fd","frontmatter":{"title":"程式設計思考（一）核心領域","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2019/11/09/cs/abstraction-of-programming-design/"}}},{"node":{"id":"b88e5107-daac-51de-aace-b9d13d01c5d1","frontmatter":{"title":"Reflection on Working effectively with legacy code --- chapter 6 to 10","categories":["cs"],"tags":["programming","testing"]},"fields":{"slug":"/blog/2019/12/07/cs/reflection-on-working-effectively-with-legacy-code-ch-6-10/"}}},{"node":{"id":"45c7c10b-ebe7-5f8a-9bb8-8384c90744cf","frontmatter":{"title":"Interaction with C in Zig","categories":["cs"],"tags":["zig","c","language"]},"fields":{"slug":"/blog/2019/12/22/cs/interaction-with-c-in-zig/"}}},{"node":{"id":"24cddb21-779c-545e-aff0-dd840418c8d2","frontmatter":{"title":"最後一次抱怨 Go","categories":["cs"],"tags":["golang","language"]},"fields":{"slug":"/blog/2020/01/19/cs/last-time-complain-about-go/"}}},{"node":{"id":"460001d0-2e11-586f-a331-e7294c963060","frontmatter":{"title":"A Racket macro tutorial -- get HTTP parameters easier","categories":["cs"],"tags":["racket","metaprogramming","macro"]},"fields":{"slug":"/blog/2020/02/16/cs/a-racket-macro-tutorial-get-http-parameters-easier/"}}},{"node":{"id":"d0e1e323-7ade-5a75-8c86-dbfd7f94861b","frontmatter":{"title":"Programming 生涯回顧","categories":["cs"],"tags":["career","life"]},"fields":{"slug":"/blog/2020/05/13/cs/programming-life-retro/"}}},{"node":{"id":"2a45e9d5-898d-59d4-84d4-f96458edfd2e","frontmatter":{"title":"程式設計思考（二）操作介面","categories":["cs"],"tags":["programming","beginner","racket"]},"fields":{"slug":"/blog/2020/04/25/cs/abstraction-of-programming-design-2-user-interface/"}}},{"node":{"id":"c029b0a3-b626-5758-b8e5-b6a38c781376","frontmatter":{"title":"Kubernetes Networking: concept and overview from underlying perspective","categories":["cs"],"tags":["networking","kubernetes","linux"]},"fields":{"slug":"/blog/2019/05/18/cs/kubernetes-networking-concept-and-overview/"}}},{"node":{"id":"b9b6191e-1aa2-557b-9cbc-fcf4f689fe93","frontmatter":{"title":"Hindley-Milner type system: Incrementally build way & Make new language in Racket","categories":["cs"],"tags":["plt","hindley milner","racket"]},"fields":{"slug":"/blog/2020/05/24/cs/hindley-milner-system-incremental-build-and-make-new-language/"}}}]}},"pageContext":{"slug":"/blog/2019/12/22/cs/interaction-with-c-in-zig/"}}}