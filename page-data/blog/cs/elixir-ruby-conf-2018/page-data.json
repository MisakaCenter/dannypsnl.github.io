{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/elixir-ruby-conf-2018/","result":{"data":{"markdownRemark":{"html":"<p>Hi everyone, I am Danny.</p>\n<p>Although title contains Ruby, but I won't talk too much on it. Because I did not learn it.</p>\n<p>This conf is my first conf. I learn something at here and I will write down in following text.</p>\n<p>First impress talk is using Elixir &#x26; Kafka write a server can handle 200 millions user communication on it.</p>\n<p>Speaker is a Japanese, so I can't understand his English a lot. But his paper show how does he compare different machine &#x26; different tech stack, so that's fine.</p>\n<p>Second is about chosing style! Speaker show some web library/framework in Ruby/Elixir/Erlang and compare the style between them. He says: Style is about chosing.</p>\n<p>Then a speaker talk how RDoc work, it's useful for me because I am implementing a programming language and hope it can become a language can using in real development.</p>\n<p>p.s. RDoc is Ruby doc generator.</p>\n<p>Then MJIT is the next thing I am impressed. It's about JIT implementation in Ruby.</p>\n<p>Final is Jose(Elixir writer. e is not that one, but I don't know how to type it from my labtop, so sorry for him)'s talk.</p>\n<p>Of course he introducing Elixir for us. But not syntax level, but about design issue: Why we need immutable? Why is actor(Erlang concurrency model)?</p>\n<p>Then he show a new way testing. Test the concept.</p>\n<p>We know test.</p>\n<p>For example:</p>\n<pre><code class=\"language-elixir\">defmodule ExampleTest do\n  use ExUnit.Case\n  doctest Example\n\n  test \"one plus one is two\" do\n    assert 1 + 1 == 2\n  end\nend\n</code></pre>\n<p>But can we really test anything? How many tests we need?</p>\n<p>Take a look</p>\n<pre><code class=\"language-elixir\">defmodule StringContainsTest do\n  use ExUnit.Case\n\n  test \"abc contains ab\" do\n    assert String.contains? \"abc\", \"bc\"\n  end\nend\n</code></pre>\n<p>What about (\"erhonbkd\", \"\")? (\"\", \"\")?</p>\n<p>If we test?</p>\n<pre><code class=\"language-elixir\">defmodule StringContainsTest do\n  use ExUnit.Case\n\n  @spec a :: string()\n  @spec b :: string()\n  test \"a &#x3C;> b should contain a &#x26; b\" do\n    s = a &#x3C;> b\n    assert String.contains? s, a\n    assert String.contains? s, b\n  end\nend\n</code></pre>\n<p>Then just let compiler generating all the edge case you hard to cover.</p>\n<p>This the end.</p>\n<p>And let me talk something, from Jose's speech, I think more.</p>\n<p>If we can using the user's input, testing more thing?</p>\n<p>For example, each time user have using <code>String.contains?</code>.</p>\n<p>We use all string them used to generate test for <code>String.contains?</code></p>\n<p>If it broke. User can find the bug for us!!!</p>\n<p>See you next time.</p>","frontmatter":{"title":"Some thinking from Elixir X Ruby Conf"}}},"pageContext":{"slug":"/blog/cs/elixir-ruby-conf-2018/"}}}