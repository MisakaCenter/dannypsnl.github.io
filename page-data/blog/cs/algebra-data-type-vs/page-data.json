{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/algebra-data-type-vs/","result":{"data":{"markdownRemark":{"html":"<p>I have a long time thought that algebra data type(ADT) is must need.</p>\n<p>In <code>Haskell</code>, ADT looks like this:</p>\n<pre><code class=\"language-hs\">data Term =\n  Variable String\n  | Lambda String Term\n  | Application Term Term\n</code></pre>\n<p>And let's see how to do the same thing in <code>Scala</code>.</p>\n<pre><code class=\"language-scala\">sealed class Term\ncase class Variable(name: String) extends Term\ncase class Lambda(name: String, body: Term) extends Term\ncase class Application(func: Term, arg: Term) extends Term\n</code></pre>\n<p>Both of them are used to represent the <code>Term</code> of lambda calculus.</p>\n<p>They look the same. I can't say that is wrong, but two syntaxes actually have different: extendability.</p>\n<p>Let's say when we use these <code>Term</code> to do static analysis. When we report an error, we usually want to show where does the error happens, so we have to update our <code>Term</code> definition, in <code>Haskell</code>, it's annoying.</p>\n<pre><code class=\"language-hs\">data Term =\n  Variable Location String\n  | Lambda Location String Term\n  | Application Location Term Term\n# and when matching\ncase term of\n  Variable loc name -> # ...\n  Lambda loc parameter body -> # ...\n  # ...\n</code></pre>\n<p>If you already use it everywhere, you would get crazy. Since you have to update every pattern-matching related to <code>Term</code>.</p>\n<p>Oh, we can prevent this. But must do this from the beginning:</p>\n<pre><code class=\"language-hs\">data Term =\n  Term {location :: Location,\n        value :: TermValue}\ndata TermValue =\n  Variable String\n  | Lambda String Term\n  | Application Term Term\n</code></pre>\n<p>Otherwise when you want to change it later, good luck.</p>\n<p>But in <code>Scala</code>, things different.</p>\n<pre><code class=\"language-scala\">sealed class Term {\n  val location: Location = new Location\n}\ncase class Variable(name: String) extends Term\ncase class Lambda(name: String, body: Term) extends Term\ncase class Application(func: Term, arg: Term) extends Term\n</code></pre>\n<p>I'm not trying to show a full workable version(that anyway would be complex in any language). But showing that <code>class</code> help us to add a new field so easily. And proof that <code>class</code> can totally replace algebra data type.</p>","frontmatter":{"title":"Algebra data type vs Class"}}},"pageContext":{"slug":"/blog/cs/algebra-data-type-vs/"}}}