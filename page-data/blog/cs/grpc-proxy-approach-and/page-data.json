{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/grpc-proxy-approach-and/","result":{"data":{"markdownRemark":{"html":"<p>A few weeks ago, we re-discuss the config setup issue; we found generating a new, valid config is too hard for anyone.\nYou must remember all the field, what we need at this time, some duplicate, some would change by the environment,\nall the stuff became a setting nightmare!</p>\n<p>So we start an epic to simplify the config definition and generation; one of these tasks was to create a CLI for config control.\nAnd we have to let customer could upload or download their configs by this CLI tool\n. We have some gRPC services for internal exchanging configs, so we want to reuse them,\nand we have an api-gateway for security filtering the connection already, so we also want to base on it\n. Then I start my researching about gRPC proxy server.</p>\n<p>The thing we found was: <a href=\"https://github.com/mwitkow/grpc-proxy\">https://github.com/mwitkow/grpc-proxy</a>.\nIt's a proxy base on gRPC stream. And it's easy to set up. That's the main reason we pick it. A prototype didn't take a long time:</p>\n<pre><code class=\"language-go\">server := grpc.NewServer(\n    grpc.CustomCodec(proxy.Codec()),\n    grpc.UnknownServiceHandler(proxy.TransparentHandler(director)))\n\nfunc director(ctx context.Context, fullMethodName string) (context.Context, *grpc.ClientConn, error) {\n  // ignore implementation of dispatching to different service part\n  // I would mention it later\n}\n</code></pre>\n<p>And I found the gRPC server is <code>http.Server</code>, sounds great!</p>\n<pre><code>func AddRoutes(group *gin.RouterGroup) {\n    group.POST(\"/\", func(c *gin.Context) {\n        server.ServeHTTP(c.Writer, c.Request)\n    })\n}\n\n// main\ng := handler.Group(\"/grpc\")\nAddRoutes(g)\n</code></pre>\n<p>Everything looks great; we send the request to our <code>domain/grpc</code> as our gRPC endpoint.\nBut that won't work! gRPC basing on HTTP/2, and the request path of the gRPC request is <code>/packageName.ServiceName/RPCName</code>,\nand it's hardcode in generated <code>*.pb.go</code> files. Means we can't change the path of it to <code>/grpc</code> endpoint,\nand we also can't add this subpath into the domain argument of <code>grpc.Dial</code> this function, of course,\nwe could add some hacks to changing the path, and it's workable. But that's impossible to ask every user to do that.\nAnd emit gRPC as wildcard path in <code>gin</code> is very hard to correct it, although it could be(since gRPC path format is quite not normal,\nthat's have meager rate we created some paths like that), so we buy another domain for the gRPC endpoint.</p>\n<p>Now, the code would be:</p>\n<pre><code class=\"language-go\">// We were switching the emit group by domains\n// this is part of the grpc domain\ng := handler.Group(\"/\")\nAddRoutes(g)\n\nfunc AddRoutes(group *gin.RouterGroup) {\n    // we won't use that wildcard path directly but still have to write it down for path matching\n    group.POST(\"/*path\", func(c *gin.Context) {\n        server.ServeHTTP(c.Writer, c.Request)\n    })\n}\n</code></pre>\n<p>Now let's back to the dispatching request part, in <code>director</code>, we have <code>fullMethodName</code>,\nwhich is the gRPC request path, we could use it as our target recognize:</p>\n<pre><code class=\"language-go\">func director(ctx context.Context, fullMethodName string) (context.Context, *grpc.ClientConn, error) {\n    // we use config to expose the services and store in a map\n    // here is just a pseudo code, but got the idea is enough\n    target, exist := services[fullMethodName]\n    if !exist {\n        return ctx, nil, fmt.Errorf(\"no service found for %s\", fullMethodName)\n    }\n    clientConn, err := grpc.DialContext(\n        ctx,\n        target,\n        grpc.WithCodec(grpcproxy.Codec()),\n        // ignore TLS part, but that's very easy to get it from official guide\n    )\n    return ctx, clientConn, err\n}\n</code></pre>\n<p>The article is short; we also found a lot of problems with this task, hope you can even get some fun with this,\njust like us, pain but joy, peace.</p>","frontmatter":{"title":"gRPC proxy: approach & pain"}}},"pageContext":{"slug":"/blog/cs/grpc-proxy-approach-and/"}}}