{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/practical-issue-about-dns/","result":{"data":{"markdownRemark":{"html":"<p>I have to create a checker for our DNS server.</p>\n<p>Our DNS server will return it's config via <code>TXT</code>.</p>\n<p>Code would like:</p>\n<pre><code class=\"language-go\">package main\n\nimport \"github.com/miekg/dns\"\n\n// func main\nm := dns.Msg{}\n// `google.com.` is correct format, `.` is required!\nm.SetQuestion(\"google.com.\", dns.TypeTXT)\nc := dns.Client{}\n// write out port 53(:53) is required, dns package we used at here won't automatically fix port to 53.\n// Unlike some cli tool such as Dig\nresponse, _, err := c.Exchange(&#x26;m, \"8.8.8.8:53\")\nfor _, t := range r.Answer {\n    txt := t.(*dns.TXT)\n    // dns.TXT.Txt is []string\n    for _, t := txt.Txt {\n        // t is string, now you can use it\n        println(t)\n    }\n}\n</code></pre>\n<p>But our config stream is too big to over the limit of UDP! And we must get it.</p>\n<p><strong>RFC 6891</strong>:</p>\n<blockquote>\n<p>Traditional DNS messages are limited to 512 octets in size when sent over UDP [RFC1035].</p>\n</blockquote>\n<p>After researching, I find we can extend DNS packet size by EDNS0.</p>\n<p><strong>RFC 6891</strong>:</p>\n<blockquote>\n<p>EDNS(0) specifies a way to advertise additional features such as\nlarger response size capability, which is intended to help avoid\ntruncated UDP responses, which in turn cause retry over TCP. It\ntherefore provides support for transporting these larger packet sizes\nwithout needing to resort to TCP for transport.</p>\n</blockquote>\n<p>Code is:</p>\n<pre><code class=\"language-go\">m.SetEdns0(4096, true)\n</code></pre>\n<p>In <code>SetEdns0</code>:</p>\n<pre><code class=\"language-go\">func (dns *Msg) SetEdns0(udpsize uint16, do bool) *Msg {\n    e := new(OPT)\n    e.Hdr.Name = \".\"\n    e.Hdr.Rrtype = TypeOPT\n    e.SetUDPSize(udpsize)\n    if do {\n        e.SetDo()\n    }\n    dns.Extra = append(dns.Extra, e)\n    return dns\n}\n</code></pre>\n<p>The code that change UDP size is <code>e.SetUDPSize</code>, so let's take a look:</p>\n<pre><code class=\"language-go\">func (rr *OPT) SetUDPSize(size uint16) {\n    rr.Hdr.Class = size\n}\n</code></pre>\n<p>Type of <code>OPT.Hdr</code> is <code>RR_Header</code>, then we dig into <strong>RFC 6891</strong>, at page 5 you can find:</p>\n<pre><code>The fixed part of an OPT RR is structured as follows:\n\n+------------+--------------+------------------------------+\n| Field Name | Field Type   | Description                  |\n+------------+--------------+------------------------------+\n| NAME       | domain name  | MUST be 0 (root domain)      |\n| TYPE       | u_int16_t    | OPT (41)                     |\n| CLASS      | u_int16_t    | requestor's UDP payload size |\n| TTL        | u_int32_t    | extended RCODE and flags     |\n| RDLEN      | u_int16_t    | length of all RDATA          |\n| RDATA      | octet stream | {attribute,value} pairs      |\n+------------+--------------+------------------------------+\n</code></pre>\n<p>As expected, <code>RR_Header.Class</code> will change UDP payload size. Celebrate it!!!</p>\n<p>More info:</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc2671\">RFC 2671</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc6891\">RFC 6891</a></li>\n<li><a href=\"https://github.com/miekg/dns\">miekg/dns</a></li>\n</ul>","frontmatter":{"title":"Practical issue about DNS -- EDNS0"}}},"pageContext":{"slug":"/blog/cs/practical-issue-about-dns/"}}}