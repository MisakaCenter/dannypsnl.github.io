{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/how-to-test-haskell/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Before you start to read, ensure you're using Cabal >= 3.0 to manage your project.</p>\n<p>For a <strong>Haskell</strong> project, I usually use Cabal, do not have any special reason. In the <code class=\"language-text\">xxx.cabal</code> file, we can define some common dependencies by <code class=\"language-text\">common</code> block:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-- just let you know how does the file should look like\n-- with full content people can understand the structure better\ncabal-version:       3.0\n\nname:                your-module\nversion:             0.1.0.0\nlicense:             MIT\nlicense-file:        LICENSE\nauthor:              your-name\nmaintainer:          your-name@email.com\n-- Extra files to be distributed with the package, such as examples or a\n-- README.\nextra-source-files:  CHANGELOG.md\n\n-- Common block\ncommon shared-properties\n  default-language: Haskell2010\n  build-depends:\n    base == 4.*, mtl &gt;= 2.2\n  ghc-options:\n    -Wall</code></pre></div>\n<p>Then we can add <code class=\"language-text\">test-suite</code> block like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-- common block at here\nlibrary\n  import: shared-properties\n  exposed-modules:     YourModule\n  other-modules:\n  -- Directories containing source files.\n  hs-source-dirs:      src\n  default-language:    Haskell2010\n\ntest-suite spec\n  import: shared-properties\n  type: exitcode-stdio-1.0\n  other-modules: YourModuleSpec SpecHelper\n  hs-source-dirs: test\n  main-is: Spec.hs\n  build-depends: hspec &gt;= 2.7\n                 , hspec-discover &gt;= 2.7\n                 , your-module\n  default-language:    Haskell2010</code></pre></div>\n<p>Create <code class=\"language-text\">$project-path/test/Spec.hs</code> and put:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token comment\">{-# OPTIONS_GHC -F -pgmF hspec-discover #-}</span></code></pre></div>\n<p>And create <code class=\"language-text\">$project-path/test/SpecHelper.hs</code> and put:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">module</span> <span class=\"token constant\">SpecHelper</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">Test.Hspec</span>\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span>\n\n<span class=\"token import_statement\"><span class=\"token keyword\">import</span> Test.Hspec</span></code></pre></div>\n<p>Finally, create <code class=\"language-text\">$project-path/test/YourModuleSpec.hs</code> and put:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">module</span> <span class=\"token constant\">YourModuleSpec</span> <span class=\"token keyword\">where</span>\n<span class=\"token import_statement\"><span class=\"token keyword\">import</span> SpecHelper</span>\n<span class=\"token import_statement\"><span class=\"token keyword\">import</span> YourModule</span>\n\n<span class=\"token hvariable\">spec</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Spec</span>\n<span class=\"token hvariable\">spec</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">describe</span> <span class=\"token string\">\"Your module\"</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">context</span> <span class=\"token string\">\"has a function add can add two nature numbers\"</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">(</span><span class=\"token hvariable\">add</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">`shouldBe`</span> <span class=\"token number\">3</span>\n\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">hspec</span> <span class=\"token hvariable\">spec</span></code></pre></div>\n<p>Then run commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cabal new-update\ncabal new-install --only-dependencies\ncabal <span class=\"token function\">install</span> hspec-discover\ncabal new-configure --enable-tests\ncabal new-test</code></pre></div>\n<p>We finish the setup of testing now.</p>","frontmatter":{"title":"How to test in Haskell: HSpec setup","categories":["cs"],"tags":["haskell","beginner","testing"]}}},"pageContext":{"slug":"/blog/cs/how-to-test-haskell/"}}}