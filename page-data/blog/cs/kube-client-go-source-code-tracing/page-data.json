{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/kube-client-go-source-code-tracing/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Whole thing is started from <strong>Ingress</strong> this feature of <strong>Kubernetes</strong>.\nBut today I'm not going to talk too much about it, basically just I have to let <strong>Ingress Controller</strong>\nwill send packets to our <strong>Router</strong> so that we could do the thing we want,\nif you are interested in our <strong>Router</strong>, you can more infos from <a href=\"https://glasnostic.com/blog\">our blog</a> and\ndemo by just login to play with it.</p>\n<p>Anyway, the thing I'm going to do for this is I have to create a proxy for real kubernetes API server,\nand modify the real data to what we want. To do that, I have to understand how <a href=\"https://github.com/kubernetes/client-go\">client-go</a>\n(<strong>Ingress</strong> use client-go to get info, of course) send requests and what it expected. Let's start!</p>\n<blockquote>\n<p>NOTE: I just mention some part of codes, not explaining whole big piture</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">\tepEventHandler <span class=\"token operator\">:=</span> cache<span class=\"token punctuation\">.</span>ResourceEventHandlerFuncs<span class=\"token punctuation\">{</span>\n\t\tAddFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tupdateCh<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> Event<span class=\"token punctuation\">{</span>\n\t\t\t\tType<span class=\"token punctuation\">:</span> CreateEvent<span class=\"token punctuation\">,</span>\n\t\t\t\tObj<span class=\"token punctuation\">:</span>  obj<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tDeleteFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tupdateCh<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> Event<span class=\"token punctuation\">{</span>\n\t\t\t\tType<span class=\"token punctuation\">:</span> DeleteEvent<span class=\"token punctuation\">,</span>\n\t\t\t\tObj<span class=\"token punctuation\">:</span>  obj<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tUpdateFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">,</span> cur <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\toep <span class=\"token operator\">:=</span> old<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">)</span>\n\t\t\tcep <span class=\"token operator\">:=</span> cur<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">DeepEqual</span><span class=\"token punctuation\">(</span>cep<span class=\"token punctuation\">.</span>Subsets<span class=\"token punctuation\">,</span> oep<span class=\"token punctuation\">.</span>Subsets<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tupdateCh<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span> Event<span class=\"token punctuation\">{</span>\n\t\t\t\t\tType<span class=\"token punctuation\">:</span> UpdateEvent<span class=\"token punctuation\">,</span>\n\t\t\t\t\tObj<span class=\"token punctuation\">:</span>  cur<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These codes at <a href=\"https://github.com/kubernetes/ingress-nginx\">ingress-nginx</a> tag <code class=\"language-text\">nginx-v0.20.0</code>(at following context we just use this tag),\nfile <code class=\"language-text\">internal/ingress/controller/store/store.go</code> line <code class=\"language-text\">446</code></p>\n<p>The purpose is emit these callbacks into <code class=\"language-text\">SharedInformer</code> to get kubernetes events for updating the datas in store,\nto generate nginx configuration for load balancing these pods.</p>\n<p>Ok, so where we use <code class=\"language-text\">epEventHandler</code>? We would see it be passed into <code class=\"language-text\">store.informers.Endpoint</code> at\nthe same function, line <code class=\"language-text\">519</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">store<span class=\"token punctuation\">.</span>informers<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">.</span><span class=\"token function\">AddEventHandler</span><span class=\"token punctuation\">(</span>epEventHandler<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we should care two things</p>\n<ul>\n<li>what is <code class=\"language-text\">Endpoint</code>?</li>\n<li>how it use the functions sent into <code class=\"language-text\">AddEventHandler</code>?</li>\n</ul>\n<p>Let's keep dig into the code, we would see <code class=\"language-text\">AddEventHandler</code> is a method of an <code class=\"language-text\">interface</code>: <code class=\"language-text\">SharedInformer</code>,\nyes, we just talk about it, now we see it. <code class=\"language-text\">SharedInformer</code> is defined under <code class=\"language-text\">k8s.io/client-go/tools/cache/shared_informer.go</code>\n(remember, here what I'm tracing is the <code class=\"language-text\">client-go</code> under <code class=\"language-text\">ingress-nginx</code> vendor, so it might outdate with latest <code class=\"language-text\">client-go</code>)</p>\n<p>The only implementor of <code class=\"language-text\">SharedInformer</code> is <code class=\"language-text\">sharedIndexInformer</code>(still at same file),\nit's a structure, here is the real code of <code class=\"language-text\">AddEventHandler</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>sharedIndexInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">AddEventHandler</span><span class=\"token punctuation\">(</span>handler ResourceEventHandler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ts<span class=\"token punctuation\">.</span><span class=\"token function\">AddEventHandlerWithResyncPeriod</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>defaultEventHandlerResyncPeriod<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>sharedIndexInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">AddEventHandlerWithResyncPeriod</span><span class=\"token punctuation\">(</span>handler ResourceEventHandler<span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore, here would do some period syncing</span>\n\tlistener <span class=\"token operator\">:=</span> <span class=\"token function\">newProcessListener</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> resyncPeriod<span class=\"token punctuation\">,</span> <span class=\"token function\">determineResyncPeriod</span><span class=\"token punctuation\">(</span>resyncPeriod<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>resyncCheckPeriod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span>clock<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> initialBufferSize<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ignore, here would emit `listener` into `processer`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">newProcessListener</span><span class=\"token punctuation\">(</span>handler ResourceEventHandler<span class=\"token punctuation\">,</span> requestedResyncPeriod<span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> now time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">,</span> bufferSize <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>processorListener <span class=\"token punctuation\">{</span>\n\tret <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>processorListener<span class=\"token punctuation\">{</span>\n\t\tnextCh<span class=\"token punctuation\">:</span>                <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\taddCh<span class=\"token punctuation\">:</span>                 <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\thandler<span class=\"token punctuation\">:</span>               handler<span class=\"token punctuation\">,</span>\n\t\tpendingNotifications<span class=\"token punctuation\">:</span>  <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">NewRingGrowing</span><span class=\"token punctuation\">(</span>bufferSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\trequestedResyncPeriod<span class=\"token punctuation\">:</span> requestedResyncPeriod<span class=\"token punctuation\">,</span>\n\t\tresyncPeriod<span class=\"token punctuation\">:</span>          resyncPeriod<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tret<span class=\"token punctuation\">.</span><span class=\"token function\">determineNextResync</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To here, we should stop this part, because we can't get more from these.\nSo I go back to how to use <code class=\"language-text\">sharedIndexInformer</code></p>\n<p>I found type of <code class=\"language-text\">store.informers</code> have a method <code class=\"language-text\">Run</code> that would be called by store,\nthat's mean what it call is the point we care, that's <code class=\"language-text\">store.informers.Endpoint</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span>Informer<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh <span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// this is *sharedIndexInformer.Run</span>\n\t<span class=\"token keyword\">go</span> i<span class=\"token punctuation\">.</span>Endpoint<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ignore, all resource is working under the same way</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>sharedIndexInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// this is last line, I ignore others codes</span>\n\ts<span class=\"token punctuation\">.</span>controller<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then I take a look at how controller works</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Run begins processing items, and will continue until a value is sent down stopCh.</span>\n<span class=\"token comment\">// It's an error to call Run more than once.</span>\n<span class=\"token comment\">// Run blocks; call via go.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>controller<span class=\"token punctuation\">)</span> <span class=\"token function\">Run</span><span class=\"token punctuation\">(</span>stopCh <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> utilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleCrash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">&lt;-</span>stopCh\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">NewReflector</span><span class=\"token punctuation\">(</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ListerWatcher<span class=\"token punctuation\">,</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ObjectType<span class=\"token punctuation\">,</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">,</span>\n\t\tc<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>FullResyncPeriod<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span>ShouldResync <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>ShouldResync\n\tr<span class=\"token punctuation\">.</span>clock <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>clock\n\n\tc<span class=\"token punctuation\">.</span>reflectorMutex<span class=\"token punctuation\">.</span><span class=\"token function\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tc<span class=\"token punctuation\">.</span>reflector <span class=\"token operator\">=</span> r\n\tc<span class=\"token punctuation\">.</span>reflectorMutex<span class=\"token punctuation\">.</span><span class=\"token function\">Unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword\">var</span> wg wait<span class=\"token punctuation\">.</span>Group\n\t<span class=\"token keyword\">defer</span> wg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">StartWithChannel</span><span class=\"token punctuation\">(</span>stopCh<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>Run<span class=\"token punctuation\">)</span>\n\n\twait<span class=\"token punctuation\">.</span><span class=\"token function\">Until</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>processLoop<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">,</span> stopCh<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The point is <code class=\"language-text\">wg.StartWithChannel(stopCh, r.Run)</code>, in <code class=\"language-text\">reflector.Run</code>,\nit call <code class=\"language-text\">r.ListAndWatch(stopCh)</code>, and <code class=\"language-text\">ListAndWatch</code> is based on <code class=\"language-text\">listWatcher</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">list<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>listerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: Failed to list %v: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We would go back here later, let's find out what is <code class=\"language-text\">listerWatcher</code></p>\n<p>We set <code class=\"language-text\">store.informers.Endpoint</code> by this <code class=\"language-text\">store.informers.Endpoint = infFactory.Core().V1().Endpoints().Informer()</code> at\n<code class=\"language-text\">internal/ingress/controller/store/store.go:L264</code></p>\n<p>Then we see <code class=\"language-text\">infFactory</code>, line <code class=\"language-text\">257</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">infFactory <span class=\"token operator\">:=</span> informers<span class=\"token punctuation\">.</span><span class=\"token function\">NewSharedInformerFactoryWithOptions</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> resyncPeriod<span class=\"token punctuation\">,</span>\n\tinformers<span class=\"token punctuation\">.</span><span class=\"token function\">WithNamespace</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\tinformers<span class=\"token punctuation\">.</span><span class=\"token function\">WithTweakListOptions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">informer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>endpointsInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">Informer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> cache<span class=\"token punctuation\">.</span>SharedIndexInformer <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> f<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span><span class=\"token function\">InformerFor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>defaultInformer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// defaultInformer</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span>endpointsInformer<span class=\"token punctuation\">)</span> <span class=\"token function\">defaultInformer</span><span class=\"token punctuation\">(</span>client kubernetes<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">)</span> cache<span class=\"token punctuation\">.</span>SharedIndexInformer <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">NewFilteredEndpointsInformer</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>namespace<span class=\"token punctuation\">,</span> resyncPeriod<span class=\"token punctuation\">,</span> cache<span class=\"token punctuation\">.</span>Indexers<span class=\"token punctuation\">{</span>cache<span class=\"token punctuation\">.</span>NamespaceIndex<span class=\"token punctuation\">:</span> cache<span class=\"token punctuation\">.</span>MetaNamespaceIndexFunc<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>tweakListOptions<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// NewFilteredEndpointsInformer</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewFilteredEndpointsInformer</span><span class=\"token punctuation\">(</span>client kubernetes<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> namespace <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> resyncPeriod time<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">,</span> indexers cache<span class=\"token punctuation\">.</span>Indexers<span class=\"token punctuation\">,</span> tweakListOptions internalinterfaces<span class=\"token punctuation\">.</span>TweakListOptionsFunc<span class=\"token punctuation\">)</span> cache<span class=\"token punctuation\">.</span>SharedIndexInformer <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">NewSharedIndexInformer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token operator\">&amp;</span>cache<span class=\"token punctuation\">.</span>ListWatch<span class=\"token punctuation\">{</span>\n\t\t\tListFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>options metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>runtime<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> tweakListOptions <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">tweakListOptions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">CoreV1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Endpoints</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">List</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\tWatchFunc<span class=\"token punctuation\">:</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>options metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>watch<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> tweakListOptions <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">tweakListOptions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">return</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">CoreV1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Endpoints</span><span class=\"token punctuation\">(</span>namespace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">&amp;</span>corev1<span class=\"token punctuation\">.</span>Endpoints<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tresyncPeriod<span class=\"token punctuation\">,</span>\n\t\tindexers<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ha, we got <code class=\"language-text\">ListWatch</code> now, it would call an instance of <code class=\"language-text\">*kubernetes.ClientSet</code> to get the info it wanted!</p>\n<p>Now we can back to <code class=\"language-text\">ListAndWatch</code>, let's take a look at the details of it.</p>\n<p>In fact, I'm more focused on watch API, because it's a little bit weird.\nI found it's server with keep sending data until client part close the connection.\nHow it did it? At <code class=\"language-text\">k8s.io/client-go/tools/cache/reflector.go:L226</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// give the stopCh a chance to stop the loop, even in case of continue statements further down on errors</span>\n\t\t<span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>stopCh<span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\ttimeoutSeconds <span class=\"token operator\">:=</span> <span class=\"token function\">int64</span><span class=\"token punctuation\">(</span>minWatchTimeout<span class=\"token punctuation\">.</span><span class=\"token function\">Seconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Float64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\toptions <span class=\"token operator\">=</span> metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">{</span>\n\t\t\tResourceVersion<span class=\"token punctuation\">:</span> resourceVersion<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token comment\">// We want to avoid situations of hanging watchers. Stop any wachers that do not</span>\n\t\t\t<span class=\"token comment\">// receive any events within the timeout window.</span>\n\t\t\tTimeoutSeconds<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>timeoutSeconds<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tr<span class=\"token punctuation\">.</span>metrics<span class=\"token punctuation\">.</span>numberOfWatches<span class=\"token punctuation\">.</span><span class=\"token function\">Inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\tw<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>listerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">switch</span> err <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> io<span class=\"token punctuation\">.</span>EOF<span class=\"token punctuation\">:</span>\n\t\t\t\t<span class=\"token comment\">// watch closed normally</span>\n\t\t\t<span class=\"token keyword\">case</span> io<span class=\"token punctuation\">.</span>ErrUnexpectedEOF<span class=\"token punctuation\">:</span>\n\t\t\t\tglog<span class=\"token punctuation\">.</span><span class=\"token function\">V</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Infof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: Watch for %v closed with unexpected EOF: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n\t\t\t\tutilruntime<span class=\"token punctuation\">.</span><span class=\"token function\">HandleError</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: Failed to watch %v: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\">// If this is \"connection refused\" error, it means that most likely apiserver is not responsive.</span>\n\t\t\t<span class=\"token comment\">// It doesn't make sense to re-list all objects because most likely we will be able to restart</span>\n\t\t\t<span class=\"token comment\">// watch where we ended.</span>\n\t\t\t<span class=\"token comment\">// If that's the case wait and resend watch request.</span>\n\t\t\t<span class=\"token keyword\">if</span> urlError<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>url<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> opError<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> urlError<span class=\"token punctuation\">.</span>Err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>net<span class=\"token punctuation\">.</span>OpError<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> errno<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> opError<span class=\"token punctuation\">.</span>Err<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">.</span>Errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> syscall<span class=\"token punctuation\">.</span>ECONNREFUSED <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token keyword\">continue</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">watchHandler</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>resourceVersion<span class=\"token punctuation\">,</span> resyncerrc<span class=\"token punctuation\">,</span> stopCh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> errorStopRequested <span class=\"token punctuation\">{</span>\n\t\t\t\tglog<span class=\"token punctuation\">.</span><span class=\"token function\">Warningf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: watch of %v ended with: %v\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>expectedType<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Of course is a endless loop, would stop by channel or return.</p>\n<p>The tricky part is it check error content, if it's a probable EOF, it would keep taking data rather stop connection.</p>\n<p>Ok, everything seems make sense right now, but that's not enough, I'm very confused by why it could receiving a JSON data by\nsuch as a streaming way, so let's go back to see <code class=\"language-text\">client.CoreV1().Endpoints(namespace).Watch(options)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// Watch returns a watch.Interface that watches the requested endpoints.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>endpoints<span class=\"token punctuation\">)</span> <span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span>opts metav1<span class=\"token punctuation\">.</span>ListOptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>watch<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\topts<span class=\"token punctuation\">.</span>Watch <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">Namespace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>ns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">Resource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"endpoints\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">VersionedParams</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>opts<span class=\"token punctuation\">,</span> scheme<span class=\"token punctuation\">.</span>ParameterCodec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n\t\t<span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Watch attempts to begin watching the requested location.</span>\n<span class=\"token comment\">// Returns a watch.Interface, or an error.</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">*</span>Request<span class=\"token punctuation\">)</span> <span class=\"token function\">Watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>watch<span class=\"token punctuation\">.</span>Interface<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">WatchWithSpecificDecoders</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>body io<span class=\"token punctuation\">.</span>ReadCloser<span class=\"token punctuation\">)</span> streaming<span class=\"token punctuation\">.</span>Decoder <span class=\"token punctuation\">{</span>\n\t\t\tframer <span class=\"token operator\">:=</span> r<span class=\"token punctuation\">.</span>serializers<span class=\"token punctuation\">.</span>Framer<span class=\"token punctuation\">.</span><span class=\"token function\">NewFrameReader</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> streaming<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>framer<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>serializers<span class=\"token punctuation\">.</span>StreamingSerializer<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\tr<span class=\"token punctuation\">.</span>serializers<span class=\"token punctuation\">.</span>Decoder<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And I found the point is <code class=\"language-text\">r.serializers</code>, and the shit thing is it still is a function send by external code.</p>\n<p>If you trace back then you would find it's from <code class=\"language-text\">*RESTClient.serializers</code>,\nat <code class=\"language-text\">k8s.io/client-go/rest/client.go</code>, line <code class=\"language-text\">225</code> and <code class=\"language-text\">227</code> send this into <code class=\"language-text\">NewRequest</code></p>\n<p>And you found it's created at line <code class=\"language-text\">108</code> in same file, <code class=\"language-text\">serializers, err := createSerializers(config)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">createSerializers</span><span class=\"token punctuation\">(</span>config ContentConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Serializers<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ignore, we don't care them since we just use `StreamSerializer` of `Serializers`</span>\n\t<span class=\"token keyword\">if</span> info<span class=\"token punctuation\">.</span>StreamSerializer <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\ts<span class=\"token punctuation\">.</span>StreamingSerializer <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>StreamSerializer<span class=\"token punctuation\">.</span>Serializer\n\t\ts<span class=\"token punctuation\">.</span>Framer <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span>StreamSerializer<span class=\"token punctuation\">.</span>Framer\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We would see the type of <code class=\"language-text\">StreamSerializer</code> is <code class=\"language-text\">runtime.Serializer</code>, it's an interface, and since we are sending JSON data,\nso we go to the JSON one implementor of it to see it's <code class=\"language-text\">Decode</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\tjsoniter <span class=\"token string\">\"github.com/json-iterator/go\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>After see that, I know the trace already done, because my question already been answered, them use <code class=\"language-text\">github.com/json-iterator/go</code> this library</p>\n<p>I guess I would talk about something about how to create a kube API proxy with modifying datas after completing my proxy of kube API server.\n(It's really hard XD)</p>\n<p>I guess today the most interesting thing we learned is Go <code class=\"language-text\">*http.Response</code> is a <code class=\"language-text\">ReadCloser</code>!(How Kubernetes done their watch trick)</p>\n<p>Anyway, thanks for read, hope these could help you more detailed understanding Kubernetes client implementation\nand be a little start point to read more about it.</p>","frontmatter":{"title":"Tracing source code of Kubernetes client-go","categories":["cs"],"tags":["kubernetes","golang"]}}},"pageContext":{"slug":"/blog/cs/kube-client-go-source-code-tracing/"}}}