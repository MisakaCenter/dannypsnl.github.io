{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/haskell-quick-start/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p><strong>Haskell</strong> resource is a little bit outdated and if you take a look at <a href=\"https://www.haskell.org/documentation/\">https://www.haskell.org/documentation/</a> you would found there are several tutorials, make choose one be a hard thing. So I decide to make a simple quick start to record how I start with <strong>Haskell</strong>.</p>\n<p>Before we typing any code, we have to install <strong>Haskell</strong>, please take a look at <a href=\"https://www.haskell.org/downloads/\">https://www.haskell.org/downloads/</a>.</p>\n<h3>Binding</h3>\n<p>Let's start from a hello world example:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">main</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"Hello, World!\"</span></code></pre></div>\n<p>We call it <code class=\"language-text\">helloworld.hs</code>, now run <code class=\"language-text\">runhaskell helloworld.hs</code>, should get: <code class=\"language-text\">Hello, World!</code> as an output on the screen.</p>\n<p>We can find <code class=\"language-text\">main</code> appears twice. We call the first one as type binding, the second one as binding. Type binding shows the type of <code class=\"language-text\">main</code>, binding shows what would <code class=\"language-text\">main</code> do. At here <code class=\"language-text\">IO</code> is a kind of special type, its called <strong>Monad</strong>, and we are not going to explain it but can see that the body of <code class=\"language-text\">main</code> has a notation <code class=\"language-text\">do</code>, under <code class=\"language-text\">do</code> notation would be a special syntax that helps us create a DSL for certain domain, here is <code class=\"language-text\">IO</code>.</p>\n<p>Keep going we add read into our program:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token import_statement\"><span class=\"token keyword\">import</span>           System.IO</span>\n\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">who</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">getLine</span>\n  <span class=\"token builtin\">putStrLn</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">++</span> <span class=\"token hvariable\">who</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">getLine</code> would read the text you typed until a newline in as a string. Here we see a new symbol <code class=\"language-text\">&lt;-</code>, it might weird at the beginning that it means <code class=\"language-text\">=</code> in <code class=\"language-text\">do</code> notation(we actually can use <code class=\"language-text\">let who =</code> replace <code class=\"language-text\">&lt;-</code>). What <code class=\"language-text\">&lt;-</code> do is make a <code class=\"language-text\">Monad a</code> be <code class=\"language-text\">a</code>. Then we can use it at the next function. <code class=\"language-text\">(&quot;Hello, &quot; ++ who)</code> is required, since <strong>Haskell</strong> doesn't use <code class=\"language-text\">function_name(parameter*)</code> this form, distinguish the argument belongs to which function call can be quite complex even undecidable and to make our brain work easier better add <code class=\"language-text\">()</code> for all function call, and tend to use temporary variables for the argument to explain code better.</p>\n<p>Now, you probably already found <strong>Haskell</strong> does not use <code class=\"language-text\">{}</code> for block body. In <strong>Haskell</strong>, indent has meaning. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token import_statement\"><span class=\"token keyword\">import</span>           System.Environment</span>\n<span class=\"token import_statement\"><span class=\"token keyword\">import</span>           System.IO</span>\n\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">args</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">getArgs</span>\n  <span class=\"token keyword\">case</span> <span class=\"token hvariable\">args</span> <span class=\"token keyword\">of</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"no arg\"</span>\n    <span class=\"token punctuation\">[</span><span class=\"token hvariable\">one</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"one arg\"</span>\n    <span class=\"token hvariable\">rest</span> <span class=\"token operator\">-></span>\n      <span class=\"token keyword\">case</span> <span class=\"token hvariable\">rest</span> <span class=\"token keyword\">of</span>\n        <span class=\"token punctuation\">[</span><span class=\"token hvariable\">one</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">two</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"two args\"</span>\n        <span class=\"token hvariable\">_</span>          <span class=\"token operator\">-></span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"many args\"</span></code></pre></div>\n<p>We use <code class=\"language-text\">getArgs</code> from <code class=\"language-text\">System.Environment</code> and <strong>case of</strong> syntax. Can see how indent makes the <strong>case</strong> syntax became different blocks. Of course, I would say better do not have too many indents, its quite easy to confuse yourself.</p>\n<p>p.s. I didn't explain list patterns in matching, I hope the output is clean enough to understand those list patterns.</p>\n<p>Now let's back to type binding and binding, so why we have to write them twice? In fact, we can ignore type binding:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"Hello, World!\"</span></code></pre></div>\n<p>I really don't like this idea, at the beginning it sounds like a good idea: Let compiler inferences and tells us what is the type of binding. This is a trap when the compiler does inference, it has to rely on the using case to guess the type of binding. We have a trivial example:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token builtin\">id</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span></code></pre></div>\n<p>When we do function call by <code class=\"language-text\">id 1</code>, <code class=\"language-text\">x</code> might be <code class=\"language-text\">Int</code>, when we call it by <code class=\"language-text\">id &quot;wow&quot;</code>, <code class=\"language-text\">x</code> might be <code class=\"language-text\">String</code>. Now imagine a bigger function and the type of it was always changing since we didn't give it a type, can anyone work with it quite happy? I don't think so. So make sure you give it a good type. In fact, the semantic checker would warn those global level binding which didn't with type binding. Well, we can't ignore any type of bindings? I think that's ok in <code class=\"language-text\">where</code> clause. In <strong>Haskell</strong> <code class=\"language-text\">where</code> clause can put some helpers which we don't want other functions to use it.</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">foo</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">bar</span>\n  <span class=\"token keyword\">where</span>\n    <span class=\"token hvariable\">bar</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>In <code class=\"language-text\">where</code> we can put many private bindings, and since they are usually short and easy to understand, without type binding might be ok, but if you found without type binding they would be hard to understand, then please still give it a type.</p>\n<h3>Type</h3>\n<p>Now, we need to define some new types. In <strong>Haskell</strong>, we usually use <code class=\"language-text\">data</code> keyword to create a new type. <code class=\"language-text\">data</code> syntax is quite complex, we can take a look at few examples to understand it.</p>\n<p>The first example creates a <code class=\"language-text\">Bool</code></p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Bool</span> <span class=\"token operator\">=</span> <span class=\"token constant\">True</span> <span class=\"token operator\">|</span> <span class=\"token constant\">False</span></code></pre></div>\n<p>To use it: <code class=\"language-text\">False</code>, <code class=\"language-text\">True</code>. We call <code class=\"language-text\">True</code> and <code class=\"language-text\">False</code> as constructors of <code class=\"language-text\">Bool</code>. You can see that <code class=\"language-text\">|</code> separate different constructors. This is called <strong>algebra data type</strong>. In fact, constructors can with arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MakePosition</span> <span class=\"token constant\">Double</span> <span class=\"token constant\">Double</span></code></pre></div>\n<p>We can use like: <code class=\"language-text\">MakePosition 1.0 0.0</code></p>\n<p>When we do pattern matching on the type made by <code class=\"language-text\">data</code>, we can use their constructors:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">case</span> <span class=\"token hvariable\">bool</span> <span class=\"token keyword\">of</span>\n  <span class=\"token constant\">True</span> <span class=\"token operator\">-></span> <span class=\"token comment\">-- ...</span>\n  <span class=\"token constant\">False</span> <span class=\"token operator\">-></span> <span class=\"token comment\">-- ...</span>\n<span class=\"token comment\">-- or</span>\n<span class=\"token keyword\">case</span> <span class=\"token hvariable\">pos</span> <span class=\"token keyword\">of</span>\n  <span class=\"token constant\">MakePosition</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">-></span> <span class=\"token comment\">-- ...</span></code></pre></div>\n<p>p.s. <code class=\"language-text\">--</code> is the comment in <strong>Haskell</strong></p>\n<p>Well, <code class=\"language-text\">MakePosition</code> makes a new question: Can we use <code class=\"language-text\">pos</code> in the branch of <code class=\"language-text\">MakePosition</code>? Yes, by <code class=\"language-text\">@</code> pattern, we can get the constructors:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">case</span> <span class=\"token hvariable\">pos</span> <span class=\"token keyword\">of</span>\n  <span class=\"token hvariable\">p1</span><span class=\"token operator\">@</span><span class=\"token constant\">MakePosition</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">-></span> <span class=\"token comment\">-- ...</span></code></pre></div>\n<p>It seems useless because <code class=\"language-text\">pos</code> is <code class=\"language-text\">p1</code> in case. But it's very helpful when <code class=\"language-text\">Position</code> has several constructors. A nice thing is <strong>Haskell</strong> would do <strong>exhaustiveness checking</strong> to make sure all variants of constructors were covered by your pattern matching.</p>\n<p>Keep move forward, sometimes we would like to create a type and some operations that can be reused by different type-arguments. It called type parameters. You probably already found that in <strong>Haskell</strong> all of the types were started with upper case. That's because the start of the lower case was reserved for the type parameter.</p>\n<p>The first example is <code class=\"language-text\">Maybe</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=</span>\n  <span class=\"token constant\">Just</span> <span class=\"token hvariable\">a</span>\n  <span class=\"token operator\">|</span> <span class=\"token constant\">Nothing</span></code></pre></div>\n<p>What is <code class=\"language-text\">Maybe</code> for? In <strong>Haskell</strong>, we do not have the bottom type. What's the bottom type? In <strong>Java</strong>, every object can be <code class=\"language-text\">null</code>, <code class=\"language-text\">null</code> can be seen as a value of bottom type. The bottom type represents a subtype of any type, so its value can be the value of any type. Of course, <code class=\"language-text\">null</code> in <strong>Java</strong> is not so correctly means a bottom type since the primitive type work under another system, but it's good enough to make we keep going.</p>\n<p>So we actually need a type to represent <code class=\"language-text\">nothing</code>, that is <code class=\"language-text\">Maybe</code>, <code class=\"language-text\">Maybe</code> has two constructors, for has value: <code class=\"language-text\">Just a</code> and no value: <code class=\"language-text\">Nothing</code>. But doing operations on <code class=\"language-text\">Maybe</code> is annoying, if without <code class=\"language-text\">Control.Applicative</code>. We can see how it work with <code class=\"language-text\">Applicative</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token import_statement\"><span class=\"token keyword\">import</span> Control.Applicative</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;$></span> <span class=\"token constant\">Just</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;*></span> <span class=\"token constant\">Just</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">-- Just 5</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;$></span> <span class=\"token constant\">Just</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;*></span> <span class=\"token constant\">Just</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">-- Just 6</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;$></span> <span class=\"token constant\">Just</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;*></span> <span class=\"token constant\">Nothing</span>\n<span class=\"token comment\">-- Nothing</span></code></pre></div>\n<p>You can understand <code class=\"language-text\">Applicative</code> like this: <code class=\"language-text\">+</code> takes two parameters, <code class=\"language-text\">&lt;$&gt;</code> means we start to give it arguments, use <code class=\"language-text\">&lt;*&gt;</code> join more arguments if there is more than one argument.</p>\n<p>There has a structure-like syntax for constructors:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Position</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MakePosition</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token hvariable\">getX</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Double</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">getY</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Double</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>An unfortunate problem is <code class=\"language-text\">getX</code> and <code class=\"language-text\">getY</code> is not in the global environment, so if now we add:</p>\n<div class=\"gatsby-highlight\" data-language=\"hs\"><pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token keyword\">data</span> <span class=\"token constant\">Wow</span> <span class=\"token operator\">=</span> <span class=\"token constant\">MakeWow</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token hvariable\">getX</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Double</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token hvariable\">getY</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Double</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compiler would complain about there are redefined symbols.</p>\n<h3>Conclusion</h3>\n<p>I hope you already learn a little thing that enough to start programming with <strong>Haskell</strong>. There still have many features were not mentioned in the article. Originally as <a href=\"/blog/cs/golang-quick-start/\">golang quick start</a>, I want to show all major features in <strong>Haskell</strong>, but it probably would be really hard. Explain <strong>Monad</strong> might need an alone article. And <strong>high-order function</strong> and <strong>Kind</strong> also quite not suitable in an article prepared for <strong>beginner</strong>. Understand <code class=\"language-text\">fold</code>, <code class=\"language-text\">map</code> and <strong>recursive</strong> also be out of the topic of the article, so I would write the others for them. Thanks for the read.</p>","frontmatter":{"title":"Haskell quick start","categories":["cs"],"tags":["haskell","beginner","plt","language"]}}},"pageContext":{"slug":"/blog/cs/haskell-quick-start/"}}}