{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/golang-concurrency-bug-i-made/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>There is a saying:</p>\n<blockquote>\n<p>I never had a slice of bread particularly large and wide that did not fall upon the floor and always on the buttered side</p>\n</blockquote>\n<p>Even I already work with Go for almost 3 years, I still made these stupid bugs.\nBut learning from errors is why we are professional enigneer.\nSo I'm going to list the bug I made, and show how to avoid it.</p>\n<h3>1 select with generator</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n            ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ch\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> i <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We using a common generator pattern here, and <code class=\"language-text\">select</code> also is quite normal case, the problem at here is select would call <code class=\"language-text\">events</code> not just once!\nThis loop would create new channel for every <code class=\"language-text\">case</code> statement! And leaving infinite go-routine that nobody care!</p>\n<p>To avoid the problem, you have to using <code class=\"language-text\">range</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But if you want to stop this looping, which means you still need to use <code class=\"language-text\">select</code>, then store the channel to other place is required.\nThere are many ways to do that:</p>\n<ul>\n<li>\n<p>In structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> eventGenerator <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n  eventCh <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span>\n  ctx     context<span class=\"token punctuation\">.</span>Context\n  cancel  context<span class=\"token punctuation\">.</span>CancelFunc\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewEventGenerator</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>eventGenerator <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// better to get context from others place, even this is a most up level controller</span>\n  <span class=\"token comment\">// because you can use `context.Background()` as argument if this is the most up level one</span>\n  ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithCancel</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>eventGenerator<span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// don't forget to `make` a channel,</span>\n      <span class=\"token comment\">// if you skip it, Go won't give you any warning</span>\n      <span class=\"token comment\">// And anything you try to send to it would be ignored!</span>\n      <span class=\"token comment\">// No Warning!</span>\n      eventCh<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      ctx<span class=\"token punctuation\">:</span> ctx<span class=\"token punctuation\">,</span>\n      cancel<span class=\"token punctuation\">:</span> cancel<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>eventGenerator<span class=\"token punctuation\">)</span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>eventCh<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">case</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> closed <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span> e<span class=\"token punctuation\">.</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">if</span> closed <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">return</span>\n              <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n              e<span class=\"token punctuation\">.</span>eventCh <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>eventGenerator<span class=\"token punctuation\">)</span> <span class=\"token function\">Events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>eventCh <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">*</span>eventGenerator<span class=\"token punctuation\">)</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now you can write <code class=\"language-text\">case &lt;-eg.Events():</code> as you want after calling <code class=\"language-text\">eg.Start()</code> and stop it by <code class=\"language-text\">eg.Close()</code></p>\n</li>\n<li>\n<p>generator with outside channel</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">genEvents</span><span class=\"token punctuation\">(</span>ch <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n          ch <span class=\"token operator\">&lt;-</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  d <span class=\"token operator\">:=</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span>\n  ctx<span class=\"token punctuation\">,</span> cancel <span class=\"token operator\">:=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">WithDeadline</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">defer</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">genEvents</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> i <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ch<span class=\"token punctuation\">:</span>\n          <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i=\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">case</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n          <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main:\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Err</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">return</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>2 misuse context.Done()</h3>\n<p>Let's assuming there is a <code class=\"language-text\">epoll</code> like function call <code class=\"language-text\">recv()</code>, you would get something from it and deal with it, but it's not based on channel,\nwhich means you can't use it as <code class=\"language-text\">case</code> of <code class=\"language-text\">select</code>, how to deal with it?</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">handlingRecv</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;-</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    ch <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n            data <span class=\"token operator\">:=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">var</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">Unmarshal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// ignore error handing</span>\n            ch <span class=\"token operator\">&lt;-</span> v\n\n            <span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> closed <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ch\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Code looks good? No, in fact the <code class=\"language-text\">select</code> would be blocked until this context be canceled,\nwhich means you can only get one message from <code class=\"language-text\">recv()</code>, and no warning, looks like a <strong>NICE</strong> networking problem,\nbut it's a bug of code actually.</p>\n<p>This bug is easy to fix, in fact, easier than previous one a lot.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">select</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">case</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> closed <span class=\"token operator\">:=</span> <span class=\"token operator\">&lt;-</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span>\n<span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">// move job to here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So easy, we just based on the fact, if no case in, it would do <code class=\"language-text\">default</code> block work</p>\n<h3>Conculsion</h3>\n<p>The bug show here might be is not hard to solve, but since everything could go wrong would go wrong,\nI still wrote it done and if it's helpful that would be so great. Thanks for read.</p>","frontmatter":{"title":"The Go concurrency bug I made","categories":["cs"],"tags":["golang","concurrency","workrecord"]}}},"pageContext":{"slug":"/blog/cs/golang-concurrency-bug-i-made/"}}}