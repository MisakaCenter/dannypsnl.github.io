{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/httpexpect/","result":{"data":{"markdownRemark":{"html":"<p>Use builtin functionality to test a Go server is a panicful experience.\nThe problem is because we have to handle too many error and get so much thing we aren't always need.</p>\n<p>Of course, we will create a abstraction to reduce this panic.\nBut if we already have a mature solution? That is <a href=\"https://github.com/gavv/httpexpect\">httpexpect</a></p>\n<p>We have two options about import:</p>\n<ul>\n<li><code>import \"github.com/gavv/httpexpect.v1\"</code></li>\n<li><code>import \"github.com/gavv/httpexpect\"</code></li>\n</ul>\n<p>The different is <code>v1</code> is stable branch, another is <code>master</code> branch on github.</p>\n<p>I suggest pick stable one for company project, but it's fine to use <code>master</code> branch at side project.</p>\n<p><code>httpexpect</code> works pretty good with <code>httptest</code>. A simple example:</p>\n<pre><code class=\"language-go\">type fakeHandler struct {\n}\n\nfunc (h *fakeHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprint(w, \"Hello\")\n}\n\nfunc TestIt(t *testing.T) {\n    handler := &#x26;fakeHandler{}\n    server := httptest.NewServer(handler)\n    defer server.Close()\n\n    e := httpexpect.New(t, server.URL)\n\n    e.GET(\"/\").\n        Expect().\n        Status(http.StatusOK).\n        Body().Equal(\"Hello\")\n}\n</code></pre>\n<p>How about add form value?</p>\n<pre><code class=\"language-go\">e.PATCH(\"/test/patch\").WithFormField(\"value\", \"patch\").\n    Expect().Status(http.StatusOK).\n    Body().Equal(\"patch\")\n</code></pre>\n<p>JSON response?</p>\n<pre><code class=\"language-go\">e.POST(\"/post\").\n    Expect().Status(http.StatusOK).\n    ContentType(\"application/json\", \"\").\n    JSON().Equal(expected)\n</code></pre>\n<p>Query?</p>\n<pre><code class=\"language-go\">e.GET(\"/user\").WithQuery(\"name\", \"Danny\").\n    Expect().Status(http.StatusOK).\n</code></pre>\n<p>Hope you would feel happy with this little introduction.</p>","frontmatter":{"title":"Use httpexpect to test server"}}},"pageContext":{"slug":"/blog/cs/httpexpect/"}}}