{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/note-cpp-member-initialize-order/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>There are some trap when using <strong>class</strong> in C++. One of them is the initialization order of members. This can be annoying, therefore, I want to record this: <strong>Declare order would affect initialization order for C++ class members</strong>. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i<span class=\"token punctuation\">{</span>j<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>can lead to an unexpected result, <code class=\"language-text\">i</code> would be <code class=\"language-text\">0</code> if you create a <code class=\"language-text\">Foo</code> instance. From reader view, <code class=\"language-text\">j</code> already initialized with value <code class=\"language-text\">1</code>, however, <code class=\"language-text\">j</code> wasn't initialized yet! It is hard to find out, but we only need a small change to fix it:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> i<span class=\"token punctuation\">{</span>j<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is unfortunate but happened. I hope this can help to figure out what happened faster next time XD.</p>\n<p>Reference to <a href=\"https://en.cppreference.com/w/cpp/language/initializer_list\">cppreference.com</a> for more information:</p>\n<blockquote>\n<p>The order of member initializers in the list is irrelevant: the actual order of initialization is as follows:</p>\n<ol>\n<li>If the constructor is for the most-derived class, virtual base classes are initialized in the order in which they appear in depth-first left-to-right traversal of the base class declarations (left-to-right refers to the appearance in base-specifier lists)</li>\n<li>Then, direct base classes are initialized in left-to-right order as they appear in this class's base-specifier list</li>\n<li>Then, non-static data members are initialized in order of declaration in the class definition.</li>\n<li>Finally, the body of the constructor is executed</li>\n</ol>\n</blockquote>","frontmatter":{"title":"NOTE: class member initialization order in C++","categories":["cs"],"tags":["note","cpp","class member","initialization","language"]}}},"pageContext":{"slug":"/blog/cs/note-cpp-member-initialize-order/"}}}