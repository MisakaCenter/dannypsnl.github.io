{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/write-hashmap-in-go/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<blockquote>\n<p>Just a note</p>\n</blockquote>\n<p>Hash map is a data structure that helps you associate a key type to a value type. For example, a string map to the boolean value.</p>\n<p>I choose an easy way to create one, that's an array to a list. The type definition was:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Node <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    key   <span class=\"token builtin\">string</span>\n    value <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> HashMap <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    size    <span class=\"token builtin\">int</span>\n    buckets <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Node\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">buckets</code> stores a list of list of <code class=\"language-text\">Node</code>, <code class=\"language-text\">Node</code> is a key/value pair.\nThe principle of this implementation is the hash function would uniform the index of the bucket, the reason for the bucket is a list is because if we have the same hash for a different key, then we append the new <code class=\"language-text\">Node</code> into the same bucket or update if it exists in the bucket, that's why we have to store the key/value pair.</p>\n<p><code class=\"language-text\">size</code> is the length of buckets, but we aren't going to count it every time, so we store it in the structure.</p>\n<h3>Jenkins Hash</h3>\n<p>reference: <a href=\"https://en.wikipedia.org/wiki/Jenkins_hash_function\">https://en.wikipedia.org/wiki/Jenkins<em>hash</em>function</a></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// uint32 at here is very important,</span>\n<span class=\"token comment\">// since Go using int to index slice([]T),</span>\n<span class=\"token comment\">// at 64-bits system uint would be uint64 and would overflow while</span>\n<span class=\"token comment\">// we convert hash value to int(would be int64 in this context).</span>\n<span class=\"token comment\">// So we pick uint32 for 64-bits system(my test environment)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">JenkinsHash</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">uint32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> h <span class=\"token builtin\">uint32</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> key <span class=\"token punctuation\">{</span>\n        h <span class=\"token operator\">+=</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n        h <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n        h <span class=\"token operator\">^=</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    h <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    h <span class=\"token operator\">^=</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span>\n    h <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> h\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>could try to extend the definition, using others type than string for hashing</p>\n</blockquote>\n<h3>Get and Set</h3>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// getIndex is a help function for Get and Set</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>HashMap<span class=\"token punctuation\">)</span> <span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">JenkinsHash</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> h<span class=\"token punctuation\">.</span>size\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>HashMap<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    index <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    bucket <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\">// linear searching the node in bucket,</span>\n    <span class=\"token comment\">// because the bucket should be a small list,</span>\n    <span class=\"token comment\">// so it should not take too long time.</span>\n    <span class=\"token comment\">// This is why hash function and size of buckets does important</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> node <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bucket <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> k <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">*</span>HashMap<span class=\"token punctuation\">)</span> <span class=\"token function\">Set</span><span class=\"token punctuation\">(</span>k <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    index <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span>\n    bucket <span class=\"token operator\">:=</span> h<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> bucket <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> n<span class=\"token punctuation\">.</span>key <span class=\"token operator\">==</span> k <span class=\"token punctuation\">{</span> <span class=\"token comment\">// existed node</span>\n            n<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> v\n            <span class=\"token comment\">// early return while updated</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// append into bucket</span>\n    h<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">.</span>buckets<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> Node<span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">:</span> k<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Write a hashmap in Go","categories":["cs"],"tags":["data-structure","golang"]}}},"pageContext":{"slug":"/blog/cs/write-hashmap-in-go/"}}}