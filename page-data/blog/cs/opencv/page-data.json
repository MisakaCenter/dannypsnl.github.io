{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/opencv/","result":{"data":{"markdownRemark":{"html":"<h2>Install(Unix Like system)</h2>\n<h3>ffmpeg</h3>\n<p><a href=\"https://www.ffmpeg.org/download.html\">Download Page</a></p>\n<pre><code class=\"language-bash\">$ ./configure --enable-shared\n$ make\n$ sudo make install\n</code></pre>\n<h3>OpenCV</h3>\n<p><a href=\"https://opencv.org/releases.html\">Download Page</a></p>\n<pre><code class=\"language-bash\">$ mkdir release\n$ cd release\n$ cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ../\n$ make\n$ sudo make install\n</code></pre>\n<h2>Introduction</h2>\n<h3>Show Image</h3>\n<pre><code class=\"language-c++\">// main.cc\n#include &#x3C;opencv2/opencv.hpp> // All OpenCV function's include file\n\nint main(int argc, char** argv) {\n  // image read\n  cv::Mat img = cv::imread(argv[1], -1);\n  if (img.empty()) return -1; // if no image, exit with -1\n\n  // A window named Example, and with size of image\n  cv::namedWindow( \"Example\", cv::WINDOW_AUTOSIZE );\n\n  // Show img on window named Example\n  cv::imshow( \"Example\", img );\n\n  // Wait any key\n  cv::waitKey(0);\n  // Clean up\n  cv::destroyWindow( \"Example\" );\n}\n</code></pre>\n<p>Compile &#x26; Run it.<br></p>\n<pre><code class=\"language-bash\">$ clang++ -std=c++14 main.cc -lopencv_core -lopencv_highgui -lopencv_imgcodecs\n</code></pre>","frontmatter":{"title":"OpenCV introduction"}}},"pageContext":{"slug":"/blog/cs/opencv/"}}}