{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/simple-way-to-ensure-go-interface-wont-be-implement-accidently/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Sample code is quite easy:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Car <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Car\n\t<span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Animal <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> Animal\n\t<span class=\"token function\">Walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, let’s create a structure type:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Duck <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tAnimal\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, if you add <code class=\"language-text\">func (d *Duck) Move()</code>, you won’t be a car accidently! What if you want to embed two interfaces?</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Duck <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tCar\n\tAnimal\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compiler would refuse the code since: <code class=\"language-text\">Duck.impl is ambiguous</code>, you can’t have two methods with the same name in Go definition. So we can use this to create something just like <code class=\"language-text\">impl Trait for Type</code> in Rust, although this is a workaround,but anyway I work with Go so I have to find out how to ensure this when we need it.</p>\n<p>If you want to know what if we want something just take type has <code class=\"language-text\">Move()</code> method? Then just define:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Movable <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The point is correctly reduce the concept in interface, and do not create interface has general name, unless you know what are you doing,but if you need a workaround, this is.</p>\n<p>Since Go can’t write: <code class=\"language-text\">func foo(bar A + B + C)</code>, <code class=\"language-text\">A</code>, <code class=\"language-text\">B</code>, <code class=\"language-text\">C</code> are <code class=\"language-text\">interface</code>, so I suggest write:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>bar <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span>\n\tA\n\tB\n\tC\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>NOTE: newline is required, because Go compiler is stupid. You might want define a private interface for this function only.</p>\n</blockquote>\n<p>Sad thing is we can’t use <code class=\"language-text\">A | B | C</code>, have to do runtime assertion for this.</p>\n<p>One more bad thing is because you embedded the interface, Go won’t check you provide the implementation of methods or not, you have to do this manually.</p>","frontmatter":{"title":"A simple way to ensure interface won't be implemented accidently","categories":["cs"],"tags":["golang"]}}},"pageContext":{"slug":"/blog/cs/simple-way-to-ensure-go-interface-wont-be-implement-accidently/"}}}