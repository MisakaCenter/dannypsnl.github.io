{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/note-a-little-bit-z3/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Satisfiability Modulo Theories(SMT) problem is a decision problem for logical formulas with respect to combinations of background theories such as arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is an efficient SMT solver with specialized algorithms for solving background theories.</p>\n</blockquote>\n<p>Wow, many words. But for me, right now, Z3 is a theorem prover from Microsoft. Use SMT-LIB this lisp-like language.</p>\n<pre><code class=\"language-lisp\">(declare-const x Int)\n(declare-const y Int)\n(assert (= 5 (+ x y 3)))\n(check-sat)\n</code></pre>\n<p>The program produce: <code>sat</code> as result. If we didn't provide a possible constraint:</p>\n<pre><code class=\"language-lisp\">(declare-const x Int)\n(assert (= 5 (+ x 3)))\n(assert (= 5 (+ x 2)))\n(check-sat)\n</code></pre>\n<p>The result would be <code>unsat</code>, not surprising.</p>\n<p>As title, <strong>a little bit</strong> z3, this is the end, I hadn't know where can I use z3, XD.</p>","frontmatter":{"title":"NOTE: a little bit Z3 solver"}}},"pageContext":{"slug":"/blog/cs/note-a-little-bit-z3/"}}}