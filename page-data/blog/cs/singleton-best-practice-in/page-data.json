{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/singleton-best-practice-in/","result":{"data":{"markdownRemark":{"html":"<h2>How to implement singleton in Go?</h2>\n<p>It's really a problem at there. And worth to think about it.</p>\n<h3>Start</h3>\n<p>Let's consider how to create a singleton?\nWe need a reference can't be change by anyone at all the time except initialize.</p>\n<p>It's possible in Go? Yes, package level reference.</p>\n<pre><code class=\"language-go\">var s *singleton\n</code></pre>\n<p>What's next? It have to be initialize before using. Basic implementation you can easier thought out is</p>\n<pre><code class=\"language-go\">func GetInstance() *singleton {\n    if s == nil {\n        s = &#x26;singleton{} // for clean, nothing at here\n    }\n    return s\n}\n</code></pre>\n<p>Seems perfect, but buggy actually. Why?</p>\n<p>Because the check can facing the race condition when using a lot goroutine access our singleton.</p>\n<p>Now we know the problem, how to solve it?</p>\n<p>We have two choices. One is <code>init</code> God function, another is <code>sync.Once</code> let only do once all the time.\nLet's start from first solution.</p>\n<pre><code class=\"language-go\">func init() {\n    s = &#x26;singleton{}\n}\n\nfunc GetInstance() *singleton {\n    return s\n}\n</code></pre>\n<p>Why this will work? Because <code>init</code> must be execute after anything trying to using anything in a package.\nSo here <code>s</code> will be initialize before this package be using. And the race condition won't exist by Go's guarantee.</p>\n<p>Second way is <code>sync.Once</code>.</p>\n<pre><code class=\"language-go\">var once sync.Once\n\nfunc GetInstance() *singleton {\n    once.Do(func() {\n        s = &#x26;singleton{}\n    })\n    return s\n}\n</code></pre>\n<p>Because <code>sync.Once</code> will do one time at all process. So it will be a safety way to initialize the singleton</p>","frontmatter":{"title":"The best practice of Singleton in Golang"}}},"pageContext":{"slug":"/blog/cs/singleton-best-practice-in/"}}}