{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/testing-in-go/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Just list some testing way in Go.</p>\n<p>Basically we use <code class=\"language-text\">testing</code> this built-in lib to testing</p>\n<p>To start your first test with Go is an easy task.</p>\n<p>Example(we would test the following function under directory <code class=\"language-text\">add</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> add\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>create a file contains suffix <code class=\"language-text\">_test</code>, it would be a test file, e.g. <code class=\"language-text\">add_test.go</code></li>\n<li>\n<p>create a function in test file has prefix <code class=\"language-text\">Test</code>, use <code class=\"language-text\">t *testing.T</code> as it's parameter</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> add\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"testing\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">TestAdd</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add(1, 2) should be 3 but: %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>type <code class=\"language-text\">go test</code> &#x26; execute it in terminal</li>\n</ol>\n<p>Ok, now we got a test, if you see the error message then must something wrong about your implementation of <code class=\"language-text\">Add</code></p>\n<blockquote>\n<p>p.s. Usually we won't use <code class=\"language-text\">go test</code> but <code class=\"language-text\">go test ./...</code> because we would have a lots of package under a project, <code class=\"language-text\">./...</code> would find out every sub directory(those can be a go package) &#x26; run test</p>\n</blockquote>\n<p>We have <code class=\"language-text\">func (*testing.T) Run(subTestName string, subTest func(t *testing.T))</code> this function, we can use it to create a new sub test.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">TestCarFactory</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfactory <span class=\"token operator\">:=</span> car<span class=\"token punctuation\">.</span><span class=\"token function\">NewFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Toyota\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttoyota <span class=\"token operator\">:=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>Toyota<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// test toyota</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Mazda\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tmazda <span class=\"token operator\">:=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">Build</span><span class=\"token punctuation\">(</span>car<span class=\"token punctuation\">.</span>Mazda<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// test mazda</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically you can see sub test means we want to reuse same context for different tests,\nor like me, just use it represents the test structure.</p>\n<p>A practical problem is sometime we extract a test helper out of the test function.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">assertNoError</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"assert no error but: %s\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You will find all error say it happened at <code class=\"language-text\">t.Errorf</code> that line, but not the error actual happened place!</p>\n<p>To solve this problem, you have to add <code class=\"language-text\">t.Helper()</code> this function call, according document:</p>\n<blockquote>\n<p>Helper marks the calling function as a test helper function. When printing file and line information, that function will be skipped. Helper may be called simultaneously from multiple goroutines.</p>\n</blockquote>\n<p>I recommend <a href=\"https://github.com/stretchr/testify\">https://github.com/stretchr/testify</a> for assertion, <strong>Don't Reinvent The Wheel!</strong>(Some thing I always violate it)</p>\n<p>And <a href=\"https://github.com/gavv/httpexpect\">https://github.com/gavv/httpexpect</a> is an awesome lib for web API testing.</p>\n<p>A nice fact is, Go also help you create benchmark easy.</p>\n<p>Still in test file, but use <code class=\"language-text\">Benchmark</code> as prefix of test.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">BenchmarkAdd</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span>testing<span class=\"token punctuation\">.</span>B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">.</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To run benchmark needs argument <code class=\"language-text\">-bench</code>, it would like <code class=\"language-text\">go test -bench .</code></p>\n<p>Output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">goos: darwin\ngoarch: amd64\npkg: test\nBenchmarkAdd-4          2000000000               0.61 ns/op\nPASS\nok      test    1.285s</code></pre></div>\n<p>As <code class=\"language-text\">t.Run</code>, you can have <code class=\"language-text\">b.Run</code> in benchmark.</p>\n<p>To get the nice analysis of program, you can use <code class=\"language-text\">go test -bench . -cpuprofile cpu.out -memprofile mem.out</code> to generate some profiles</p>\n<p>Then use <code class=\"language-text\">go tool pprof -http=127.0.0.1:5000 cpu.out</code> to see the result on browser(if you are familiar with CLI mode, you can remove <code class=\"language-text\">-http</code> flag)</p>\n<p>You can see something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">----------------------------------------------------------+-------------\n                                            1130ms   100% |   testing.(*B).launch /usr/local/Cellar/go/1.11.2/libexec/src/testing/benchmark.go:290\n         0     0%   100%     1130ms 98.26%                | testing.(*B).runN /usr/local/Cellar/go/1.11.2/libexec/src/testing/benchmark.go:141\n                                            1130ms   100% |   test.BenchmarkAdd /Users/dannypsnl/code/go/src/test/add_test.go:8\n----------------------------------------------------------+-------------</code></pre></div>\n<p>At here example is too easy so nothing to show, in a real world code it would be pretty useful to know the hot point of the program.</p>\n<blockquote>\n<p>p.s. At profile example, <code class=\"language-text\">-bench</code> can't be omit, because we want something run a lots of time to detect it's real performance.</p>\n</blockquote>\n<p>If you want to get the performance under real usage, you can import pprof into program:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token string\">\"net/http/pprof\"</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If your program is not a HTTP server, then you have to start one like:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0.0.0.0:6060\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The reason of <code class=\"language-text\">0.0.0.0</code> can reference to <a href=\"https://stackoverflow.com/questions/20778771/what-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost\">https://stackoverflow.com/questions/20778771/what-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost</a></p>\n<p>After these, you can run your program up then see your profile like <code class=\"language-text\">go tool pprof http://127.0.0.1:6060/debug/pprof/profile</code></p>\n<p>To get more info, you can reference:</p>\n<ul>\n<li><a href=\"https://golang.org/pkg/testing\">https://golang.org/pkg/testing</a></li>\n<li><a href=\"https://golang.org/pkg/net/http/pprof\">https://golang.org/pkg/net/http/pprof</a></li>\n</ul>\n<p>Thanks for reading</p>","frontmatter":{"title":"Testing in Go","categories":["cs"],"tags":["golang","testing","debug"]}}},"pageContext":{"slug":"/blog/cs/testing-in-go/"}}}