{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/create-a-wait-group-by-yourself-and-do-not-use-it/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>If you had wrote any concurrency code in Go.\nI think you could seems <code class=\"language-text\">sync.WaitGroup</code> before.\nAnd today point is focus on create a wait group by channel trick.</p>\n<p>How?</p>\n<p>First you need a channel without buffer.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    wait <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then get something from it so if there has no value in <code class=\"language-text\">wait</code>, process keep going.\nBut if just trying to get something from a empty channel. You will get block and cause deadlock.\nThen go will panic it. So we have to change the code a little bit but also be more extendable for next iteration.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ...</span>\nn <span class=\"token operator\">:=</span> <span class=\"token number\">0</span>\nwait <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;-</span>wait\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Now let's create works loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\nn <span class=\"token operator\">:=</span> <span class=\"token number\">10000</span>\nwait <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    time<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Microsecond<span class=\"token punctuation\">)</span>\n    wait <span class=\"token operator\">&lt;-</span> <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">&lt;-</span>wait\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>ps. These code has a little bug(you can try to find it, or read the answer at the end)</p>\n<p>Now we can see it work. The reason of these code can work is because size n is our expected amount of workers.\nAfter each worker done their jobs. They will send something(here is <code class=\"language-text\">struct{}{}</code>, but exactly is doesn't matter thing) into our <code class=\"language-text\">wait</code> channel.\nWe only read <code class=\"language-text\">n</code> things from <code class=\"language-text\">wait</code>.</p>\n<p>So after <code class=\"language-text\">n</code> things be read. We won't be block any more even <code class=\"language-text\">wait</code> got new thing. Else we have to waiting <code class=\"language-text\">wait</code>.</p>\n<p>Whole code dependent on this fact.\nHaving these knowledge, we can create ours <code class=\"language-text\">WaitGroup</code> now.</p>\n<script src=\"https://gist.github.com/dannypsnl/da6eee69239111ef025a6f00bf73faaf.js\"></script>\n<p>As you can see, we use a type wrapping all the thing we need.(It's a basic idiom, so I don't want to say why)</p>\n<p>Then method <code class=\"language-text\">Add</code> is preparing for <code class=\"language-text\">n</code> we talk before. Adding these thing in dynamic way.</p>\n<p>Next <code class=\"language-text\">Done</code> do the thing as we manually do in previous code.</p>\n<p>And <code class=\"language-text\">Wait</code> is read amount of things equal final <code class=\"language-text\">n</code>.</p>\n<p>The end let's say what happened in previous code. You should closing the <code class=\"language-text\">channel</code> always.\nSo the code will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ...</span>\nwait <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>wait<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Maybe you will feel confusing about this part. The reason is <code class=\"language-text\">channel</code> won't be collect by GC automatic(if it can, it will be another hell). So always closing it is important.</p>\n<p>ps. In productive code, please still using the <code class=\"language-text\">sync.WaitGroup</code>, I do a test, <code class=\"language-text\">sync.WaitGroup</code> is 25% faster than the version you see at here.</p>\n<h3>References:</h3>\n<h4><a href=\"http://www.gopl.io/\">The Go programming language</a></h4>\n<ul>\n<li>Author: Alan A. A. Donovan &#x26; Brian W. Kernighan</li>\n<li>ISBN: 978-986-476-133-3</li>\n</ul>\n<h4><a href=\"http://shop.oreilly.com/product/0636920046189.do\">Concurrency in Go</a></h4>\n<ul>\n<li>Author: Katherine Cox-Buday</li>\n<li>ISBN: 978-1-491-94119-5</li>\n</ul>","frontmatter":{"title":"Create a WaitGroup by yourself"}}},"pageContext":{"slug":"/blog/cs/create-a-wait-group-by-yourself-and-do-not-use-it/"}}}