{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/nginx-run-and/","result":{"data":{"markdownRemark":{"html":"<p>這篇只是隨便紀錄一下好不容易終於弄懂的 Nginx ，首先各個平台安裝方式應該直接上網查詢</p>\n<p><a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\">官網下載頁</a></p>\n<p>最基本的啟動方式通常是 <code>/usr/bin/nginx</code> ，不過各平台可能有差異，應以實際位置為主</p>\n<h2>指令</h2>\n<pre><code class=\"language-bash\">$ nginx -s stop # shut down nginx\n$ nginx -s reload # reload configure, if you edit the configure &#x26; want to use it, this is what you want\n</code></pre>\n<h2>設定流程</h2>\n<p>把設定檔放在 <code>sites-available/</code> 下，請根據系統到 Nginx 的設定檔目錄中尋找這個目錄</p>\n<blockquote>\n<p>p.s. 舉例來說，我在 gcloud 上的 Ubuntu 主機中 Nginx 設定檔目錄在 <code>/etc/nginx</code></p>\n</blockquote>\n<p>寫好設定檔之後再到 <code>sites-enabled</code> 目錄中，建立 link 指向 <code>site-available</code> 中的設定檔</p>\n<p>最後 reload 套用新的設定</p>\n<h2>設定檔內容</h2>\n<p>這邊我也沒有深入研究，需要什麼再想是我的習慣，而且軟體總是有新的變動，所以這裡我只介紹基本的東西，\n更進階的 Nginx 用法應該直接看官方文件</p>\n<p>接著看一段簡單的設定檔</p>\n<pre><code class=\"language-nginx\">upstream service_stream {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    location / {\n        proxy_pass http://service_stream;\n    }\n}\n</code></pre>\n<p><code>upstream</code> 抽象了服務跟實際的伺服器的連結，這裡可以看到用一段 ip 取代直接建立一個監聽 80 port 的伺服器，\n這讓網路服務模型更具有擴展性，而軟體最應該關注的就是擴展能力</p>\n<p><code>upstream</code> 不處理網路服務，而是設定處理網路服務的服務器(<code>server</code>)，所以稱之為上游</p>\n<p><code>server</code> 去聆聽真實的網路請求，然後把資訊轉給 <code>upstream</code> ，這裡是代理服務，所以用 <code>proxy_pass</code></p>\n<p><code>listen</code> 決定了聆聽哪些 port ，<code>location</code> 決定把哪些路由導向哪個服務</p>\n<p>End</p>","frontmatter":{"title":"Nginx 安裝與啟動"}}},"pageContext":{"slug":"/blog/cs/nginx-run-and/"}}}