{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/write-hashmap-in/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Just a note</p>\n</blockquote>\n<p>Hash map is a data structure that helps you associate a key type to a value type. For example, a string map to the boolean value.</p>\n<p>I choose an easy way to create one, that's an array to a list. The type definition was:</p>\n<pre><code class=\"language-go\">type Node struct {\n    key   string\n    value interface{}\n}\n\ntype HashMap struct {\n    size    int\n    buckets [][]Node\n}\n</code></pre>\n<p><code>buckets</code> stores a list of list of <code>Node</code>, <code>Node</code> is a key/value pair.\nThe principle of this implementation is the hash function would uniform the index of the bucket, the reason for the bucket is a list is because if we have the same hash for a different key, then we append the new <code>Node</code> into the same bucket or update if it exists in the bucket, that's why we have to store the key/value pair.</p>\n<p><code>size</code> is the length of buckets, but we aren't going to count it every time, so we store it in the structure.</p>\n<h3>Jenkins Hash</h3>\n<p>reference: <a href=\"https://en.wikipedia.org/wiki/Jenkins_hash_function\">https://en.wikipedia.org/wiki/Jenkins<em>hash</em>function</a></p>\n<pre><code class=\"language-go\">// uint32 at here is very important,\n// since Go using int to index slice([]T),\n// at 64-bits system uint would be uint64 and would overflow while\n// we convert hash value to int(would be int64 in this context).\n// So we pick uint32 for 64-bits system(my test environment)\nfunc JenkinsHash(key string) uint32 {\n    var h uint32\n    for _, c := range key {\n        h += uint32(c)\n        h += (h &#x3C;&#x3C; 10)\n        h ^= (h >> 6)\n    }\n    h += (h &#x3C;&#x3C; 3)\n    h ^= (h >> 11)\n    h += (h &#x3C;&#x3C; 15)\n    return h\n}\n</code></pre>\n<blockquote>\n<p>could try to extend the definition, using others type than string for hashing</p>\n</blockquote>\n<h3>Get and Set</h3>\n<pre><code class=\"language-go\">// getIndex is a help function for Get and Set\nfunc (h *HashMap) getIndex(k string) int {\n    return int(JenkinsHash(k)) % h.size\n}\n\nfunc (h *HashMap) Get(k string) interface{} {\n    index := h.getIndex(k)\n    bucket := h.buckets[index]\n    // linear searching the node in bucket,\n    // because the bucket should be a small list,\n    // so it should not take too long time.\n    // This is why hash function and size of buckets does important\n    for _, node := range bucket {\n        if node.key == k {\n            return node.value\n        }\n    }\n    return nil\n}\n\nfunc (h *HashMap) Set(k string, v interface{}) {\n    index := h.getIndex(k)\n    bucket := h.buckets[index]\n    for i := range bucket {\n        n := &#x26;bucket[i]\n        if n.key == k { // existed node\n            n.value = v\n            // early return while updated\n            return\n        }\n    }\n    // append into bucket\n    h.buckets[index] = append(h.buckets[index], Node{key: k, value: v})\n}\n</code></pre>","frontmatter":{"title":"Write a hashmap in Go"}}},"pageContext":{"slug":"/blog/cs/write-hashmap-in/"}}}