{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/simple-way-to-ensure-go-interface-wont-be-implement/","result":{"data":{"markdownRemark":{"html":"<p>Sample code is quite easy:</p>\n<pre><code class=\"language-go\">type Car interface {\n    impl() Car\n    Move()\n}\n\ntype Animal interface {\n    impl() Animal\n    Walk()\n}\n</code></pre>\n<p>Now, let’s create a structure type:</p>\n<pre><code class=\"language-go\">type Duck struct {\n    Animal\n}\n</code></pre>\n<p>Now, if you add <code>func (d *Duck) Move()</code>, you won’t be a car accidently! What if you want to embed two interfaces?</p>\n<pre><code class=\"language-go\">type Duck struct {\n    Car\n    Animal\n}\n</code></pre>\n<p>The compiler would refuse the code since: <code>Duck.impl is ambiguous</code>, you can’t have two methods with the same name in Go definition. So we can use this to create something just like <code>impl Trait for Type</code> in Rust, although this is a workaround,but anyway I work with Go so I have to find out how to ensure this when we need it.</p>\n<p>If you want to know what if we want something just take type has <code>Move()</code> method? Then just define:</p>\n<pre><code class=\"language-go\">type Movable interface {\n    Move()\n}\n</code></pre>\n<p>The point is correctly reduce the concept in interface, and do not create interface has general name, unless you know what are you doing,but if you need a workaround, this is.</p>\n<p>Since Go can’t write: <code>func foo(bar A + B + C)</code>, <code>A</code>, <code>B</code>, <code>C</code> are <code>interface</code>, so I suggest write:</p>\n<pre><code class=\"language-go\">func foo(bar interface{\n    A\n    B\n    C\n})\n</code></pre>\n<blockquote>\n<p>NOTE: newline is required, because Go compiler is stupid. You might want define a private interface for this function only.</p>\n</blockquote>\n<p>Sad thing is we can’t use <code>A | B | C</code>, have to do runtime assertion for this.</p>\n<p>One more bad thing is because you embedded the interface, Go won’t check you provide the implementation of methods or not, you have to do this manually.</p>","frontmatter":{"title":"A simple way to ensure interface won't be implemented accidently"}}},"pageContext":{"slug":"/blog/cs/simple-way-to-ensure-go-interface-wont-be-implement/"}}}