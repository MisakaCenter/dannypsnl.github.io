{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/design-of-redux-go-v2/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Redux is a single flow state manager. I porting it from JS to Go at last year.</p>\n<p>But there had one thing make me can't familiar with it, that is type of state!</p>\n<p>In Redux, we have store combined by many reducers. Then we dispatch action into store to updating our state. That means our state could be anything.</p>\n<p>In JS, we have a reducer like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action<span class=\"token punctuation\">.</span>type <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>payload\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DEC\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>payload\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's look good, because we don't have type limit at here. In Redux-go v1, we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>state <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action action<span class=\"token punctuation\">.</span>Action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> state <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">switch</span> action<span class=\"token punctuation\">.</span>Type <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INC\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token string\">\"payload\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DEC\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> action<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token string\">\"payload\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Look at those assertion, of course it's safe because you should know which type are you using. But just so ugly.</p>\n<p>So I decide to change this. In v2, we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>state <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> payload <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> payload\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wait, what!!!?</p>\n<p>So I have to explain the magic behind it.</p>\n<p>First is how to got user wanted type of state. The answer is <code class=\"language-text\">reflect</code> package.</p>\n<p>But how? Let's dig in <code class=\"language-text\">v2/store</code> function: <code class=\"language-text\">New</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>reducers <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Store</code></pre></div>\n<p>As you see, we have to accept any type been a reducer at parameters part.</p>\n<p>Then let's see type: <code class=\"language-text\">Store</code>(only core part)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Store <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    reducers <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value\n    state    <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uintptr</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Yp, we store the reflect result that type is <code class=\"language-text\">reflect.Value</code>.</p>\n<p>But why? Because if we store <code class=\"language-text\">interface{}</code>, we have to call <code class=\"language-text\">reflect.ValueOf</code> each time we want to call it! That will become too slow.</p>\n<p>And <code class=\"language-text\">state</code> will have an exlpanation later.</p>\n<p>So in the <code class=\"language-text\">New</code> body.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>reducers <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Store <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// malloc a new store and point to it</span>\n    newStore <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Store<span class=\"token punctuation\">{</span>\n        reducers<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token punctuation\">:</span>    <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uintptr</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// range all reducers, of course</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reducer <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> reducers <span class=\"token punctuation\">{</span>\n        r <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">checkReducer</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// Stop for while</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, what is <code class=\"language-text\">checkReducer</code>? Let's take a look now!</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">checkReducer</span><span class=\"token punctuation\">(</span>r reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Ex. nil</span>\n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span>Invalid <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's an invalid value\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// reducer :: (state, action) -> state</span>\n\n    <span class=\"token comment\">// Missing state or action</span>\n    <span class=\"token comment\">// Ex. func counter(s int) int</span>\n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">NumIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reducer should have state &amp; action two parameter, not thing more\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Return mutiple result, Redux won't know how to do with this</span>\n    <span class=\"token comment\">// Ex. func counter(s int, p int) (int, error)</span>\n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">NumOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reducer should return state only\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// Return's type is not input type, Redux don't know how would you like to handle this</span>\n    <span class=\"token comment\">// Ex. func counter(s int, p int) string</span>\n    <span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Out</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reducer should own state with the same type at anytime, if you want have variant value, please using interface\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now back to <code class=\"language-text\">New</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reducer <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> reducers <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token function\">checkReducer</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    newStore<span class=\"token punctuation\">.</span>reducers <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>newStore<span class=\"token punctuation\">.</span>reducers<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n\n    newStore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">{</span>\n            reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> newStore\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>So that's how <code class=\"language-text\">state</code> work, using a address of reducer mapping it's state.</p>\n<p><code class=\"language-text\">reflect.Value.Call</code> this method allow you invoke a <code class=\"language-text\">reflect.Value</code> from a function.</p>\n<p>It's parameter types required by signature. It always return several <code class=\"language-text\">refelct.Value</code>, but because we just very sure we only reutrn one thing, so we can just extract index 0.</p>\n<p>Then is <code class=\"language-text\">state</code>, why I choose to using pointer but not function name this time?</p>\n<p>Thinking about this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// pkg a</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Reducer</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> p <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token comment\">// pkg b</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Reducer</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> p <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n<span class=\"token comment\">// pkg main</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    store <span class=\"token operator\">:=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>Reducer<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>Reducer<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which one should we pick? Of course we can trying to left package name make it can be identified.</p>\n<p>But next is the really hard:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> p <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> s <span class=\"token operator\">+</span> p <span class=\"token punctuation\">}</span>\n    store <span class=\"token operator\">:=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you think counter name is counter, that is totally wrong, it's name is <strong>func1</strong>.</p>\n<p>So, I decide using function itself to get mapping state. That is new API: <code class=\"language-text\">StateOf</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Store<span class=\"token punctuation\">)</span> <span class=\"token function\">StateOf</span><span class=\"token punctuation\">(</span>reducer <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    place <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Valueof</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>place<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Interface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The point is <code class=\"language-text\">reflect.Value.Interface</code>, this method return the value it owns.</p>\n<p>The reason we return <code class=\"language-text\">interface{}</code> at here is because, we have no way to convert to user wanted type, and user is always know what them get actually, just for convience we let user can use any type for their state, so they don't need to do <code class=\"language-text\">state.(int)</code> these assertion.</p>\n<p>Now, you just work like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter <span class=\"token operator\">:=</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>s <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> payload <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s <span class=\"token operator\">+</span> payload\n    <span class=\"token punctuation\">}</span>\n    store <span class=\"token operator\">:=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    store<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">StateOf</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// expected: 80</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These are biggest break through for v2, thanks for read</p>","frontmatter":{"title":"Design of Redux-go v2","categories":["cs"],"tags":["golang","redux"]}}},"pageContext":{"slug":"/blog/cs/design-of-redux-go-v2/"}}}