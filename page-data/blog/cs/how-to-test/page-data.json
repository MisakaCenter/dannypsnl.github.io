{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/how-to-test/","result":{"data":{"markdownRemark":{"html":"<p>Before you start to read, ensure you're using Cabal >= 3.0 to manage your project.</p>\n<p>For a <strong>Haskell</strong> project, I usually use Cabal, do not have any special reason. In the <code>xxx.cabal</code> file, we can define some common dependencies by <code>common</code> block:</p>\n<pre><code>-- just let you know how does the file should look like\n-- with full content people can understand the structure better\ncabal-version:       3.0\n\nname:                your-module\nversion:             0.1.0.0\nlicense:             MIT\nlicense-file:        LICENSE\nauthor:              your-name\nmaintainer:          your-name@email.com\n-- Extra files to be distributed with the package, such as examples or a\n-- README.\nextra-source-files:  CHANGELOG.md\n\n-- Common block\ncommon shared-properties\n  default-language: Haskell2010\n  build-depends:\n    base == 4.*, mtl >= 2.2\n  ghc-options:\n    -Wall\n</code></pre>\n<p>Then we can add <code>test-suite</code> block like this:</p>\n<pre><code>-- common block at here\nlibrary\n  import: shared-properties\n  exposed-modules:     YourModule\n  other-modules:\n  -- Directories containing source files.\n  hs-source-dirs:      src\n  default-language:    Haskell2010\n\ntest-suite spec\n  import: shared-properties\n  type: exitcode-stdio-1.0\n  other-modules: YourModuleSpec SpecHelper\n  hs-source-dirs: test\n  main-is: Spec.hs\n  build-depends: hspec >= 2.7\n                 , hspec-discover >= 2.7\n                 , your-module\n  default-language:    Haskell2010\n</code></pre>\n<p>Create <code>$project-path/test/Spec.hs</code> and put:</p>\n<pre><code class=\"language-hs\">{-# OPTIONS_GHC -F -pgmF hspec-discover #-}\n</code></pre>\n<p>And create <code>$project-path/test/SpecHelper.hs</code> and put:</p>\n<pre><code class=\"language-hs\">module SpecHelper (\n  module Test.Hspec\n) where\n\nimport Test.Hspec\n</code></pre>\n<p>Finally, create <code>$project-path/test/YourModuleSpec.hs</code> and put:</p>\n<pre><code class=\"language-hs\">module YourModuleSpec where\nimport SpecHelper\nimport YourModule\n\nspec :: Spec\nspec = describe \"Your module\" $ do\n  context \"has a function add can add two nature numbers\" $ do\n    (add 1 2) `shouldBe` 3\n\nmain :: IO ()\nmain = hspec spec\n</code></pre>\n<p>Then run commands:</p>\n<pre><code class=\"language-bash\">cabal new-update\ncabal new-install --only-dependencies\ncabal install hspec-discover\ncabal new-configure --enable-tests\ncabal new-test\n</code></pre>\n<p>We finish the setup of testing now.</p>","frontmatter":{"title":"How to test in Haskell: HSpec setup"}}},"pageContext":{"slug":"/blog/cs/how-to-test/"}}}