{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/introduction-of-lldb/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Seriously, I'm not a big fan of the debugger since I never have a try at before. But this time I take a few hours to work with it and the experience is amazed. The debugger provides a way to peeking all stuff inside the program by different input, and this way is almost perfer for debugging something you don't have any idea. But on the other hands, we should create a sufficient example to determine the problem which is not so easy.</p>\n<p>Anyway, to have another tool in the toolbox is nice, so let's start to see how LLDB work with <code class=\"language-text\">C</code>.</p>\n<p>The first step is to create a small program. p.s. Formatted by <code class=\"language-text\">clang-format</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// main.c</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, %s\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> print_me <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"print me: %d\\n\"</span><span class=\"token punctuation\">,</span> print_me<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the program, we leave a variable <code class=\"language-text\">print_me</code> just to show how to use <code class=\"language-text\">display</code> hook.</p>\n<p>Then we compile it, the point here is you should make sure the compiler provides the debug information, the command is: <code class=\"language-text\">clang -g main.c</code>, it would generate an executable <code class=\"language-text\">a.out</code> and a directory <code class=\"language-text\">a.out.dSYM</code> which include the debug information, and now we can start our debugger!</p>\n<p>Type: <code class=\"language-text\">lldb</code> and enter.</p>\n<p>Now we are in the interactive environment of <strong>LLDB</strong>.</p>\n<p>The first step is creating a target. Type and enter <code class=\"language-text\">target create a.out</code>, and type <code class=\"language-text\">target list</code> to ensure you just create a target. You can create multiple targets at the same time and use <code class=\"language-text\">target select &lt;target-index&gt;</code> to change the target you're going to debug.</p>\n<p>The next step is to set a breakpoint, breakpoint means while you run the target executable, the location it would stop to let you observed the state of the process. Let's set our first breakpoint to know how it works. Type <code class=\"language-text\">b main</code> and enter. Then run <code class=\"language-text\">breakpoint list</code> to ensure you create a breakpoint. Now, type <code class=\"language-text\">run Danny</code> to see what happened, in my computer, it shows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(lldb) run Danny\nProcess 63370 launched: &#39;/Users/dannypsnl/workspace/dannypsnl/lldb/a.out&#39; (x86_64)\nProcess 63370 stopped\n* thread #1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1\n    frame #0: 0x0000000100000f16 a.out`main(argc=2, argv=0x00007ffeefbff138) at main.c:4\n   1    #include &lt;stdio.h&gt;\n   2\n   3    int main(int argc, char **argv) {\n-&gt; 4      if (argc &lt; 1)\n   5        return 1;\n   6      printf(&quot;hello, %s\\n&quot;, argv[1]);\n   7      int print_me = 10;\nTarget 0: (a.out) stopped.</code></pre></div>\n<p>The process stops at the entry of the main function. LLDB allows you to dump frame to know the state of the process, the command is <code class=\"language-text\">fr v</code>, it's a short command of <code class=\"language-text\">frame variable</code>, you would see:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(lldb) frame variable\n(int) argc = 2\n(char **) argv = 0x00007ffeefbff138\n(int) print_me = 0</code></pre></div>\n<p>And you also could show a certain variable, for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(lldb) print argc\n(int) $0 = 2</code></pre></div>\n<p>But if you want to know the value of a variable by different inputs, type <code class=\"language-text\">print</code> to get it seems not so good, for this situation, you could use <code class=\"language-text\">display</code> to replace it, <code class=\"language-text\">display</code> just work as <code class=\"language-text\">print</code>, but it would be triggered automatically so you don't have to afraid you forgot to show some information. By the way, <code class=\"language-text\">print</code> supports high-level expression, e.g.:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(lldb) print argv[1]\n(char *) $9 = 0x00007ffeefbff358 &quot;Danny&quot;</code></pre></div>\n<p>Now, we know a lot about how to get the state of the process, but don't forget we still at the first breakpoint, we need to know how to move to forward. The commands for this are <code class=\"language-text\">step</code> and <code class=\"language-text\">continue</code>, the difference between them was <code class=\"language-text\">step</code> would move one instruction(as small as possible), and <code class=\"language-text\">continue</code> would move to next breakpoint. And the shortcut of them are <code class=\"language-text\">s</code> and <code class=\"language-text\">c</code>, you can have a try to feel the difference.</p>\n<p>About breakpoint, we have more ways to set a breakpoint, we use function name to set one, we also can use the location to set one, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(lldb) breakpoint set -l 7</code></pre></div>\n<p>This would add a breakpoint at line 7, and we can use <code class=\"language-text\">breakpoint delete &lt;breakpoint-index&gt;</code> to remove them.</p>\n<p>To get more information, you should take a look at <a href=\"https://lldb.llvm.org/tutorial.html\">https://lldb.llvm.org/tutorial.html</a>, thanks for reading.</p>","frontmatter":{"title":"Introduction of LLDB"}}},"pageContext":{"slug":"/blog/cs/introduction-of-lldb/"}}}