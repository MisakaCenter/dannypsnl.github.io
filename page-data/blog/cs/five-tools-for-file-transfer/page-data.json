{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/five-tools-for-file-transfer/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>We usually have to transfer files between two computers, such as config, log, image. There are a lot of tools that could do it, but if we only know one approach, we would have trouble quickly, so I'm going to show you five tools relate to the topic.</p>\n<h3>1. scp(secure copy)</h3>\n<p><code class=\"language-text\">scp</code> is a command line utility that allows you to copy files and directories between two locations securely. It put at first order is because it's the best choice if we could. With <code class=\"language-text\">scp</code>, we could:</p>\n<ul>\n<li>copy from your local to a remote</li>\n<li>copy from a remote to your local system</li>\n<li>copy between two remotes from your local</li>\n</ul>\n<p>When scp transferring data, both password and files are encrypted so anyone could see the packet can't get any sensitive.</p>\n<h4>command line syntax</h4>\n<p>The format of the command is:\n<code class=\"language-text\">scp [OPTION] [user@]SRC_HOST:]file1 [user@]DEST_HOST:]file2</code></p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> log.txt danny@54.133.2.8:~/</code></pre></div>\n<p>Means copy the <code class=\"language-text\">./log.txt</code> to the home directory of <code class=\"language-text\">54.133.2.8</code> this computer.</p>\n<p><code class=\"language-text\">scp</code> just like <code class=\"language-text\">cp</code>, as you thought, copy remote to local was:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> danny@54.133.2.8:~/log.txt ./</code></pre></div>\n<p>If you want to copy between two remote:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> danny@54.133.2.8:~/log.txt danny@54.133.2.9:~/</code></pre></div>\n<p>Usually, you need a key to use <code class=\"language-text\">scp</code>, to add it into command, use the option <code class=\"language-text\">-i</code> to do that:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">scp</span> -i /path/to/key <span class=\"token variable\">$src</span> <span class=\"token variable\">$dst</span></code></pre></div>\n<p>There are a lot of useful options, just quickly pick some at here:</p>\n<ul>\n<li><code class=\"language-text\">-r</code>: recursively copy the directories</li>\n<li><code class=\"language-text\">-P</code>: specific port</li>\n<li><code class=\"language-text\">-C</code>: force compress data</li>\n</ul>\n<p>To get more information, take a look at <a href=\"https://linux.die.net/man/1/scp\">scp man page</a></p>\n<h3>2. nc(netcat)</h3>\n<p>Although <code class=\"language-text\">scp</code> is powerful, sometimes the environment couldn't use it.</p>\n<p><code class=\"language-text\">nc</code> is a network testing tool actually, but if you use:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">nc</span> -l <span class=\"token number\">8888</span> <span class=\"token operator\">|</span> <span class=\"token function\">tar</span> zvf -</code></pre></div>\n<p>Nice, you listen on port <code class=\"language-text\">8888</code> now, next thing is transfer data to it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">tar</span> cvf - ./file <span class=\"token operator\">|</span> <span class=\"token function\">nc</span> localhost <span class=\"token number\">8888</span></code></pre></div>\n<p>For a lazy guy:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># listen</span>\n$ <span class=\"token function\">nc</span> -l <span class=\"token number\">8888</span> <span class=\"token operator\">></span> <span class=\"token function\">file</span>\n$ <span class=\"token function\">nc</span> localhost <span class=\"token number\">8888</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">file</span></code></pre></div>\n<p><code class=\"language-text\">nc</code> would close after receiving some data, so if we don't want that, try:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token function\">nc</span> -l <span class=\"token number\">8888</span> <span class=\"token operator\">|</span> <span class=\"token function\">tar</span> zvf -<span class=\"token punctuation\">;</span> <span class=\"token keyword\">done</span></code></pre></div>\n<h3>3. python</h3>\n<p>If you have no choice or want to provide a long time server, and no like to remember a lot of pipeline command, try <code class=\"language-text\">python</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ python3 -m http.server</code></pre></div>\n<p>It would start a file server at your command location.</p>\n<h3>4. tar</h3>\n<p>At <code class=\"language-text\">nc</code> section, could see we already use this tool, <code class=\"language-text\">tar</code> is helpful while the file is quite big, reduce the size to improve our life.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># compress</span>\n$ <span class=\"token function\">tar</span> cvf <span class=\"token function\">file</span>\n<span class=\"token comment\"># extract</span>\n$ <span class=\"token function\">tar</span> zvf <span class=\"token function\">file</span></code></pre></div>\n<p>To get more information: <a href=\"https://linux.die.net/man/1/tar\">tar man page</a></p>\n<h3>5. ngrok</h3>\n<p>At the previous section, we are assuming the target have public ip could reach easily. But life is hard. Sometimes we didn't have public ip; for this situation, <code class=\"language-text\">ngrok</code> could help.</p>\n<p>Site: <a href=\"https://ngrok.com/\">ngrok</a></p>\n<p>This tool has to download by yourself.</p>\n<p>Let's show how to use it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># expose localhost:8080 by HTTP</span>\n$ ngrok http <span class=\"token number\">8080</span>\n<span class=\"token comment\"># expose localhost:8080 by TCP</span>\n$ ngrok tcp <span class=\"token number\">8080</span></code></pre></div>\n<p>The TCP is beneficial for <code class=\"language-text\">nc</code> command. And HTTP is useful while you create a file server.</p>\n<h2>Conculsion</h2>\n<p>In this tutorial, you learn how to transfer files by different tools and solve the limited networking environment issue to transfer data between different computers. Thanks for reading.</p>","frontmatter":{"title":"5 tools for file transfer"}}},"pageContext":{"slug":"/blog/cs/five-tools-for-file-transfer/"}}}