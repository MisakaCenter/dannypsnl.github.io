{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/note-a-little-bit-z3-solver/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<blockquote>\n<p>Satisfiability Modulo Theories(SMT) problem is a decision problem for logical formulas with respect to combinations of background theories such as arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is an efficient SMT solver with specialized algorithms for solving background theories.</p>\n</blockquote>\n<p>Wow, many words. But for me, right now, Z3 is a theorem prover from Microsoft. Use SMT-LIB this lisp-like language.</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">declare-const</span> x Int<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">declare-const</span> y Int<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token car\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> x y <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">check-sat</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The program produce: <code class=\"language-text\">sat</code> as result. If we didn't provide a possible constraint:</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">declare-const</span> x Int<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token car\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token car\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> x <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">check-sat</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The result would be <code class=\"language-text\">unsat</code>, not surprising.</p>\n<p>As title, <strong>a little bit</strong> z3, this is the end, I hadn't know where can I use z3, XD.</p>","frontmatter":{"title":"NOTE: a little bit Z3 solver"}}},"pageContext":{"slug":"/blog/cs/note-a-little-bit-z3-solver/"}}}