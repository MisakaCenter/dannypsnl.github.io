{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/gRPC-basic/","result":{"data":{"markdownRemark":{"html":"<p>What is RPC? RPC means \"remote procedure call\". The concept is call remote function as local function.</p>\n<p>Then gRPC? It is a framework that help you create RPC.</p>\n<p>Traditional RPC has some problem make it hard to use. For example, how do you know, what type of message you get?</p>\n<p>Usually, we use JSON or others format. But marshal &#x26; unmarshal quickly became a big issue.\nBecause as time goes on, we don't actually know which service use which field, thus we can't reduce anything.</p>\n<p>And server &#x26; client will get more further more far for same reason.</p>\n<p>These all, won't be an issue in gRPC.</p>\n<p>In gRPC, you define a <code>*.proto</code> file for your service.</p>\n<p>At here, we will create one named <code>UserService</code></p>\n<pre><code class=\"language-protobuffer\">syntax = \"proto3\";\n\npackage user;\n\nservice UserService {\n  rpc GetUser (Empty) returns (User) {}\n}\n\n// define message type\nmessage Empty {}\nmessage User {\n  string name = 1;\n  int32 age = 2;\n}\n</code></pre>\n<p>To generate code, I usually use <code>go generate ./...</code></p>\n<p>So let's have a file <code>gen.go</code>, just leave a comment about what command you want to execute.</p>\n<pre><code class=\"language-go\">//go:generate sh -c \"protoc -I./user --go_out=plugins=grpc:./user ./user/*.proto\"\n</code></pre>\n<p>Implement service:</p>\n<pre><code class=\"language-go\">import \"path/to/grpc_generated/user\"\n\ntype UserService struct{}\n\nfunc (us *UserService) GetUser(ctx context.Context, u *user.Empty) (*user.User, error) {\n    return &#x26;user.UserName{\n        Name: \"Danny\",\n        Age:  21,\n    }, nil\n}\n</code></pre>\n<p>Create server:</p>\n<pre><code class=\"language-go\">import (\n    \"net\"\n    \"path/to/grpc_generated/user\"\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    l, err := net.Listen(\"tcp\", \":50051\")\n    // handle err\n    server := grpc.NewServer()\n\n    service := user.UserServiceServer(&#x26;UserService{})\n    user.RegisterUserServiceServer(server, service)\n\n    err = server.Serve(l)\n    // handle err\n}\n</code></pre>\n<p>Final is our client:</p>\n<pre><code class=\"language-go\">import (\n    \"fmt\"\n    \"net\"\n    \"path/to/grpc_generated/user\"\n    \"google.golang.org/grpc\"\n)\n\nfunc main() {\n    conn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsercure())\n    // handle err\n    defer conn.Close()\n    client := user.NewUserServiceClient(conn)\n    u, err := client.GetUser(context.Background(), &#x26;user.Empty{})\n    // handle err\n    fmt.Printf(\"Name: %s, Age: %d\", u.Name, u.Age)\n}\n</code></pre>\n<p>After that, run <code>go generate ./...</code> from project root dir.</p>\n<p>Then <code>go run server.go</code>, open another terminal, <code>go run client.go</code></p>\n<p>I usually won't commit generated code(unless commit it is make sense), so I usually will write <code>*.pb.go</code> in file <code>.gitignore</code></p>\n<p>More info:</p>\n<ul>\n<li><a href=\"https://grpc.io/\">grpc.io</a></li>\n</ul>","frontmatter":{"title":"gRPC quick start in Go"}}},"pageContext":{"slug":"/blog/cs/gRPC-basic/"}}}