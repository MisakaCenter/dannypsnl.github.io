{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/note-cpp/","result":{"data":{"markdownRemark":{"html":"<p>Optional type <code>std::optional&#x3C;T></code> was introduced since C++17, we could include header <code>&#x3C;optional></code> to have it. I supply a few examples to explain this good abstraction.</p>\n<p>A little step:</p>\n<pre><code class=\"language-cpp\">std::optional&#x3C;int> i{1};\nif (i) {\n  std::cout &#x3C;&#x3C; i.value() &#x3C;&#x3C; std::endl;\n}\n</code></pre>\n<p>This example shows how to check <code>optional</code> exist or not, and how to extract value from <code>optional</code>.</p>\n<pre><code class=\"language-cpp\">std::optional&#x3C;int> i{std::nullopt};\nstd::cout &#x3C;&#x3C; i.value_or(10) &#x3C;&#x3C; std::endl;\n</code></pre>\n<p>This example shows if we know the fall back value, we can provide it and skip checking <code>optional</code>. There was still something missing that quite important, for example, we shouldn't use <code>value_or</code>, but more expressive helpers:</p>\n<pre><code class=\"language-hs\">Prelude> fmap (+10) (Just 4) :: Maybe Int\nJust 14\nPrelude> (*) &#x3C;$> (Just 4) &#x3C;*> (Just 5)\nJust 20\n</code></pre>\n<p>So that we use function than just a value, furthermore I also would like to see there had something like <code>unwrap()</code>, C++ provided <strong>Exception</strong>, I thought there had no reason to prevent this way.</p>","frontmatter":{"title":"NOTE: C++ optional"}}},"pageContext":{"slug":"/blog/cs/note-cpp/"}}}