{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/erlang-quick-start/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>那麼今天就來介紹說很久但是一直沒有寫的 Erlang 吧!</p>\n<p>Erlang 是一隻很有趣的語言，它絕對跟你看過的主流語言有巨大的差異，無論是語法上還是思想上皆是如此</p>\n<p>首先我們需要安裝環境，請參考官方的 Downloads</p>\n<p>接著我們就從 erl 開始吧</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ erl</code></pre></div>\n<p>輸入指令啟動 Erlang 的互動環境</p>\n<p>你可以先嘗試輸入</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token variable\">X</span><span class=\"token operator\">=</span><span class=\"token number\">0.</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">2</span><span class=\"token operator\">></span> <span class=\"token variable\">X</span><span class=\"token operator\">=</span><span class=\"token number\">1.</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token atom\">exception</span> <span class=\"token atom\">error</span><span class=\"token punctuation\">:</span> <span class=\"token atom\">no</span> <span class=\"token atom\">match</span> <span class=\"token keyword\">of</span> <span class=\"token atom\">right</span> <span class=\"token atom\">hand</span> <span class=\"token atom\">side</span> <span class=\"token atom\">value</span> <span class=\"token number\">1</span></code></pre></div>\n<p>為什麼會出現例外呢？因為 Erlang 不準改變變數之值，Erlang 將<code class=\"language-text\">X=0.</code>這樣的述句稱為綁定，而變數一但綁定就不能再次綁定，所以 X 將永遠為 0，請不要害怕這會成為問題</p>\n<p>事實上，在共時編程中，這樣的結果是令人安心的，競態問題將大幅減少，你將得到的是助益</p>\n<p>那麼我們來看更加細節的部份，首先變數名稱並不是能隨意命名的，在 Erlang 中，只有大寫開頭的名稱會被當成變數名稱，因為小寫被原子(atom)佔去了(小寫開頭即為原子，後面再解釋何為原子)</p>\n<p>綁定只有一次，.是一個述句的結束</p>\n<p>接著我們來看更多的案例</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">3</span><span class=\"token operator\">></span> <span class=\"token variable\">X</span> <span class=\"token operator\">+</span> <span class=\"token number\">20.</span>\n<span class=\"token number\">20</span></code></pre></div>\n<p>就是個加法</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">4</span><span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">=</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">5</span><span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token variable\">X</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token atom\">exception</span> <span class=\"token atom\">error</span><span class=\"token punctuation\">:</span> <span class=\"token atom\">no</span> <span class=\"token atom\">match</span> <span class=\"token keyword\">of</span> <span class=\"token atom\">right</span> <span class=\"token atom\">hand</span> <span class=\"token atom\">side</span> <span class=\"token atom\">value</span> <span class=\"token number\">0</span></code></pre></div>\n<p>和剛才稍有不同，不過你可以從這個案例看出為什麼叫做綁定，因為這是雙向的，=會比較兩邊是否相同，如果左值尚未被綁定就會進行綁定行為</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">8</span><span class=\"token operator\">></span> <span class=\"token variable\">X</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token number\">1.</span>\n<span class=\"token number\">0</span></code></pre></div>\n<p>這裡有更有趣的案例，你可以更清楚的了解到=的行為</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">9</span><span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token operator\">/</span><span class=\"token number\">2.</span>\n<span class=\"token number\">2.0</span>\n<span class=\"token number\">10</span><span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token operator\">/</span><span class=\"token number\">2.</span>\n<span class=\"token number\">1.5</span>\n<span class=\"token number\">11</span><span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">3.</span>\n<span class=\"token number\">0.3333333333333333</span></code></pre></div>\n<p>這裡可以看到 Erlang 對數字型別的自動轉換，運算在 Erlang 中相當輕鬆，Erlang 已處理了最麻煩的部份</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">17</span><span class=\"token operator\">></span> <span class=\"token atom\">hello</span><span class=\"token punctuation\">.</span>\n<span class=\"token atom\">hello</span></code></pre></div>\n<p>原子之值即自己</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">18</span><span class=\"token operator\">></span> <span class=\"token variable\">O</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>元組(tuple)可以想成匿名的 C 結構</p>\n<p>由於神奇的模式綁定(其實就是=的規則)，我們可以寫出如</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">19</span><span class=\"token operator\">></span> <span class=\"token variable\">Me</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">person</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">name</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Danny\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">height</span><span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">sex</span><span class=\"token punctuation\">,</span> <span class=\"token atom\">male</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">{</span><span class=\"token atom\">person</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token atom\">name</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Danny\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token atom\">height</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token atom\">sex</span><span class=\"token punctuation\">,</span><span class=\"token atom\">male</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token number\">20</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token atom\">person</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token atom\">name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">MyName</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">_</span> <span class=\"token punctuation\">,</span> <span class=\"token variable\">_</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token variable\">Me</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">{</span><span class=\"token atom\">person</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token atom\">name</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Danny\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token atom\">height</span><span class=\"token punctuation\">,</span><span class=\"token number\">160</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token atom\">sex</span><span class=\"token punctuation\">,</span><span class=\"token atom\">male</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token number\">21</span><span class=\"token operator\">></span> <span class=\"token variable\">MyName</span><span class=\"token punctuation\">.</span>\n<span class=\"token string\">\"Danny\"</span></code></pre></div>\n<p>這樣複雜的對應式，_匹配任意值但是我們不 care 那是什麼，可以看到我們透過綁定取得 MyName，話說我是不是寫太矮了(咦)</p>\n<p>這裡也展示 Erlang 常用的技巧，利用 atom 標記欄位</p>\n<p>需要注意的是如果右值具有不存在的參考，Erlang 會說明此參考尚未繫結(unbound)</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">22</span><span class=\"token operator\">></span> <span class=\"token variable\">C</span> <span class=\"token operator\">=</span> <span class=\"token variable\">A</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token atom\">variable</span> <span class=\"token quoted-atom atom\">'A'</span> <span class=\"token atom\">is</span> <span class=\"token atom\">unbound</span></code></pre></div>\n<p>就像這樣</p>\n<p>列表(list)</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">24</span><span class=\"token operator\">></span> <span class=\"token variable\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">25</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token variable\">F</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">_</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">_</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">A</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">26</span><span class=\"token operator\">></span> <span class=\"token variable\">F</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span></code></pre></div>\n<p>可以看到列表與結構皆能做模式比對</p>\n<p>差別在於這個案例</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">30</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token variable\">H</span><span class=\"token punctuation\">|</span><span class=\"token variable\">T</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">A</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token number\">31</span><span class=\"token operator\">></span> <span class=\"token variable\">H</span><span class=\"token punctuation\">.</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">32</span><span class=\"token operator\">></span> <span class=\"token variable\">T</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>你可以透過特殊的語法比對出 Head 與 Tail，熟悉函數式編程的同學應該已經興奮不已了吧，大概啦</p>\n<p>這個特性讓 list 能夠被迭代，而 tuple 不能</p>\n<p>接著我們來談字串</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">35</span><span class=\"token operator\">></span> <span class=\"token variable\">Name</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">.</span>\n<span class=\"token string\">\"Hello\"</span>\n<span class=\"token number\">36</span><span class=\"token operator\">></span> <span class=\"token variable\">Name</span><span class=\"token punctuation\">.</span>\n<span class=\"token string\">\"Hello\"</span></code></pre></div>\n<p>看起來與你過去所學無異，但其實 Erlang 是用數字列表代表字串的，所以你可以</p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">37</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token number\">83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">112</span><span class=\"token punctuation\">,</span> <span class=\"token number\">114</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>\n<span class=\"token string\">\"Surprise\"</span></code></pre></div>\n<p>這真的很 Surprise</p>\n<p>但是如果列表無法組成字串，就只是普通的列表，算是 Erlang 中最難搞的陷阱之一</p>\n<p>最後教你怎麼退出<code class=\"language-text\">erl</code></p>\n<p>輸入<code class=\"language-text\">q().</code></p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">38</span><span class=\"token operator\">></span> <span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n<span class=\"token atom\">ok</span>\n<span class=\"token number\">39</span><span class=\"token operator\">></span></code></pre></div>\n<p>像這樣，這會頓一下才退出</p>\n<p>你也可以按<code class=\"language-text\">&lt;C-c&gt;</code>，輸入<code class=\"language-text\">a</code>，按<code class=\"language-text\">&lt;Enter&gt; (a)bort</code></p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">1</span><span class=\"token operator\">></span>\n<span class=\"token variable\">BREAK</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">a</span><span class=\"token punctuation\">)</span><span class=\"token atom\">bort</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">c</span><span class=\"token punctuation\">)</span><span class=\"token atom\">ontinue</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">p</span><span class=\"token punctuation\">)</span><span class=\"token atom\">roc</span> <span class=\"token atom\">info</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">i</span><span class=\"token punctuation\">)</span><span class=\"token atom\">nfo</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">l</span><span class=\"token punctuation\">)</span><span class=\"token atom\">oaded</span>\n       <span class=\"token punctuation\">(</span><span class=\"token atom\">v</span><span class=\"token punctuation\">)</span><span class=\"token atom\">ersion</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">k</span><span class=\"token punctuation\">)</span><span class=\"token atom\">ill</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">D</span><span class=\"token punctuation\">)</span><span class=\"token atom\">b</span><span class=\"token operator\">-</span><span class=\"token atom\">tables</span> <span class=\"token punctuation\">(</span><span class=\"token atom\">d</span><span class=\"token punctuation\">)</span><span class=\"token atom\">istribution</span>\n<span class=\"token atom\">a</span></code></pre></div>\n<p>像這樣</p>\n<p>按<code class=\"language-text\">&lt;C-g&gt;</code>，輸入<code class=\"language-text\">q</code>，按<code class=\"language-text\">&lt;Enter&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">1</span><span class=\"token operator\">></span>\n<span class=\"token variable\">User</span> <span class=\"token atom\">switch</span> <span class=\"token atom\">command</span>\n <span class=\"token operator\">--</span><span class=\"token operator\">></span> <span class=\"token atom\">q</span></code></pre></div>\n<p>像這樣</p>\n<p>輸入<code class=\"language-text\">halt().</code></p>\n<div class=\"gatsby-highlight\" data-language=\"erlang\"><pre class=\"language-erlang\"><code class=\"language-erlang\"><span class=\"token number\">1</span><span class=\"token operator\">></span> <span class=\"token function\">halt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>像這樣，這會馬上退出</p>\n<p>下一篇介紹模組好了，我到底欠幾個下一篇了 QQ</p>\n<h3>References:</h3>\n<h4><a href=\"https://pragprog.com/book/jaerlang2/programming-erlang\">Programming Erlang: 2ed</a></h4>\n<ul>\n<li>Author: Joe Armstrong</li>\n<li>ISBN: 978-1-93778-553-6</li>\n</ul>","frontmatter":{"title":"Erlang Quick Start","categories":["cs"],"tags":["erlang"]}}},"pageContext":{"slug":"/blog/cs/erlang-quick-start/"}}}