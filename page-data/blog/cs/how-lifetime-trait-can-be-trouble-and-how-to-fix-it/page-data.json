{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/how-lifetime-trait-can-be-trouble-and-how-to-fix-it/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>In my case, I have a trait called <code class=\"language-text\">Resource</code> for deserialize from bytes. Now I want to reuse a struct called <code class=\"language-text\">List</code> for others <code class=\"language-text\">Resource</code> so I write done:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ignore others field</span>\n    items<span class=\"token punctuation\">:</span> Vec<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> Resource<span class=\"token operator\">></span> Resource <span class=\"token keyword\">for</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> serde_json<span class=\"token punctuation\">::</span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Because <code class=\"language-text\">serde_json::from_str</code> requires <code class=\"language-text\">impl Deserialize</code> so we have to modify the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">:</span> Resource <span class=\"token operator\">+</span> Deserialize<span class=\"token operator\">></span> Resource <span class=\"token keyword\">for</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> serde_json<span class=\"token punctuation\">::</span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It looks work but not. The problem is <code class=\"language-text\">Deserialize</code> actually is <code class=\"language-text\">Deserialize&lt;&#39;de&gt;</code>, when we use the trait in the declaration we have to satisfy all type parameters of course includes lifetime. Ok, so we write:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a,</span> T<span class=\"token punctuation\">:</span> Resource <span class=\"token operator\">+</span> Deserialize<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">>></span> Resource <span class=\"token keyword\">for</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> list<span class=\"token punctuation\">:</span> List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">=</span> serde_json<span class=\"token punctuation\">::</span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">Ok</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It looks good and works for most cases actually, however, in my code I hiding the whole get data and deserialize in a function, whatever it's, would cause a problem.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> get_list_via_fetching_data<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a,</span> T<span class=\"token punctuation\">:</span> Deserialize<span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// in my case is kubernetes api server but that's fine</span>\n    List<span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">::</span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ok, you would find <code class=\"language-text\">data</code> is not live long enough for <code class=\"language-text\">&#39;a</code>, why? Since anyway <code class=\"language-text\">&#39;a</code> would be an outside lifetime and of course, live longer than anything in the function. What can we do for this case? We have to reverse the relationship between others <code class=\"language-text\">Resource</code> and <code class=\"language-text\">List</code>, rather than see <code class=\"language-text\">List</code> as kind of <code class=\"language-text\">Resource</code>, we add a function <code class=\"language-text\">fn from_str_to_list(s: &amp;str) -&gt; Result&lt;List&lt;Self&gt;&gt;;</code> for trait <code class=\"language-text\">Resource</code>. Since in my case <code class=\"language-text\">Resource</code> impl <code class=\"language-text\">Sized</code> and <code class=\"language-text\">List</code> also has a detected size after applying a <code class=\"language-text\">Sized T</code> so <code class=\"language-text\">List&lt;Self&gt;</code> is <code class=\"language-text\">Sized</code>. Now we can have the function <code class=\"language-text\">get_list_via_fetching_data</code>.</p>\n<p>Of course, for the most normal case I think we don't need this one, and if at future <code class=\"language-text\">&#39;_</code> lifetime introduced the problem could be resolved(but I'm not sure that is for this problem actually so just a guess).</p>\n<p>Thanks for reading and see you next time.</p>","frontmatter":{"title":"How trait with lifetime can be a trouble and how to fix it","categories":["cs"],"tags":["rust","rust lifetime"]}}},"pageContext":{"slug":"/blog/cs/how-lifetime-trait-can-be-trouble-and-how-to-fix-it/"}}}