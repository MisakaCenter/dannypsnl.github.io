{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/cs/weird-behavior-gob/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Consider the following program:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> AState <span class=\"token builtin\">uint8</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tS1 AState <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\n\tS2\n\tS3\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is quite usual in Go. But we want to make it more expressive. So we have:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>AState<span class=\"token punctuation\">)</span> <span class=\"token function\">ToS1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> S1 <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>AState<span class=\"token punctuation\">)</span> <span class=\"token function\">ToS2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> S2 <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>AState<span class=\"token punctuation\">)</span> <span class=\"token function\">ToS3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> S3 <span class=\"token punctuation\">}</span></code></pre></div>\n<p>p.s. Replace <code class=\"language-text\">ToS1</code> and others functions with meaningful names since it's a real case in the product, I don't want to show them directly.</p>\n<p>Now consider a structure:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Foo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tAState <span class=\"token operator\">*</span>AState\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With decoding:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">\tfoo <span class=\"token operator\">:=</span> <span class=\"token function\">NewFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> buf bytes<span class=\"token punctuation\">.</span>Buffer\n\tenc <span class=\"token operator\">:=</span> gob<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">)</span>\n\t<span class=\"token boolean\">_</span> <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\n\tunmarshalFoo <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Foo<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tdecBuf <span class=\"token operator\">:=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">NewBuffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">Bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tdec <span class=\"token operator\">:=</span> gob<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>decBuf<span class=\"token punctuation\">)</span>\n\tdec<span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span>unmarshalFoo<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Guess what, the field <code class=\"language-text\">AState</code> has <code class=\"language-text\">nil</code> value. This is out of expected. A least, I thought it should be a pointer to <code class=\"language-text\">S1</code> as what <code class=\"language-text\">&quot;encoding/json&quot;</code> does.</p>\n<p>We have two ways to solve this.</p>\n<p>First, remove the pointer from the field type.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Foo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tAState AState\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or we can use <code class=\"language-text\">iota + 1</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tS1 AState <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Weird behavior in Go: encoding/gob","categories":["cs"],"tags":["gob","golang","workrecord"]}}},"pageContext":{"slug":"/blog/cs/weird-behavior-gob/"}}}