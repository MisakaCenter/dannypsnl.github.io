{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/07/cs/magic-in-redux-go-2.1/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>A few days ago, I release the redux-go v2.1</p>\n<p>The purpose is: create reducer &#x26; action then manage relationships between them is pretty hard!</p>\n<p>Let's getting start from basic v2 store</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package reducer</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>state <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> action <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INCREASE\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DECREASE\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> state\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// func main</span>\nstore <span class=\"token operator\">:=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INCREASE\"</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">StateOf</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>When you got 30 reducers, each contains 3 actions, how to manage this complex?</p>\n<p>In the traditional way, we follow a restrict naming rule.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package reducer/counter</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    Increase <span class=\"token operator\">=</span> <span class=\"token string\">\"REDUCER_COUNTER_INCREASE\"</span>\n    Decrease <span class=\"token operator\">=</span> <span class=\"token string\">\"REDUCER_COUNTER_DECREASE\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// package reducer</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">Counter</span><span class=\"token punctuation\">(</span>state <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> action <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span>\n\n<span class=\"token comment\">// func main</span>\nstore <span class=\"token operator\">:=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span>Increase<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">StateOf</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">)</span></code></pre></div>\n<p>How to spread these actions is not important, the point is we manage them by handcraft! And handcraft cause unstable!</p>\n<p>That's why we need package Rematch.</p>\n<p>It creates a more native way to manage your reducer-action relationship.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package reducer/todo</span>\n<span class=\"token keyword\">var</span> Reducer <span class=\"token operator\">*</span>todoModel\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Reducer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>todoModel<span class=\"token punctuation\">{</span>\n        State<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Todo<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Todo <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    Title <span class=\"token builtin\">string</span>\n    Done <span class=\"token builtin\">bool</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Model <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>Todo\n\n<span class=\"token keyword\">type</span> todoModel <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    rematch<span class=\"token punctuation\">.</span>Reducer\n    State Model\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>todo <span class=\"token operator\">*</span>todoModel<span class=\"token punctuation\">)</span> <span class=\"token function\">AddTodo</span><span class=\"token punctuation\">(</span>state Model<span class=\"token punctuation\">,</span> title <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> Model <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> Todo<span class=\"token punctuation\">{</span>Title<span class=\"token punctuation\">:</span> title<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now when we using it, the relationship became pretty obviously</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// func main</span>\nstore <span class=\"token operator\">:=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>Reducer<span class=\"token punctuation\">)</span>\naddTodo <span class=\"token operator\">:=</span> todo<span class=\"token punctuation\">.</span>Reducer<span class=\"token punctuation\">.</span><span class=\"token function\">Action</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>Reducer<span class=\"token punctuation\">.</span>AddTodo<span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">.</span><span class=\"token function\">With</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"first todo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">Dispatch</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">.</span><span class=\"token function\">With</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"second todo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">StateOf</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span>Reducer<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It takes more code but also more restrictive than the manual way to create it.</p>\n<p>Now, let's take a look at what made these happened.</p>\n<p>First, we start from <code class=\"language-text\">store.New</code>(base on v2.1.1)</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package store</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">New</span><span class=\"token punctuation\">(</span>reducers <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Store <span class=\"token punctuation\">{</span>\n    newStore <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Store<span class=\"token punctuation\">{</span>\n        reducers<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uintptr</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        state<span class=\"token punctuation\">:</span>    <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">uintptr</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// later</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first difference is <code class=\"language-text\">Store.reducers</code> because, with <code class=\"language-text\">rematch</code>, reducer's address can't mapping to state, I will explain it later.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// func store.New</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> reducer <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> reducers <span class=\"token punctuation\">{</span>\n    r <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">checkReducer</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> newStore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You can't put duplicated reducer into the same store!\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    actualReducer<span class=\"token punctuation\">,</span> initState <span class=\"token operator\">:=</span> <span class=\"token function\">getReducerAndInitState</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n\n    newStore<span class=\"token punctuation\">.</span>reducers<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> actualReducer\n    newStore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> initState\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> newStore</code></pre></div>\n<p>We still checking reducer, let's view it</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// func checkReducer, adding part</span>\n<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span>Ptr <span class=\"token punctuation\">{</span>\n    v <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Indirect</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// dereference from ptr</span>\n    <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">FieldByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span>Invalid <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reducer structure must contains field[State]\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We add checking <code class=\"language-text\">Kind</code> is <code class=\"language-text\">Ptr</code>, because of <code class=\"language-text\">rematch.Reducer</code> sends a pointer of it into the store!</p>\n<p>If we can't find field <code class=\"language-text\">State</code>, we say the reducer is invalid and panic(this is a protocol really missing, but only the writer has to worry about, the user only need to know they have to create this field). So we can promise we don't have to check these at the following flow.</p>\n<p>Then we check the state already exist or not in the store. If the answer is yes, we panic it.</p>\n<p>Final, we have to get initial state and actual reducer, why it called <code class=\"language-text\">actual reducer</code>? Because we can't really execute a structure! The reducer will execute in progress is another thing. It created by package rematch. So let's dig into <code class=\"language-text\">getReducerAndInitState</code> this function to understanding how it works and why we have to change the type of <code class=\"language-text\">Store.reducers</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// func getReducerAndInitState</span>\n<span class=\"token keyword\">if</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Kind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> reflect<span class=\"token punctuation\">.</span>Ptr <span class=\"token punctuation\">{</span>\n    v <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Indirect</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// dereference from ptr</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">MethodByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InsideReducer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>\n        <span class=\"token function\">Call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">FieldByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"State\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We just use their zero value for initialize</span>\n        reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// In index 0 is state</span>\n        reflect<span class=\"token punctuation\">.</span><span class=\"token function\">Zero</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// In index 1 is action</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 0 at here is because checkReducer promise that we will only receive one return</span></code></pre></div>\n<p>The same, Kind is Ptr means it's <code class=\"language-text\">rematch.Reducer</code>.</p>\n<p>Remember <code class=\"language-text\">actualReducer, initState := getReducerAndInitState(r)</code> this line, we got <code class=\"language-text\">(reducer, state)</code> pair.</p>\n<p>Now, when we receive a <code class=\"language-text\">rematch.Reducer</code>, <code class=\"language-text\">reducer</code> produce by <code class=\"language-text\">InsideReducer</code>, where is it? We do not see it at any user's code, right? Because it's defined at package <code class=\"language-text\">rematch</code>, export it is because reflection can only take exported member!</p>\n<p>Else it's original reducer(a normal function apply reducer required), we won't talk about it again, you can refer to <a href=\"/blog/cs/design-of-redux-go-v2/\">design-of-redux-go-v2</a> to getting more information.</p>\n<p>Back to InsideReducer</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r Reducer<span class=\"token punctuation\">)</span> <span class=\"token function\">InsideReducer</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    r<span class=\"token punctuation\">.</span>ms <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>state <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> action <span class=\"token operator\">*</span>action<span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">.</span>ms<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span><span class=\"token function\">reducerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">{</span>\n                reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Interface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, it returns a normal reducer finally, then you can find it very depends on <code class=\"language-text\">r.methods</code>. What is that? Let's view its definition.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r Reducer<span class=\"token punctuation\">)</span> <span class=\"token function\">methods</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value <span class=\"token punctuation\">{</span>\n    rv <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    rt <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    methods <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">NumMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n        m <span class=\"token operator\">:=</span> rt<span class=\"token punctuation\">.</span><span class=\"token function\">Method</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token comment\">// rt.Method.Func return func with first argument as receiver</span>\n        mt <span class=\"token operator\">:=</span> m<span class=\"token punctuation\">.</span>Type\n        <span class=\"token keyword\">if</span> mt<span class=\"token punctuation\">.</span><span class=\"token function\">NumIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span>\n            mt<span class=\"token punctuation\">.</span><span class=\"token function\">NumOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span>\n            mt<span class=\"token punctuation\">.</span><span class=\"token function\">In</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> mt<span class=\"token punctuation\">.</span><span class=\"token function\">Out</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// rv.Method return func with now receiver</span>\n            methods<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rv<span class=\"token punctuation\">.</span><span class=\"token function\">Method</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> methods\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">methods</code> get user-defined rematcher(back to <code class=\"language-text\">InsideReducer</code> &#x26; <code class=\"language-text\">getReducerAndInitState</code>, you will find this passing flow), overviewing every method, if anything looks like an inside reducer, put it into method map.</p>\n<p>Now you could have several confused points.</p>\n<ol>\n<li>why using <code class=\"language-text\">m.Name</code>, not address</li>\n<li>why using <code class=\"language-text\">mt.In(1)</code>, not <code class=\"language-text\">mt.In(0)</code></li>\n<li>why <code class=\"language-text\">NumIn()</code> should be 3</li>\n</ol>\n<p>First question's answer is, instance to method &#x26; type to method has the different address! It's not hard to understand when you know that there has no <code class=\"language-text\">user-type</code> in final machine code. We will create a table(or other things, not important) to represent <code class=\"language-text\">user-type</code>. But we can get the same name(type info will store it).</p>\n<p>Second's answer and third's are same, reflection type of structure's method <code class=\"language-text\">Method</code> return an underlying function of method.</p>\n<p>For example, we have a type <code class=\"language-text\">K</code>, <code class=\"language-text\">K</code> has a method <code class=\"language-text\">foo()</code>, there has no <code class=\"language-text\">K.foo()</code> in this world, we have <code class=\"language-text\">foo(*K)</code> actually, and that's what <code class=\"language-text\">rt.Method(i)</code> gave you!</p>\n<p>Finally, let's take a look at <code class=\"language-text\">action</code>. The last puzzle of this crazy tutorial.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">type</span> action <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    funcName <span class=\"token builtin\">string</span>\n    with     <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is how it looks like. We store method's name &#x26; payload named as <code class=\"language-text\">with</code>.</p>\n<p>We used <code class=\"language-text\">Action</code> to create our action</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>r Reducer<span class=\"token punctuation\">)</span> <span class=\"token function\">Action</span><span class=\"token punctuation\">(</span>method <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>action <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>action<span class=\"token punctuation\">{</span>\n        funcName<span class=\"token punctuation\">:</span> <span class=\"token function\">getReducerName</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, we believing <code class=\"language-text\">getReducerName</code> work correctly first, and mention it later.</p>\n<p>As your expected, <code class=\"language-text\">With</code> just set up the payload.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span>action<span class=\"token punctuation\">)</span> <span class=\"token function\">With</span><span class=\"token punctuation\">(</span>payload <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>action <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">.</span>with <span class=\"token operator\">=</span> payload\n    <span class=\"token keyword\">return</span> a\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">reducerName</code> &#x26; <code class=\"language-text\">payload</code> used in <code class=\"language-text\">InsideReducer</code>, them don't need to explain, just return the thing that action kept.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a action<span class=\"token punctuation\">)</span> <span class=\"token function\">reducerName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>funcName\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>a action<span class=\"token punctuation\">)</span> <span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>with\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">getReducerName</code> is the fuzziest thing, but just like we had mentioned, a method is a function that first parameter is its receiver!</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// package rematch</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">getReducerName</span><span class=\"token punctuation\">(</span>r <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    fullName <span class=\"token operator\">:=</span> runtime<span class=\"token punctuation\">.</span><span class=\"token function\">FuncForPC</span><span class=\"token punctuation\">(</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Pointer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// fullName's format is `package.function_name`</span>\n    <span class=\"token comment\">// we don't want package part.</span>\n    <span class=\"token comment\">// package is full path(GOPATH/src/package_part) to it</span>\n    <span class=\"token comment\">// len-3 is because a method contains suffix `-fm`</span>\n    <span class=\"token keyword\">return</span> fullName<span class=\"token punctuation\">[</span>strings<span class=\"token punctuation\">.</span><span class=\"token function\">LastIndexByte</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">,</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>fullName<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But why is <code class=\"language-text\">len(fullName)-3</code>? The reason is that you can have <code class=\"language-text\">Foo</code> &#x26; <code class=\"language-text\">Foo(*K)</code> at the same time! The solution Go pick is suffixed all method by <code class=\"language-text\">-fm</code>!</p>\n<p>Now you know why we cut it. Because of the type of method.Name does not have this suffix, we want to map them, so we have to follow their rules.</p>\n<p>With these change, now we can work with a native relationship between reducer &#x26; action! And a nice sleep I guess?</p>","frontmatter":{"title":"Magic in redux-go v2.1: package rematch","categories":["cs"],"tags":["golang","redux"]}}},"pageContext":{"slug":"/blog/2018/07/cs/magic-in-redux-go-2.1/"}}}