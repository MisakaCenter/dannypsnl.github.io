{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/07/cs/reflection-in-go-create-a-stack-t/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Do you know what can Go's package <code class=\"language-text\">reflect</code> do?</p>\n<p>Whatever you had use it or not. Understanding it is not a bad thing.</p>\n<p>A well known thing is Go don't have generic, I'm not going to tell you we have generic, I'm going to tell you some basic trick to have the result like generic.</p>\n<p>Real world example: <a href=\"https://github.com/elz-lang/elz-go-backup/tree/master/collection/stack/stack.go\">elz-lang/collection/stack</a></p>\n<p>Elz is a language I'm developing, but that's not the point. Point is this collection/stack using the trick I'm going to talk about.</p>\n<p>Take a look on the type <code class=\"language-text\">Stack</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Stack <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tstack  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\tlimitT <span class=\"token operator\">*</span>reflect<span class=\"token punctuation\">.</span>Type\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">limitT</code> is a <code class=\"language-text\">*reflect.Type</code>, the reason that it's a pointer to <code class=\"language-text\">reflect.Type</code> rather than <code class=\"language-text\">reflect.Type</code> is because of we may do not spec it.</p>\n<p>We add the <code class=\"language-text\">Stack&lt;T&gt;</code> by invoke <code class=\"language-text\">WithT</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">WithT</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Stack <span class=\"token punctuation\">{</span>\n\tt <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Elem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span>limitT <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>t\n\t<span class=\"token keyword\">return</span> s\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Why is <code class=\"language-text\">reflect.TypeOf(v).Elem()</code>? Because we can't really get an instance that type is an interface! Instead of that, we can get a type is pointer to an interface!</p>\n<p>We have a common idiom is using <code class=\"language-text\">(*SomeInterface)(nil)</code> to get pointer to interface instance.</p>\n<p>Now we know that user code can be</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> AST <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Gen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> llvm<span class=\"token punctuation\">.</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// main</span>\ns <span class=\"token operator\">:=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">WithT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>AST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>After we do that, user can't push a value do not implement <code class=\"language-text\">AST</code>.</p>\n<p>So, how we do that? We do a check at <code class=\"language-text\">Push</code></p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">*</span>Stack<span class=\"token punctuation\">)</span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>element <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>limitT <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Implements</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>s<span class=\"token punctuation\">.</span>limitT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"element must implement type: %s\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">.</span>limitT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\ts<span class=\"token punctuation\">.</span>stack <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If <code class=\"language-text\">limitT</code> is not <code class=\"language-text\">nil</code>, means we do not limit the type, just keep going on.</p>\n<p>But if we limit the type, we check that <code class=\"language-text\">element</code> implements <code class=\"language-text\">limitT</code> or not.</p>\n<p>If not, we panic the process.</p>\n<p>Now we have a stack can promise type safe at runtime.</p>","frontmatter":{"title":"Reflection in Go: create a stack[T]","categories":["cs"],"tags":["golang","reflection"]}}},"pageContext":{"slug":"/blog/2018/07/cs/reflection-in-go-create-a-stack-t/"}}}