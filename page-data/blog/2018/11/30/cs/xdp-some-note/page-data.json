{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/11/30/cs/xdp-some-note/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>What is XDP? XDP is eXpress Data Path, it's a technology about putting a BPF code virtual machine on the NIC(network interface controller) driver before kernel network stack so that we can filter the packet before kernel, it would make processing speed greater.</p>\n<p>We can do following things on the packet:</p>\n<ul>\n<li><code class=\"language-text\">XDP_PASS</code>: allow the packet to pass through</li>\n<li><code class=\"language-text\">XDP_DROP</code>: drop the packet</li>\n<li><code class=\"language-text\">XDP_TX</code>: bounce the packet back on the same interface</li>\n<li><code class=\"language-text\">XDP_REDIRECT</code>: redirects the packet to another interface</li>\n</ul>\n<p>Here is an example of counting how many IPv4/6 packets be dropped.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"os/signal\"</span>\n\n\tbpf <span class=\"token string\">\"github.com/iovisor/gobpf/bcc\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// bcc is from iovisor/bcc this project</span>\n<span class=\"token comment\">/*\n#cgo CFLAGS: -I/usr/include/bcc/compat\n#cgo LDFLAGS: -lbcc\n#include &lt;bcc/bpf_common.h>\n#include &lt;bcc/libbpf.h>\nvoid perf_reader_free(void *ptr);\n*/</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"C\"</span>\n\n<span class=\"token keyword\">const</span> source <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">`\n#define KBUILD_MODNAME \"foo\"\n#include &lt;uapi/linux/bpf.h>\n#include &lt;linux/in.h>\n#include &lt;linux/if_ether.h>\n#include &lt;linux/if_packet.h>\n#include &lt;linux/if_vlan.h>\n#include &lt;linux/ip.h>\n#include &lt;linux/ipv6.h>\nBPF_TABLE(\"array\", int, long, dropcnt, 256);\nstatic inline int parse_ipv4(void *data, u64 nh_off, void *data_end) {\n    struct iphdr *iph = data + nh_off;\n    if ((void*)&amp;iph[1] > data_end)\n        return 0;\n    return iph->protocol;\n}\nstatic inline int parse_ipv6(void *data, u64 nh_off, void *data_end) {\n    struct ipv6hdr *ip6h = data + nh_off;\n    if ((void*)&amp;ip6h[1] > data_end)\n        return 0;\n    return ip6h->nexthdr;\n}\nint xdp_prog1(struct xdp_md *ctx) {\n    void* data_end = (void*)(long)ctx->data_end;\n    void* data = (void*)(long)ctx->data;\n    struct ethhdr *eth = data;\n\n    uint64_t nh_off = sizeof(*eth);\n    if (data + nh_off  > data_end)\n        return XDP_DROP;\n    uint16_t h_proto = eth->h_proto;\n    if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {\n        struct vlan_hdr *vhdr;\n        vhdr = data + nh_off;\n        nh_off += sizeof(struct vlan_hdr);\n        if (data + nh_off > data_end)\n            return XDP_DROP;\n            h_proto = vhdr->h_vlan_encapsulated_proto;\n    }\n    if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {\n        struct vlan_hdr *vhdr;\n        vhdr = data + nh_off;\n        nh_off += sizeof(struct vlan_hdr);\n        if (data + nh_off > data_end)\n            return XDP_DROP;\n            h_proto = vhdr->h_vlan_encapsulated_proto;\n    }\n    int index;\n    if (h_proto == htons(ETH_P_IP))\n        index = parse_ipv4(data, nh_off, data_end);\n    else if (h_proto == htons(ETH_P_IPV6))\n        index = parse_ipv6(data, nh_off, data_end);\n    else\n        index = 0;\n    long *value;\n    value = dropcnt.lookup(&amp;index);\n    if (value) lock_xadd(value, 1);\n    return XDP_DROP;\n}\n`</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage: %v &lt;ifdev>\\n\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"e.g.: %v eth0\\n\"</span><span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">usage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tmodule <span class=\"token operator\">:=</span> bpf<span class=\"token punctuation\">.</span><span class=\"token function\">NewModule</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">\"-w\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tfn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xdp_prog1\"</span><span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">.</span>BPF_PROG_TYPE_XDP<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">65536</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to load xdp prog: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tdevice <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span>Args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">AttachXDP</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to attach xdp prog: %v\\n\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\tos<span class=\"token punctuation\">.</span><span class=\"token function\">Exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveXDP</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Fprintf</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Failed to remove XDP from %s: %v\\n\"</span><span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dropping packets, hit CTRL+C to stop\"</span><span class=\"token punctuation\">)</span>\n\tsig <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> os<span class=\"token punctuation\">.</span>Signal<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tsignal<span class=\"token punctuation\">.</span><span class=\"token function\">Notify</span><span class=\"token punctuation\">(</span>sig<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Interrupt<span class=\"token punctuation\">,</span> os<span class=\"token punctuation\">.</span>Kill<span class=\"token punctuation\">)</span>\n\n\tdropcnt <span class=\"token operator\">:=</span> bpf<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span><span class=\"token function\">TableId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dropcnt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token operator\">&lt;-</span>sig\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n{IP protocol-number}: {total dropped pkts}\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">for</span> it <span class=\"token operator\">:=</span> dropcnt<span class=\"token punctuation\">.</span><span class=\"token function\">Iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n\t\tkey <span class=\"token operator\">:=</span> bpf<span class=\"token punctuation\">.</span><span class=\"token function\">GetHostByteOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Uint32</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">Key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\tvalue <span class=\"token operator\">:=</span> bpf<span class=\"token punctuation\">.</span><span class=\"token function\">GetHostByteOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Uint64</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">Leaf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword\">if</span> value <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">{</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v: %v pkts\\n\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"XDP some note","categories":["cs"],"tags":["networking","xdp"]}}},"pageContext":{"slug":"/blog/2018/11/30/cs/xdp-some-note/"}}}