{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/08/cs/gRPC-basic-tutorial/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>What is RPC? RPC means \"remote procedure call\". The concept is call remote function as local function.</p>\n<p>Then gRPC? It is a framework that help you create RPC.</p>\n<p>Traditional RPC has some problem make it hard to use. For example, how do you know, what type of message you get?</p>\n<p>Usually, we use JSON or others format. But marshal &#x26; unmarshal quickly became a big issue.\nBecause as time goes on, we don't actually know which service use which field, thus we can't reduce anything.</p>\n<p>And server &#x26; client will get more further more far for same reason.</p>\n<p>These all, won't be an issue in gRPC.</p>\n<p>In gRPC, you define a <code class=\"language-text\">*.proto</code> file for your service.</p>\n<p>At here, we will create one named <code class=\"language-text\">UserService</code></p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">syntax</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">package</span> user<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">service</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n  rpc GetUser <span class=\"token punctuation\">(</span>Empty<span class=\"token punctuation\">)</span> returns <span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// define message type</span>\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">Empty</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">int32</span> age <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To generate code, I usually use <code class=\"language-text\">go generate ./...</code></p>\n<p>So let's have a file <code class=\"language-text\">gen.go</code>, just leave a comment about what command you want to execute.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//go:generate sh -c \"protoc -I./user --go_out=plugins=grpc:./user ./user/*.proto\"</span></code></pre></div>\n<p>Implement service:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token string\">\"path/to/grpc_generated/user\"</span>\n\n<span class=\"token keyword\">type</span> UserService <span class=\"token keyword\">struct</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>us <span class=\"token operator\">*</span>UserService<span class=\"token punctuation\">)</span> <span class=\"token function\">GetUser</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> u <span class=\"token operator\">*</span>user<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>user<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">{</span>\n        Name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Danny\"</span><span class=\"token punctuation\">,</span>\n\t\tAge<span class=\"token punctuation\">:</span>  <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Create server:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"net\"</span>\n\t<span class=\"token string\">\"path/to/grpc_generated/user\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tl<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":50051\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// handle err</span>\n\tserver <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\tservice <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">UserServiceServer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>UserService<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\tuser<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterUserServiceServer</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span>\n\n\terr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">Serve</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// handle err</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Final is our client:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"net\"</span>\n\t<span class=\"token string\">\"path/to/grpc_generated/user\"</span>\n\t<span class=\"token string\">\"google.golang.org/grpc\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:50051\"</span><span class=\"token punctuation\">,</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithInsercure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// handle err</span>\n\t<span class=\"token keyword\">defer</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tclient <span class=\"token operator\">:=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserServiceClient</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\n\tu<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetUser</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">Background</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>user<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// handle err</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name: %s, Age: %d\"</span><span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">.</span>Age<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After that, run <code class=\"language-text\">go generate ./...</code> from project root dir.</p>\n<p>Then <code class=\"language-text\">go run server.go</code>, open another terminal, <code class=\"language-text\">go run client.go</code></p>\n<p>I usually won't commit generated code(unless commit it is make sense), so I usually will write <code class=\"language-text\">*.pb.go</code> in file <code class=\"language-text\">.gitignore</code></p>\n<p>More info:</p>\n<ul>\n<li><a href=\"https://grpc.io/\">grpc.io</a></li>\n</ul>","frontmatter":{"title":"gRPC quick start in Go","categories":["cs"],"tags":["networking","gRPC","golang"]}}},"pageContext":{"slug":"/blog/2018/08/cs/gRPC-basic-tutorial/"}}}