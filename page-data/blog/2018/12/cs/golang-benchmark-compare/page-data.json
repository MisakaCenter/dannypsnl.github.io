{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/12/cs/golang-benchmark-compare/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Although the article is for Go, but you still can use concept part for others language.</p>\n<p>Frist we create a script called <code class=\"language-text\">bench_compare.sh</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">${TRAVIS_PULL_REQUEST_BRANCH<span class=\"token operator\">:-</span>$TRAVIS_BRANCH}</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"master\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n\t<span class=\"token assign-left variable\">REMOTE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">git</span> config --get remote.origin.url<span class=\"token variable\">)</span></span>\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">${TRAVIS_BUILD_DIR}</span>/<span class=\"token punctuation\">..</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token function\">git</span> clone <span class=\"token variable\">${REMOTE_URL}</span> <span class=\"token string\">\"<span class=\"token variable\">${TRAVIS_REPO_SLUG}</span>-bench\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token builtin class-name\">cd</span> <span class=\"token string\">\"<span class=\"token variable\">${TRAVIS_REPO_SLUG}</span>-bench\"</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token function\">git</span> checkout master <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\tgo <span class=\"token builtin class-name\">test</span> -bench <span class=\"token builtin class-name\">.</span> ./<span class=\"token punctuation\">..</span>. <span class=\"token operator\">></span> master_bench.out <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\t<span class=\"token function\">git</span> checkout <span class=\"token variable\">${TRAVIS_COMMIT}</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\tgo <span class=\"token builtin class-name\">test</span> -bench <span class=\"token builtin class-name\">.</span> ./<span class=\"token punctuation\">..</span>. <span class=\"token operator\">></span> current_bench.out <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\tgo get golang.org/x/tools/cmd/benchcmp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n\tbenchcmp master_bench.out current_bench.out<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p>Then I usually would execute it at <code class=\"language-text\">after_success</code> this section,\n<code class=\"language-text\">.travis.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">script:\n  # testing part\nafter_success:\n  # ignore\n  - bash ./bench_compare.sh</code></pre></div>\n<p>p.s. write <code class=\"language-text\">script</code> part is just want to tell you it's located at that indention</p>\n<p>Now let me explain the script, basically we peek <code class=\"language-text\">${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}</code> is not <code class=\"language-text\">master</code> first.\nTo make sure we are not at <code class=\"language-text\">master</code> branch, if we are not at <code class=\"language-text\">master</code>, then we start to compare the benchmark result.\nHere has a point, <code class=\"language-text\">$(git config --get remote.origin.url)</code> is required, you can write <code class=\"language-text\">git checkout master</code> to know why.\nThen we checkout <code class=\"language-text\">master</code> and <code class=\"language-text\">${TRAVIS_COMMIT}</code>(I think this variable already tell you what is it), do benchmarking and store them.\nFinal step we download <code class=\"language-text\">golang.org/x/tools/cmd/benchcmp</code> for comparing, and compare two result file.</p>\n<p>To get more info, you can reference:</p>\n<ul>\n<li><a href=\"https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\">travis default variables</a></li>\n<li><a href=\"godoc.org/golang.org/x/tools/cmd/benchcmp\">godoc.org/golang.org/x/tools/cmd/benchcmp</a></li>\n</ul>\n<p>Thanks for reading</p>","frontmatter":{"title":"How to compare Go benchmark in TravisCI","categories":["cs"],"tags":["golang","testing","travis"]}}},"pageContext":{"slug":"/blog/2018/12/cs/golang-benchmark-compare/"}}}