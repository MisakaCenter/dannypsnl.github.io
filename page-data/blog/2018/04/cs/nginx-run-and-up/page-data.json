{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/04/cs/nginx-run-and-up/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>這篇只是隨便紀錄一下好不容易終於弄懂的 Nginx ，首先各個平台安裝方式應該直接上網查詢</p>\n<p><a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/install/\">官網下載頁</a></p>\n<p>最基本的啟動方式通常是 <code class=\"language-text\">/usr/bin/nginx</code> ，不過各平台可能有差異，應以實際位置為主</p>\n<h2>指令</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nginx -s stop <span class=\"token comment\"># shut down nginx</span>\n$ nginx -s reload <span class=\"token comment\"># reload configure, if you edit the configure &amp; want to use it, this is what you want</span></code></pre></div>\n<h2>設定流程</h2>\n<p>把設定檔放在 <code class=\"language-text\">sites-available/</code> 下，請根據系統到 Nginx 的設定檔目錄中尋找這個目錄</p>\n<blockquote>\n<p>p.s. 舉例來說，我在 gcloud 上的 Ubuntu 主機中 Nginx 設定檔目錄在 <code class=\"language-text\">/etc/nginx</code></p>\n</blockquote>\n<p>寫好設定檔之後再到 <code class=\"language-text\">sites-enabled</code> 目錄中，建立 link 指向 <code class=\"language-text\">site-available</code> 中的設定檔</p>\n<p>最後 reload 套用新的設定</p>\n<h2>設定檔內容</h2>\n<p>這邊我也沒有深入研究，需要什麼再想是我的習慣，而且軟體總是有新的變動，所以這裡我只介紹基本的東西，\n更進階的 Nginx 用法應該直接看官方文件</p>\n<p>接著看一段簡單的設定檔</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">upstream</span> service_stream <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">server</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>service_stream<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">upstream</code> 抽象了服務跟實際的伺服器的連結，這裡可以看到用一段 ip 取代直接建立一個監聽 80 port 的伺服器，\n這讓網路服務模型更具有擴展性，而軟體最應該關注的就是擴展能力</p>\n<p><code class=\"language-text\">upstream</code> 不處理網路服務，而是設定處理網路服務的服務器(<code class=\"language-text\">server</code>)，所以稱之為上游</p>\n<p><code class=\"language-text\">server</code> 去聆聽真實的網路請求，然後把資訊轉給 <code class=\"language-text\">upstream</code> ，這裡是代理服務，所以用 <code class=\"language-text\">proxy_pass</code></p>\n<p><code class=\"language-text\">listen</code> 決定了聆聽哪些 port ，<code class=\"language-text\">location</code> 決定把哪些路由導向哪個服務</p>\n<p>End</p>","frontmatter":{"title":"Nginx 安裝與啟動","categories":["cs"],"tags":["nginx","web"]}}},"pageContext":{"slug":"/blog/2018/04/cs/nginx-run-and-up/"}}}