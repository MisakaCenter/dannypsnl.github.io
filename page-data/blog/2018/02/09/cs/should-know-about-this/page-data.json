{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/02/09/cs/should-know-about-this/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p><code class=\"language-text\">this</code> scope rule is one of hardest problem in JS. Let's start it.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token operator\">:</span> <span class=\"token string\">\"This is obj\"</span><span class=\"token punctuation\">,</span>\n  print\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Output: This is obj</span>\n<span class=\"token comment\">// It's good. But if we send print to other place?</span>\n\n<span class=\"token keyword\">let</span> printClone <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Which `this` at here? You have to see `this` of this place then you will know</span>\n<span class=\"token comment\">// Ok, let me tell you true, you don't know where does the function be send, so you also can't know which this at there.</span>\n<span class=\"token comment\">// The behavior is totally can not be prediction.</span></code></pre></div>\n<p>Ok! Now we know the true: <code class=\"language-text\">this</code> is dynamic. But! We still need to send us function to other place, right? We have to understanding print get the this at <code class=\"language-text\">obj.print()</code> this expression, not at <code class=\"language-text\">let obj = { ... }</code> part. Why this is important? Because a lots of novice of JS will write something like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ignore, we are in obj definition</span>\nprint<span class=\"token operator\">:</span> <span class=\"token function\">print</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// ignore</span></code></pre></div>\n<p><code class=\"language-text\">bind</code> is the next thing we will discuss, the point is the this of <code class=\"language-text\">= { ... }</code>, whatever is type in, there is only <code class=\"language-text\">{}</code>,\na null object at there! So you will get a null object out of your expected. What does bind do? Let me show it for you.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> printClone <span class=\"token operator\">=</span> <span class=\"token function\">print</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Or obj.print, understanding a truth: function has no relation with any object before we bind(and some other operation) it.</span>\n<span class=\"token function\">printClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// `this` at here is `obj`</span>\n<span class=\"token comment\">// Output: This is obj</span></code></pre></div>\n<p><code class=\"language-text\">bind</code> return a new function, combine by a function with a object, use object to be new function's <code class=\"language-text\">this</code>.</p>\n<p>But we of course want to define function with it's user. How to do that?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">NewCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Tasla\"</span><span class=\"token punctuation\">,</span>\n    price<span class=\"token operator\">:</span> <span class=\"token number\">100000</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token function\">NewCar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Output: { name: \"Tasla\", price: 100000 }</span>\n<span class=\"token keyword\">let</span> printClone <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">;</span>\n<span class=\"token function\">printClone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Output: { name: \"Tasla\", price: 100000 }</span></code></pre></div>\n<p>Very interesting, right? Because we use closure at here. We reference the <code class=\"language-text\">self</code> in <code class=\"language-text\">NewCar</code>.\nThe most important part came, every time you call <code class=\"language-text\">NewCar</code> for a new object. The <code class=\"language-text\">self</code> is different.\nThis is the one of the greatest trick in ES3/5, seems this rule is so complex, why don't use closure to avoid it.\nIn ES3/5, this trick is good enough.</p>\n<p>In ES6, we have <code class=\"language-text\">class</code>, but what does it real mean?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tasla\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dump</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> clone <span class=\"token operator\">=</span> car<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">;</span>\n<span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Of course, error</span></code></pre></div>\n<p><code class=\"language-text\">Car</code> call constructor in ES5, because we can use <code class=\"language-text\">new</code> ask JS <code class=\"language-text\">this</code> reference to the object we create.<br>\nBut as you see, the function inside still have dynamic <code class=\"language-text\">this</code>.<br>\nDon't worry about that, because what I want to say is keyword <code class=\"language-text\">class</code> work as same as constructor!<br>\nHow we fix it in ES5?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... ignore</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dump</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which trick we use at here? First, if we use keyword <code class=\"language-text\">new</code>, <code class=\"language-text\">this</code> is the object we created.<br>\nSo we <code class=\"language-text\">bind</code> target really is that one we expected &#x26; wanted!<br>\nBut this way had some problem, the most important part is hiding ability.<br>\nIn previous solution, we can hide the attributes of <code class=\"language-text\">object</code> in <code class=\"language-text\">closure</code>.<br>\nAnd that is the ability we lose at constructor &#x26; <code class=\"language-text\">class</code>.<br></p>\n<p>How to implement the pattern by <code class=\"language-text\">class</code>?<br>\nWe have to understand what is <code class=\"language-text\">class</code> first.<br></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tasla\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dump <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dump</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These code as same as previous solution. So now we know, <code class=\"language-text\">class</code> is just a syntax sugar.<br>\n<code class=\"language-text\">class</code> also can not binding correct <code class=\"language-text\">this</code> for you. You must write done <code class=\"language-text\">bind</code> at constructor.<br>\nThat is too ridicules, if some one forgive to bind the function(point! I still call it function,\nJS class still not behavior as method as other language), the program will fall into dark.<br>\nSo, how to avoid the problem, the answer is arrow function, arrow function still is a function.<br>\nBut traditional function have a this by execute environment or <code class=\"language-text\">bind</code> one.<br>\nThen arrow function have a this at it's declared place!<br>\nAnd we go back to <code class=\"language-text\">class</code>, <code class=\"language-text\">class</code> provide <code class=\"language-text\">this</code> at body part!<br></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Xxx</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// this at here is instance of Xxx!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So we can write these:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constuctor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tasla\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function-variable function\">dump</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As your expected, dump always <code class=\"language-text\">bind</code> with instance of Car.<br>\n!!! <code class=\"language-text\">dump = ...</code> in a class definition is esNext(stage3) standard, you can always use babel plugin <code class=\"language-text\">babel-preset-stage-0</code> to follow latest standard.</p>\n<h3>References:</h3>\n<h4><a href=\"https://github.com/getify/You-Dont-Know-JS\">You don't know JS</a></h4>\n<ul>\n<li>Author: Kyle Simpson</li>\n<li>ISBN: 978-986-476-049-7</li>\n</ul>","frontmatter":{"title":"You should know about `this`","categories":["cs"],"tags":["javascript"]}}},"pageContext":{"slug":"/blog/2018/02/09/cs/should-know-about-this/"}}}