{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/05/01/cs/ruby-conf-2018-thinking/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Hi everyone, I am Danny.</p>\n<p>Although title contains Ruby, but I won't talk too much on it. Because I did not learn it.</p>\n<p>This conf is my first conf. I learn something at here and I will write down in following text.</p>\n<p>First impress talk is using Elixir &#x26; Kafka write a server can handle 200 millions user communication on it.</p>\n<p>Speaker is a Japanese, so I can't understand his English a lot. But his paper show how does he compare different machine &#x26; different tech stack, so that's fine.</p>\n<p>Second is about chosing style! Speaker show some web library/framework in Ruby/Elixir/Erlang and compare the style between them. He says: Style is about chosing.</p>\n<p>Then a speaker talk how RDoc work, it's useful for me because I am implementing a programming language and hope it can become a language can using in real development.</p>\n<p>p.s. RDoc is Ruby doc generator.</p>\n<p>Then MJIT is the next thing I am impressed. It's about JIT implementation in Ruby.</p>\n<p>Final is Jose(Elixir writer. e is not that one, but I don't know how to type it from my labtop, so sorry for him)'s talk.</p>\n<p>Of course he introducing Elixir for us. But not syntax level, but about design issue: Why we need immutable? Why is actor(Erlang concurrency model)?</p>\n<p>Then he show a new way testing. Test the concept.</p>\n<p>We know test.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> ExampleTest <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> ExUnit<span class=\"token punctuation\">.</span>Case\n  doctest Example\n\n  test <span class=\"token string\">\"one plus one is two\"</span> <span class=\"token keyword\">do</span>\n    assert <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>But can we really test anything? How many tests we need?</p>\n<p>Take a look</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> StringContainsTest <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> ExUnit<span class=\"token punctuation\">.</span>Case\n\n  test <span class=\"token string\">\"abc contains ab\"</span> <span class=\"token keyword\">do</span>\n    assert String<span class=\"token punctuation\">.</span>contains? <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bc\"</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>What about (\"erhonbkd\", \"\")? (\"\", \"\")?</p>\n<p>If we test?</p>\n<div class=\"gatsby-highlight\" data-language=\"elixir\"><pre class=\"language-elixir\"><code class=\"language-elixir\"><span class=\"token keyword\">defmodule</span> StringContainsTest <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">use</span> ExUnit<span class=\"token punctuation\">.</span>Case\n\n  <span class=\"token attribute variable\">@spec</span> a <span class=\"token operator\">::</span> string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token attribute variable\">@spec</span> b <span class=\"token operator\">::</span> string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  test <span class=\"token string\">\"a &lt;> b should contain a &amp; b\"</span> <span class=\"token keyword\">do</span>\n    s <span class=\"token operator\">=</span> a <span class=\"token operator\">&lt;></span> b\n    assert String<span class=\"token punctuation\">.</span>contains? s<span class=\"token punctuation\">,</span> a\n    assert String<span class=\"token punctuation\">.</span>contains? s<span class=\"token punctuation\">,</span> b\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Then just let compiler generating all the edge case you hard to cover.</p>\n<p>This the end.</p>\n<p>And let me talk something, from Jose's speech, I think more.</p>\n<p>If we can using the user's input, testing more thing?</p>\n<p>For example, each time user have using <code class=\"language-text\">String.contains?</code>.</p>\n<p>We use all string them used to generate test for <code class=\"language-text\">String.contains?</code></p>\n<p>If it broke. User can find the bug for us!!!</p>\n<p>See you next time.</p>","frontmatter":{"title":"Some thinking from Elixir X Ruby Conf","categories":["cs"],"tags":["elixir"]}}},"pageContext":{"slug":"/blog/2018/05/01/cs/ruby-conf-2018-thinking/"}}}