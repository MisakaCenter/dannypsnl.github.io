{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/05/26/cs/start-with-rust/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Rust is a strange language.</p>\n<p>Let's start!</p>\n<h2>Moving</h2>\n<p>First point is move semantic.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> u <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What do you expect? <code class=\"language-text\">t</code> &#x26; <code class=\"language-text\">u</code> is <code class=\"language-text\">s</code>? No!</p>\n<p><code class=\"language-text\">rustc</code> says:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">error[E0382]: use of moved value: `s`\n --&gt; main.rs:4:9\n  |\n3 |     let t = s;\n  |         - value moved here\n4 |     let u = s;\n  |         ^ value used here after move\n  |\n  = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait</code></pre></div>\n<p>These error tell you why you got a fail.</p>\n<p>In Rust, you should expect default behavior of assign is moving!</p>\n<h3>Copy</h3>\n<p>And you can expect if any type implement the <code class=\"language-text\">Copy</code> trait, will be copied.</p>\n<p>That's why these code will work:</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> u <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Implement the <code class=\"language-text\">Copy</code> trait can use <code class=\"language-text\">derive</code> notation in Rust.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Clone, Copy)]</span>\n<span class=\"token keyword\">struct</span> Foo <span class=\"token punctuation\">{</span>\n    number<span class=\"token punctuation\">:</span> i32\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that <code class=\"language-text\">Clone</code> is required.</p>\n<p>But a type implement <code class=\"language-text\">Copy</code> can't have a field do not implement <code class=\"language-text\">Copy</code>!!!</p>\n<p>So following code will fail.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Clone, Copy)]</span>\n<span class=\"token keyword\">struct</span> Foo <span class=\"token punctuation\">{</span>\n    label<span class=\"token punctuation\">:</span> String\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">error[E0204]: the trait `Copy` may not be implemented for this type\n --&gt; main.rs:1:17\n  |\n1 | #[derive(Clone, Copy)]\n  |                 ^^^^\n2 | struct Foo {\n3 |     number: String,\n  |     -------------- this field does not implement `Copy`</code></pre></div>\n<h2>Mutable</h2>\n<p>In Rust, mutable and immutable is very different.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"one \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">push_str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"two \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Error report:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">error[E0596]: cannot borrow immutable local variable `s` as mutable\n --&gt; main.rs:3:5\n  |\n2 |     let s = &quot;one &quot;.to_string();\n  |         - consider changing this to `mut s`\n3 |     s.push_str(&quot;two &quot;);\n  |     ^ cannot borrow mutably</code></pre></div>\n<p>Because <code class=\"language-text\">String::push_str</code> borrow <code class=\"language-text\">&amp;mut self</code>, it can't be used by an immutable <code class=\"language-text\">String</code>.</p>\n<h2>Reference</h2>\n<p>We already seen <code class=\"language-text\">String</code>, it's called <strong>owning pointer</strong>, others are <code class=\"language-text\">Vec</code>, <code class=\"language-text\">Box</code>, etc.</p>\n<p>But these pointer will move data. Sometime, we don't need to moving data, but also don't want to copy it.</p>\n<p>It's reference showtime!</p>\n<p>Rust's reference has some points.</p>\n<ol>\n<li>explicitly using thing it point to</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"2\">\n<li>mutable reference to mutable ownership</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> num <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> num<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span>r <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">assert!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r <span class=\"token operator\">==</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol start=\"3\">\n<li>references are never null</li>\n<li>you can't borrow a value will outlive when you still alive</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    r <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">error[E0597]: `x` does not live long enough\n --&gt; main.rs:5:14\n  |\n5 |         r = &amp;x;\n  |              ^ borrowed value does not live long enough\n6 |     }\n  |     - `x` dropped here while still borrowed\n7 | }\n  | - borrowed value needs to live until here</code></pre></div>\n<p>The problem is <code class=\"language-text\">r</code> can be access after <code class=\"language-text\">x</code> already be dropped!\nThat mean a dangling pointer. Rust disallowed it.</p>\n<h2>Conclusion</h2>\n<p>I think these are the most hard part when you're beginner of Rust.</p>\n<p>Because Rust chooses a new way to handle it's memory, move default, checking live-time, sharing data by reference.</p>\n<p>Understanding these things is most important to get familiar with Rust.</p>\n<p>Hope you like it &#x26; can get some help from this.</p>\n<h3>References:</h3>\n<h4><a href=\"http://shop.oreilly.com/product/0636920040385.do\">Programming Rust</a></h4>\n<ul>\n<li>Author: Jim Blandy &#x26; Jason Orendorff</li>\n<li>ISBN: 978-1-491-92728-1</li>\n</ul>","frontmatter":{"title":"How to getting start with Rust","categories":["cs"],"tags":["rust"]}}},"pageContext":{"slug":"/blog/2018/05/26/cs/start-with-rust/"}}}