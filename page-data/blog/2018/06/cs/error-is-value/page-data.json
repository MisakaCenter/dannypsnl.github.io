{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018/06/cs/error-is-value/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>I think most of Gopher had read <a href=\"https://blog.golang.org/error-handling-and-go\">error-handling-and-go</a></p>\n<p>Has anyone had watched <a href=\"https://www.youtube.com/watch?v=1B71SL6Y0kA\">Go Lift</a>?</p>\n<p>Let's getting start from <strong>Go Lift</strong>!</p>\n<p>The point of <strong>Go Lift</strong> is: Error is Value.</p>\n<p>Of course, we know this fact. But do you really understand what that means?</p>\n<p>In <strong>Go Lift</strong>, <strong>John Cinnamond</strong> mentions a trick about wrapping the error by command executor.</p>\n<p>For example, we create a connection to <code class=\"language-text\">server:6666</code> by TCP.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">conn <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"server:6666\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Can we? Ah..., No!</p>\n<p>Correct code is</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"server:6666\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we writing something to the connection.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">nBtye <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">`command`</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We want that, but the real code is</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">nBtye<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">`command`</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// using nByte</span></code></pre></div>\n<p>Next, we read something from <code class=\"language-text\">server:6666</code>, so we create a reader.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">reader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">:=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>No! We have to handle the error.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// using response</span></code></pre></div>\n<p>But the thing hasn't ended yet if we have to rewrite the command if response tells us the command fail?</p>\n<p>If we are working for a server, we can't just panic?</p>\n<p>So <strong>Go Lift</strong> has a solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">newSafeConn</span><span class=\"token punctuation\">(</span>network<span class=\"token punctuation\">,</span> host <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>safeConn <span class=\"token punctuation\">{</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Dail</span><span class=\"token punctuation\">(</span>network<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>safeConn<span class=\"token punctuation\">{</span>\n        err<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">,</span>\n        conn<span class=\"token punctuation\">:</span> conn<span class=\"token punctuation\">,</span> <span class=\"token comment\">// It's fine even conn is nil</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> safeConn <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    err <span class=\"token builtin\">error</span>\n\n    conn net<span class=\"token punctuation\">.</span>Conn\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>conn <span class=\"token operator\">*</span>safeConn<span class=\"token punctuation\">)</span> <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>bs <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> conn<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if contains error, do nothing</span>\n        <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span>bs<span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err <span class=\"token comment\">// update error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>conn <span class=\"token operator\">*</span>safeConn<span class=\"token punctuation\">)</span> <span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span>delim <span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> conn<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token punctuation\">}</span>\n    reader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>conn<span class=\"token punctuation\">)</span>\n    response<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n    conn<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> err\n    <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then usage will become</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">conn <span class=\"token operator\">:=</span> <span class=\"token function\">newSafeConn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"server:6666\"</span><span class=\"token punctuation\">)</span>\nconn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">`command`</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nresponse <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> conn<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// else, do following logic</span></code></pre></div>\n<p>But can we do much more than this?</p>\n<p>Yes! We can have an error wrapper for executing the task.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ErrorWrapper <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    err <span class=\"token builtin\">error</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>wrapper <span class=\"token operator\">*</span>ErrorWrapper<span class=\"token punctuation\">)</span> <span class=\"token function\">Then</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ErrorWrapper <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> wrapper<span class=\"token punctuation\">.</span>err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        wrapper<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> <span class=\"token function\">task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> wrapper\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then you can put anything you want into it.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">w <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>ErrorWrapper<span class=\"token punctuation\">{</span>err<span class=\"token punctuation\">:</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> conn net<span class=\"token punctuation\">.</span>Conn\nw<span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Dial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"server:6666\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">`command`</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Wait! But we need to send the connection to next task without an outer scope variable. But how to?</p>\n<p>Now let's get into <code class=\"language-text\">reflect</code> magic.</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> ErrorWrapper <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    err         <span class=\"token builtin\">error</span>\n    prevReturns <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewErrorWrapper</span><span class=\"token punctuation\">(</span>vs <span class=\"token operator\">...</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ErrorWrapper <span class=\"token punctuation\">{</span>\n    args <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>reflect<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> vs <span class=\"token punctuation\">{</span>\n        args <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>ErrorWrapper<span class=\"token punctuation\">{</span>\n        err<span class=\"token punctuation\">:</span>         <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span>\n        prevReturns<span class=\"token punctuation\">:</span> args<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span>ErrorWrapper<span class=\"token punctuation\">)</span> <span class=\"token function\">Then</span><span class=\"token punctuation\">(</span>task <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ErrorWrapper <span class=\"token punctuation\">{</span>\n    rTask <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">TypeOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> rTask<span class=\"token punctuation\">.</span><span class=\"token function\">NumOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"at least return error at the end\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> w<span class=\"token punctuation\">.</span>err <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        lenOfReturn <span class=\"token operator\">:=</span> rTask<span class=\"token punctuation\">.</span><span class=\"token function\">NumOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        vTask <span class=\"token operator\">:=</span> reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ValueOf</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">:=</span> vTask<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>prevReturns<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span>lenOfReturn<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Interface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n            w<span class=\"token punctuation\">.</span>err <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>lenOfReturn<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">Interface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        w<span class=\"token punctuation\">.</span>prevReturns <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>lenOfReturn<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> w\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">*</span>ErrorWrapper<span class=\"token punctuation\">)</span> <span class=\"token function\">Final</span><span class=\"token punctuation\">(</span>catch <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> w<span class=\"token punctuation\">.</span>err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, we coding like</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">w <span class=\"token operator\">:=</span> <span class=\"token function\">NewErrorWrapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tcp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"server:6666\"</span><span class=\"token punctuation\">)</span>\n\nw<span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>network<span class=\"token punctuation\">,</span> host <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    conn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> net<span class=\"token punctuation\">.</span><span class=\"token function\">Dail</span><span class=\"token punctuation\">(</span>network<span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> conn<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>conn net<span class=\"token punctuation\">.</span>Conn<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> conn<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">{</span><span class=\"token string\">`command`</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> err\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Final</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>e <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Error is Value","categories":["cs"],"tags":["golang","errors"]}}},"pageContext":{"slug":"/blog/2018/06/cs/error-is-value/"}}}