{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog04/13/cs/grpc-proxy-approach-and-pain/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>A few weeks ago, we re-discuss the config setup issue; we found generating a new, valid config is too hard for anyone.\nYou must remember all the field, what we need at this time, some duplicate, some would change by the environment,\nall the stuff became a setting nightmare!</p>\n<p>So we start an epic to simplify the config definition and generation; one of these tasks was to create a CLI for config control.\nAnd we have to let customer could upload or download their configs by this CLI tool\n. We have some gRPC services for internal exchanging configs, so we want to reuse them,\nand we have an api-gateway for security filtering the connection already, so we also want to base on it\n. Then I start my researching about gRPC proxy server.</p>\n<p>The thing we found was: <a href=\"https://github.com/mwitkow/grpc-proxy\">https://github.com/mwitkow/grpc-proxy</a>.\nIt's a proxy base on gRPC stream. And it's easy to set up. That's the main reason we pick it. A prototype didn't take a long time:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">server <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n    grpc<span class=\"token punctuation\">.</span><span class=\"token function\">CustomCodec</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span><span class=\"token function\">Codec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    grpc<span class=\"token punctuation\">.</span><span class=\"token function\">UnknownServiceHandler</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">.</span><span class=\"token function\">TransparentHandler</span><span class=\"token punctuation\">(</span>director<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">director</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> fullMethodName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>grpc<span class=\"token punctuation\">.</span>ClientConn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ignore implementation of dispatching to different service part</span>\n  <span class=\"token comment\">// I would mention it later</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And I found the gRPC server is <code class=\"language-text\">http.Server</code>, sounds great!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">func AddRoutes(group *gin.RouterGroup) {\n    group.POST(&quot;/&quot;, func(c *gin.Context) {\n        server.ServeHTTP(c.Writer, c.Request)\n    })\n}\n\n// main\ng := handler.Group(&quot;/grpc&quot;)\nAddRoutes(g)</code></pre></div>\n<p>Everything looks great; we send the request to our <code class=\"language-text\">domain/grpc</code> as our gRPC endpoint.\nBut that won't work! gRPC basing on HTTP/2, and the request path of the gRPC request is <code class=\"language-text\">/packageName.ServiceName/RPCName</code>,\nand it's hardcode in generated <code class=\"language-text\">*.pb.go</code> files. Means we can't change the path of it to <code class=\"language-text\">/grpc</code> endpoint,\nand we also can't add this subpath into the domain argument of <code class=\"language-text\">grpc.Dial</code> this function, of course,\nwe could add some hacks to changing the path, and it's workable. But that's impossible to ask every user to do that.\nAnd emit gRPC as wildcard path in <code class=\"language-text\">gin</code> is very hard to correct it, although it could be(since gRPC path format is quite not normal,\nthat's have meager rate we created some paths like that), so we buy another domain for the gRPC endpoint.</p>\n<p>Now, the code would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// We were switching the emit group by domains</span>\n<span class=\"token comment\">// this is part of the grpc domain</span>\ng <span class=\"token operator\">:=</span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">Group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">AddRoutes</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">AddRoutes</span><span class=\"token punctuation\">(</span>group <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>RouterGroup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we won't use that wildcard path directly but still have to write it down for path matching</span>\n    group<span class=\"token punctuation\">.</span><span class=\"token function\">POST</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/*path\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">*</span>gin<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">ServeHTTP</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>Writer<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let's back to the dispatching request part, in <code class=\"language-text\">director</code>, we have <code class=\"language-text\">fullMethodName</code>,\nwhich is the gRPC request path, we could use it as our target recognize:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">director</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> fullMethodName <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>grpc<span class=\"token punctuation\">.</span>ClientConn<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// we use config to expose the services and store in a map</span>\n    <span class=\"token comment\">// here is just a pseudo code, but got the idea is enough</span>\n    target<span class=\"token punctuation\">,</span> exist <span class=\"token operator\">:=</span> services<span class=\"token punctuation\">[</span>fullMethodName<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>exist <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Errorf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no service found for %s\"</span><span class=\"token punctuation\">,</span> fullMethodName<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    clientConn<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> grpc<span class=\"token punctuation\">.</span><span class=\"token function\">DialContext</span><span class=\"token punctuation\">(</span>\n        ctx<span class=\"token punctuation\">,</span>\n        target<span class=\"token punctuation\">,</span>\n        grpc<span class=\"token punctuation\">.</span><span class=\"token function\">WithCodec</span><span class=\"token punctuation\">(</span>grpcproxy<span class=\"token punctuation\">.</span><span class=\"token function\">Codec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ignore TLS part, but that's very easy to get it from official guide</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">,</span> clientConn<span class=\"token punctuation\">,</span> err\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The article is short; we also found a lot of problems with this task, hope you can even get some fun with this,\njust like us, pain but joy, peace.</p>","frontmatter":{"title":"gRPC proxy: approach & pain","categories":["cs"],"tags":["gRPC"]}}},"pageContext":{"slug":"/blog04/13/cs/grpc-proxy-approach-and-pain/"}}}