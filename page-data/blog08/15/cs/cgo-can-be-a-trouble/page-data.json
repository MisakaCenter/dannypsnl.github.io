{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog08/15/cs/cgo-can-be-a-trouble/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>This week, I have to upgrade nff-go from v0.7.0 to v0.8.1, so I change the version first. However, I found the whole package <code class=\"language-text\">nff-go/low</code> move to <code class=\"language-text\">nff-go/internal/low</code>, and our code directly based on <code class=\"language-text\">low</code>.</p>\n<p>After some research, I found all I need is call C function directly; the function is under <code class=\"language-text\">librte_ethdev</code>. So I add:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// #include &lt;rte_ethdev.h></span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"C\"</span></code></pre></div>\n<p>in our code.</p>\n<p>I thought since nff-go already link DPDK, I have nothing to do here, but I'm wrong.</p>\n<p>The problem is that CGO would link C objects into temporary objects first. So linker would complain there was no reference to the function I call.</p>\n<p>So I add another line:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// #cgo LDFLAGS: -lrte_distributor -lrte_reorder -lrte_kni -lrte_pipeline -lrte_table -lrte_port -lrte_timer -lrte_jobstats -lrte_lpm -lrte_power -lrte_acl -lrte_meter -lrte_sched -lrte_vhost -lrte_ip_frag -lrte_cfgfile -Wl,--whole-archive -Wl,--start-group -lrte_kvargs -lrte_mbuf -lrte_hash -lrte_ethdev -lrte_mempool -lrte_ring -lrte_mempool_ring -lrte_eal -lrte_cmdline -lrte_net -lrte_bus_pci -lrte_pci -lrte_bus_vdev -lrte_timer -lrte_pmd_bond -lrte_pmd_vmxnet3_uio -lrte_pmd_virtio -lrte_pmd_cxgbe -lrte_pmd_enic -lrte_pmd_i40e -lrte_pmd_fm10k -lrte_pmd_ixgbe -lrte_pmd_e1000 -lrte_pmd_ena -lrte_pmd_ring -lrte_pmd_af_packet -lrte_pmd_null -Wl,--end-group -Wl,--no-whole-archive -lrt -lm -ldl -lnuma</span></code></pre></div>\n<p>They are directly copied from <a href=\"https://github.com/intel-go/nff-go/blob/v0.8.1/internal/low/low_no_mlx.go\">https://github.com/intel-go/nff-go/blob/v0.8.1/internal/low/low<em>no</em>mlx.go</a></p>\n<p>However, linker unhappy with it, there are multiple definitions of symbols in the final object now, because we link two DPDK now.</p>\n<p>In pure CGO, we have no way to link only one at this situation, but since we know the duplicate references are the same one so whatever the linker picks the program would work.</p>\n<p>Once we know that, we can use <code class=\"language-text\">#cgo LDFLAGS: -Wl,--allow-multiple-definition</code> to force the linker to ignore this duplicate.</p>\n<p>However, we won't want to have a copied from nff-go, so I did the trick in Makefile to copied it automatically when building.<Paste></p>","frontmatter":{"title":"cgo can be a trouble","categories":["cs"],"tags":["golang","cgo"]}}},"pageContext":{"slug":"/blog08/15/cs/cgo-can-be-a-trouble/"}}}