{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogintroduction/of/antlr4//cs/introduction-of-antlr4/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>今天我想介紹一個強大有趣的工具--ANTLR</p>\n<p>這個工具根據我們定義的文法產生處理原始碼的 parser，當然不只是處理程式語言，你也可以用來處理其他資料</p>\n<h2>安裝</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> /usr/local/lib\n<span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> -O http://www.antlr.org/download/antlr-4.7-complete.jar\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CLASSPATH</span><span class=\"token operator\">=</span><span class=\"token string\">\".:/usr/local/lib/antlr-4.7-complete.jar:<span class=\"token variable\">$CLASSPATH</span>\"</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">antlr4</span><span class=\"token operator\">=</span><span class=\"token string\">'java -jar /usr/local/lib/antlr-4.7-complete.jar'</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">grun</span><span class=\"token operator\">=</span><span class=\"token string\">'java org.antlr.v4.gui.TestRig'</span></code></pre></div>\n<p>之後會用到的通常是<code class=\"language-text\">antlr4</code>這支程式</p>\n<p>因為它用來產生 parser</p>\n<h2>開始</h2>\n<p>我們需要建立一個檔案叫<code class=\"language-text\">xxx.g4</code>，而裡頭的 grammar 就必須是<code class=\"language-text\">grammar xxx;</code></p>\n<p>舉例來說<code class=\"language-text\">JSON.g4</code>就會是</p>\n<div class=\"gatsby-highlight\" data-language=\"antlr4\"><pre class=\"language-antlr4\"><code class=\"language-antlr4\"><span class=\"token keyword\">grammar</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接下來我們談<code class=\"language-text\">ANLTR</code>的語法還有它如何運作</p>\n<p>首先如果你接觸過<code class=\"language-text\">v3</code>以前的<code class=\"language-text\">antlr</code>，那麼你一定知道<code class=\"language-text\">embbed action</code></p>\n<p>不過這個版本的<code class=\"language-text\">antlr</code>並不需要全都使用<code class=\"language-text\">embbed action</code>來實現程式邏輯</p>\n<p>反之它加入了<code class=\"language-text\">xxxBaseListener</code>來處理大部分的翻譯過程</p>\n<p>你也可以選擇<code class=\"language-text\">Visitor</code>來實作，但是<code class=\"language-text\">visitor</code>需要顯式的調用<code class=\"language-text\">Context</code>，並不適合大型複雜的文法</p>\n<p><code class=\"language-text\">Listener</code>則能應付絕大多數的情況，它的<code class=\"language-text\">API</code>都是<code class=\"language-text\">enterXxx</code>跟<code class=\"language-text\">exitXxx</code>的格式，名稱相當直觀</p>\n<h2>約定</h2>\n<p>ANTLR 要求<code class=\"language-text\">Token</code>使用大寫英文字母開頭，<code class=\"language-text\">grammar</code>則使用小寫</p>\n<p>例如:</p>\n<div class=\"gatsby-highlight\" data-language=\"antlr4\"><pre class=\"language-antlr4\"><code class=\"language-antlr4\"><span class=\"token definition token constant\">NUM</span> <span class=\"token punctuation\">:</span> <span class=\"token character-class regex\"><span class=\"token punctuation\">[</span>0<span class=\"token range punctuation\">-</span>9<span class=\"token punctuation\">]</span></span><span class=\"token operator\">+</span> <span class=\"token punctuation\">;</span>\n<span class=\"token definition token constant\">ID</span> <span class=\"token punctuation\">:</span> <span class=\"token character-class regex\"><span class=\"token punctuation\">[</span>a<span class=\"token range punctuation\">-</span>z<span class=\"token punctuation\">]</span></span><span class=\"token operator\">+</span> <span class=\"token punctuation\">;</span>\n\n<span class=\"token definition rule class-name\">stat</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">ID</span> <span class=\"token string\">'='</span> expr\n    <span class=\"token operator\">|</span> expr\n    <span class=\"token punctuation\">;</span>\n\n<span class=\"token definition rule class-name\">expr</span> <span class=\"token punctuation\">:</span> <span class=\"token constant\">NUM</span>\n    <span class=\"token operator\">|</span> <span class=\"token constant\">ID</span>\n    <span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ID</code>跟<code class=\"language-text\">NUM</code>都是<code class=\"language-text\">token</code>，<code class=\"language-text\">stat</code>跟<code class=\"language-text\">expr</code>則是文法規則</p>\n<p><code class=\"language-text\">|</code> 表示不同的可能</p>\n<p><code class=\"language-text\">;</code> 表示規則結束</p>\n<p>可以看到如果我們想要辨別符號，必須用<code class=\"language-text\">&#39;&#39;</code>包起來，除了符號，關鍵字也要這樣處理，像這樣</p>\n<div class=\"gatsby-highlight\" data-language=\"antlr4\"><pre class=\"language-antlr4\"><code class=\"language-antlr4\"><span class=\"token definition token constant\">Class</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'class'</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">+</code> 表示一個或無限多個</p>\n<p><code class=\"language-text\">*</code> 表示沒有或無限多個</p>\n<p><code class=\"language-text\">?</code> 表示有或沒有</p>\n<p>定義<code class=\"language-text\">ID</code>跟<code class=\"language-text\">NUM</code>時，我都使用了正規表達式來處理，這是為了方便而放入的功能</p>\n<p>你也可以選擇</p>\n<div class=\"gatsby-highlight\" data-language=\"antlr4\"><pre class=\"language-antlr4\"><code class=\"language-antlr4\"><span class=\"token definition token constant\">NUM</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'0'</span> <span class=\"token operator\">..</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span> <span class=\"token punctuation\">;</span></code></pre></div>\n<p>這種寫法</p>\n<p>最後就是產生<code class=\"language-text\">parser</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">antlr4 -Dlanguage<span class=\"token operator\">=</span>Cpp JSON.g4</code></pre></div>\n<p><code class=\"language-text\">-Dlanguage</code> 指定產生什麼語言的<code class=\"language-text\">parser</code></p>\n<p>這裡是<code class=\"language-text\">C++</code></p>\n<p>如果不指定，那麼預設是<code class=\"language-text\">Java</code></p>\n<p>目前支援<code class=\"language-text\">Java</code>, <code class=\"language-text\">C#</code>, <code class=\"language-text\">Python2|3</code>, <code class=\"language-text\">JavaScript</code>, <code class=\"language-text\">Go</code>, <code class=\"language-text\">C++</code>, <code class=\"language-text\">Swift</code></p>\n<p>儘管選擇你習慣的那個</p>\n<p>為什麼要學 Antlr?</p>\n<p>事實上編譯技術在很多地方都有用途</p>\n<p>例如<code class=\"language-text\">Firefox</code>團隊為了加速<code class=\"language-text\">JavaScript</code> <code class=\"language-text\">eval</code>函式的執行速率，在編譯到<code class=\"language-text\">eval</code>時會進行預處理，讓<code class=\"language-text\">JavaScript</code>真的執行到這邊時已經少了許多工作</p>\n<p>簡單一些的應用可能有：編寫<code class=\"language-text\">DSL</code>簡化開發工作</p>\n<p>例如新增網路服務<code class=\"language-text\">API</code>，如果用特製的語言將工作進行簡化</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\">routes<span class=\"token operator\">:</span>\n    get <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span>\n        resp Page1</code></pre></div>\n<p>那麼我們實際上需要負擔的工作量就大幅縮小了吧！</p>\n<p>而且亦便於未來的維護工作，而<code class=\"language-text\">DSL</code>最棒的要點就在於，我們往往無須實現完整的通用語言</p>\n<p>比如我們可以在回傳的區塊回到<code class=\"language-text\">Java</code>語言</p>\n<div class=\"gatsby-highlight\" data-language=\"nim\"><pre class=\"language-nim\"><code class=\"language-nim\">routes<span class=\"token operator\">:</span>\n    get <span class=\"token string\">\"/\"</span><span class=\"token operator\">:</span>\n        <span class=\"token operator\">@</span>java <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">//</span> <span class=\"token operator\">...</span> Your java code\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>這樣我們就不需要實現太過麻煩的東西</p>\n<p>而一樣能享受<code class=\"language-text\">DSL</code>的方便度</p>","frontmatter":{"title":"ANTLR v4--introduction","categories":["cs"],"tags":["antlr4"]}}},"pageContext":{"slug":"/blogintroduction/of/antlr4//cs/introduction-of-antlr4/"}}}