{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogpractical/issue/about/dns/edns0//cs/practical-issue-about-dns-edns0/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>I have to create a checker for our DNS server.</p>\n<p>Our DNS server will return it's config via <code class=\"language-text\">TXT</code>.</p>\n<p>Code would like:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"github.com/miekg/dns\"</span>\n\n<span class=\"token comment\">// func main</span>\nm <span class=\"token operator\">:=</span> dns<span class=\"token punctuation\">.</span>Msg<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// `google.com.` is correct format, `.` is required!</span>\nm<span class=\"token punctuation\">.</span><span class=\"token function\">SetQuestion</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"google.com.\"</span><span class=\"token punctuation\">,</span> dns<span class=\"token punctuation\">.</span>TypeTXT<span class=\"token punctuation\">)</span>\nc <span class=\"token operator\">:=</span> dns<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// write out port 53(:53) is required, dns package we used at here won't automatically fix port to 53.</span>\n<span class=\"token comment\">// Unlike some cli tool such as Dig</span>\nresponse<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Exchange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token string\">\"8.8.8.8:53\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> r<span class=\"token punctuation\">.</span>Answer <span class=\"token punctuation\">{</span>\n    txt <span class=\"token operator\">:=</span> t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>dns<span class=\"token punctuation\">.</span>TXT<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// dns.TXT.Txt is []string</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">:=</span> txt<span class=\"token punctuation\">.</span>Txt <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// t is string, now you can use it</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But our config stream is too big to over the limit of UDP! And we must get it.</p>\n<p><strong>RFC 6891</strong>:</p>\n<blockquote>\n<p>Traditional DNS messages are limited to 512 octets in size when sent over UDP [RFC1035].</p>\n</blockquote>\n<p>After researching, I find we can extend DNS packet size by EDNS0.</p>\n<p><strong>RFC 6891</strong>:</p>\n<blockquote>\n<p>EDNS(0) specifies a way to advertise additional features such as\nlarger response size capability, which is intended to help avoid\ntruncated UDP responses, which in turn cause retry over TCP. It\ntherefore provides support for transporting these larger packet sizes\nwithout needing to resort to TCP for transport.</p>\n</blockquote>\n<p>Code is:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\">m<span class=\"token punctuation\">.</span><span class=\"token function\">SetEdns0</span><span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In <code class=\"language-text\">SetEdns0</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>dns <span class=\"token operator\">*</span>Msg<span class=\"token punctuation\">)</span> <span class=\"token function\">SetEdns0</span><span class=\"token punctuation\">(</span>udpsize <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">,</span> do <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Msg <span class=\"token punctuation\">{</span>\n\te <span class=\"token operator\">:=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>OPT<span class=\"token punctuation\">)</span>\n\te<span class=\"token punctuation\">.</span>Hdr<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span>\n\te<span class=\"token punctuation\">.</span>Hdr<span class=\"token punctuation\">.</span>Rrtype <span class=\"token operator\">=</span> TypeOPT\n\te<span class=\"token punctuation\">.</span><span class=\"token function\">SetUDPSize</span><span class=\"token punctuation\">(</span>udpsize<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> do <span class=\"token punctuation\">{</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">SetDo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tdns<span class=\"token punctuation\">.</span>Extra <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dns<span class=\"token punctuation\">.</span>Extra<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> dns\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code that change UDP size is <code class=\"language-text\">e.SetUDPSize</code>, so let's take a look:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>rr <span class=\"token operator\">*</span>OPT<span class=\"token punctuation\">)</span> <span class=\"token function\">SetUDPSize</span><span class=\"token punctuation\">(</span>size <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\trr<span class=\"token punctuation\">.</span>Hdr<span class=\"token punctuation\">.</span>Class <span class=\"token operator\">=</span> size\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type of <code class=\"language-text\">OPT.Hdr</code> is <code class=\"language-text\">RR_Header</code>, then we dig into <strong>RFC 6891</strong>, at page 5 you can find:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The fixed part of an OPT RR is structured as follows:\n\n+------------+--------------+------------------------------+\n| Field Name | Field Type   | Description                  |\n+------------+--------------+------------------------------+\n| NAME       | domain name  | MUST be 0 (root domain)      |\n| TYPE       | u_int16_t    | OPT (41)                     |\n| CLASS      | u_int16_t    | requestor&#39;s UDP payload size |\n| TTL        | u_int32_t    | extended RCODE and flags     |\n| RDLEN      | u_int16_t    | length of all RDATA          |\n| RDATA      | octet stream | {attribute,value} pairs      |\n+------------+--------------+------------------------------+</code></pre></div>\n<p>As expected, <code class=\"language-text\">RR_Header.Class</code> will change UDP payload size. Celebrate it!!!</p>\n<p>More info:</p>\n<ul>\n<li><a href=\"https://tools.ietf.org/html/rfc2671\">RFC 2671</a></li>\n<li><a href=\"https://tools.ietf.org/html/rfc6891\">RFC 6891</a></li>\n<li><a href=\"https://github.com/miekg/dns\">miekg/dns</a></li>\n</ul>","frontmatter":{"title":"Practical issue about DNS -- EDNS0","categories":["cs"],"tags":["networking","dns","golang"]}}},"pageContext":{"slug":"/blogpractical/issue/about/dns/edns0//cs/practical-issue-about-dns-edns0/"}}}