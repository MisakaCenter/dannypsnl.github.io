{"componentChunkName":"component---src-templates-blog-post-js","path":"/blogmake/googletest/like/test/framework/from/scratch//cs/make-googletest-like-test-framework-from-scratch/","result":{"data":{"site":{"siteMetadata":{"siteUrl":"https://dannypsnl.github.io"}},"markdownRemark":{"html":"<p>Back to 2016, I learned <a href=\"https://github.com/google/googletest\">googletest</a> how improving my C++ project. From that, I always want to know how it.</p>\n<p>Let's take a look at some basic example of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Arithmetic<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ASSERT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I think that's pretty easy to understanding for anyone ever wrote a unit test.</p>\n<p>In the googletest context, you would get a lot of <code class=\"language-text\">TEST</code> there like:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Suit1<span class=\"token punctuation\">,</span> test1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Suit1<span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Suit2<span class=\"token punctuation\">,</span> test1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Suit2<span class=\"token punctuation\">,</span> test2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Back to our article, think about it, why the compiler does not complain <code class=\"language-text\">TEST</code> be redefined so many times, and never specify the type of parameters(and the return type)?</p>\n<p>Answer: Because that is not a function.</p>\n<p>Then the question became: what it that?</p>\n<p>The answer is clear, it's a C macro! Only the macro can behave like a function call format <code class=\"language-text\">TEST(Suit, Test)</code>.</p>\n<p>As everyone knows, C macro just expands codes inside of it. So the question changed again and now it's: What kind of codes can be valid after expanded with a code block at the global level?</p>\n<p>The answer to this also it easy: a function(or a method implementation because we're using C++).</p>\n<p>After so many words, let's start coding! Create a file <code class=\"language-text\">unittest.hpp</code>, code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> UNITTEST</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> UNITTEST</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TEST(suit, test)</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>So we can have a <code class=\"language-text\">main.cpp</code> with code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#include &quot;./unittest.hpp&quot;\n\nTEST(Arithmetic, Integer)</code></pre></div>\n<p>Then compile: <code class=\"language-text\">g++ main.cpp</code>, this should fine now.</p>\n<p>Then we add a code block:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">TEST(Arithmetic, Integer) {}</code></pre></div>\n<p>Oops!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ g++ main.cpp\nmain.cpp:3:27: error: expected unqualified-id\nTEST(Arithmetic, Integer) {}\n                          ^\n1 error generated.</code></pre></div>\n<p>Let's fix it. In your <code class=\"language-text\">unittest.hpp</code>, typed:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#define TEST(suit, test) void foo()</code></pre></div>\n<p>This time, compiler very happy without any complains. So we have to go to the next step: How to executing these tests automatically?</p>\n<p>To do that, we must have a place that stores(or reference to) our tests. So we create a global variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span> </span><span class=\"token comment\">// for std::function</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;vector></span> </span><span class=\"token comment\">// for std::vector</span>\n\nstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> all_test<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And add an insertion call in macro <code class=\"language-text\">TEST</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TEST(suit, test)                                                       \\\n  void foo();                                                                  \\\n  all_test.push_back(foo);                                                     \\\n  void foo()</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ g++ -std=c++11 main.cpp\nmain.cpp:3:1: error: unknown type name &#39;all_test&#39;\nTEST(Arithmetic, Integer) {}\n^\n././unittest.hpp:11:3: note: expanded from macro &#39;TEST&#39;\n  all_test.push_back(foo);                                                     \\\n  ^\nmain.cpp:3:1: error: cannot use dot operator on a type\n././unittest.hpp:11:11: note: expanded from macro &#39;TEST&#39;\n  all_test.push_back(foo);                                                     \\\n          ^\n2 errors generated.</code></pre></div>\n<p>But it won't work, let's see what happened here. The error message is about compiler expects there is a type <code class=\"language-text\">all_test</code> but didn't, then it complains a type name can't contain <code class=\"language-text\">.</code>.</p>\n<p>To bypass the error and get expected insertion call we need some interesting trick. It's all about C++ constructor promised to be called while the structure is created.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">unittest_insert</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">unittest_insert</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nunittest_insert<span class=\"token operator\">::</span><span class=\"token function\">unittest_insert</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  all_test<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TEST(suit, test)                                                       \\\n  void foo();                                                                  \\\n  unittest_insert ut{foo};                                                     \\\n  void foo()</span></code></pre></div>\n<p>Now, let's add some print statement into our test and implements run all tests to prove what have we done is workable. The content of <code class=\"language-text\">main.cpp</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"./unittest.hpp\"</span></span>\n\n<span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Arithmetic<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test \"</span>\n            <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">run_all_tests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Implementation of <code class=\"language-text\">run_all_tests</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">run_all_tests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> test <span class=\"token operator\">:</span> all_test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we knew how to run tests. We need to know how to determine a fail.\nThat's why we need assertion macros. Here is an example of testing:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">TEST</span><span class=\"token punctuation\">(</span>Arithmetic<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">ASSERT_EQ</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then see how <code class=\"language-text\">ASSERT_EQ</code> be made.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ASSERT_EQ(le, re)                                                      \\\n  if (le != re) {                                                              \\\n    throw \"assert equal failed\";                                               \\\n  }</span></code></pre></div>\n<p><code class=\"language-text\">g++ -std=c++11 main.cpp</code> and run, where interesting thing is what if you write <code class=\"language-text\">ASSERT_EQ(1, 2)</code> that you would get a runtime error says:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">libc++abi.dylib: terminating with uncaught exception of type char const*\n[1]    35777 abort      ./a.out</code></pre></div>\n<p>But before going to improving our error reporting, we should think about a problem: Can we create the second one test? The answer is <strong>NO</strong>.</p>\n<p>You can have a try then get a list of redefinition errors from the compiler. To solve the problem we need to get some help from the macro.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TEST(suit, test)                                                       \\\n  void utf_suit##test();                                                       \\\n  unittest_insert ut_suit##test{utf_suit##test};                               \\\n  void utf_suit##test()</span></code></pre></div>\n<p><code class=\"language-text\">##</code>, the magic from the macro, you can get more helps from <a href=\"https://stackoverflow.com/questions/4364971/and-in-macros\">https://stackoverflow.com/questions/4364971/and-in-macros</a></p>\n<p>Now, we won't get the error from expanding the macro twice. And could get a chance to stop and think about the error reporting design.</p>\n<p>At now, we just <code class=\"language-text\">throw</code> a <code class=\"language-text\">char const *</code>, and we didn't catch the exception, so we would receive a <code class=\"language-text\">terminating with uncaught exception</code> error. That caused two problems:</p>\n<ul>\n<li>The test won't keep going caused users won't know how many tests failed actually.</li>\n<li>And users don't know what exception been throw actually.</li>\n</ul>\n<p>To solve the problem, what the thing we should do is catch the exception, report and keep going on. Here is the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;exception></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">run_all_tests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> test <span class=\"token operator\">:</span> all_test<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test pass\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>exception <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>cerr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"test failed: unknown exception\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now it would report test passed or not, it looks nice as a proof of concept.</p>\n<p>Now counting what do we learn from these?</p>\n<ul>\n<li>How to generate a function from the macro</li>\n<li>How to handle the exception</li>\n</ul>\n<p>And here have some exercises you can do.</p>\n<ul>\n<li>improve the error reporting, not just say assertion failed, also show the expression why isn't equal(hint: custom exception)</li>\n<li>how to avoid user access the generated function?(hint: try generating class)</li>\n<li>can we report the coverage? (hint: <code class=\"language-text\">llvm-cov</code> or similar things)</li>\n<li>what if the input expression is not comparable?</li>\n</ul>","frontmatter":{"title":"Make googletest-like test framework from scratch","categories":["cs"],"tags":["metaprogramming","cpp"]}}},"pageContext":{"slug":"/blogmake/googletest/like/test/framework/from/scratch//cs/make-googletest-like-test-framework-from-scratch/"}}}